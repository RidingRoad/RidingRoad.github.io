{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/RidingRoad.png","path":"img/RidingRoad.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/alipy.png","path":"img/alipy.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1558776763136},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1558776763136},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1558776763136},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1558776763136},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1558776763136},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1558776763137},{"_id":"themes/yilia/README.md","hash":"99985dc9f0f3473a26341245e436751bc42fd322","modified":1558776763137},{"_id":"themes/yilia/_config.yml","hash":"64c630784233609406e8cf855fa2c7c52574fcdc","modified":1558776763138},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1558776763148},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1558776763169},{"_id":"source/_posts/Ctrl-C-Ctrl-V组合拳提取电话和邮箱.md","hash":"3b172264f5d21d7198dae5958d41176eabd23ece","modified":1558776763095},{"_id":"source/_posts/Django中序列化器read-only和write-only.md","hash":"8e9f2f34bf5374b4c9656d14f5e2a8fcd3a94eca","modified":1558776763096},{"_id":"source/_posts/DjangoRESTframework.md","hash":"b4d6267556f70b24b21f4de3e73de57dda482670","modified":1558776763095},{"_id":"source/_posts/Docker常用命令.md","hash":"882a825e068864911f3e503f20c2e1ff4b42bef4","modified":1558776763096},{"_id":"source/_posts/Elasticsearch待续.md","hash":"da1fedac90084dde1f1bb42412030af93c6ed061","modified":1558776763097},{"_id":"source/_posts/Django框架.md","hash":"5984a7489687193a3a38cdd0c31ddd13859500e2","modified":1558776763096},{"_id":"source/_posts/Flask-Web-框架网站的一丁点修修改改.md","hash":"c212c656e9bc1bd67bddf8a0bcbe9f7a6134d1b4","modified":1558776763097},{"_id":"source/_posts/Flask的一对多多对多以及自关联.md","hash":"c7e82d1fe9fdafe39563a95acfe7b750739235bf","modified":1558776763098},{"_id":"source/_posts/Golang待续.md","hash":"3a783d50a8d232bc3f0d6becd16153f473720a51","modified":1558776763099},{"_id":"source/_posts/Linux中su-su-sudo的区别.md","hash":"124d934c9c771b9ab86813d1c09be844fe824dbd","modified":1558776763099},{"_id":"source/_posts/Python-exception-handler-finally.md","hash":"b1ce4bbe5c3d18001b2760b7168eb9d95f13952d","modified":1558776763100},{"_id":"source/_posts/MySQL修改默认引擎的方法.md","hash":"2b488960bb0221f8f0e1fdb7a261ec73b41da9e5","modified":1558776763099},{"_id":"source/_posts/Python中else其他用法.md","hash":"69297040311cb52a92e76f091210b12744c46aa4","modified":1558776763100},{"_id":"source/_posts/Linux终端命令修改ip地址掩码和网关.md","hash":"9ec44fd38e9722bc4e5049e82b3e80f42eaa5100","modified":1558776763099},{"_id":"source/_posts/Python中global和nonlocal的应用场景区别.md","hash":"36f66960e3eb57eeb995ed6230656811f2ebbc8e","modified":1558776763101},{"_id":"source/_posts/Python中浅拷贝的三种形式.md","hash":"0500cf23b6678446b4c57b93946359d365f78ca1","modified":1558776763101},{"_id":"source/_posts/Python中用中文也能做变量？？？.md","hash":"48471833837a82ad934f18818d892752abfa2412","modified":1558776763101},{"_id":"source/_posts/Python中实现Linux管道.md","hash":"47436aa3a2f1bb790b142cf2693329ea820dbac4","modified":1558776763101},{"_id":"source/_posts/Python告诉你爱情公寓和一出好戏的差别.md","hash":"7e03546472e4a5834b9609eb3ed33e79da0ebb87","modified":1558776763102},{"_id":"source/_posts/Python代码版本兼容技巧以及自我实现six.md","hash":"5362d6688366b181df871591001e59332e75dcbc","modified":1558776763102},{"_id":"source/_posts/Python实现UTC时间戳和格式化字符串互转.md","hash":"6b088b611bbf69d8bfbe43c7269e0c3726ed9252","modified":1558776763102},{"_id":"source/_posts/Python自动化Markdown无序列表.md","hash":"bf13fec3862cd7d3f1054ab5a8b082abe688006c","modified":1558776763103},{"_id":"source/_posts/Redis数据持久化的方式.md","hash":"e6e79268f0b7013a83c2635acc9e8c0d1b0c233d","modified":1558776763103},{"_id":"source/_posts/Python后台开发ORM模型类自动生成神器-md.md","hash":"030c414c0bc49b22ce524655ae6cd663905af13e","modified":1558776763102},{"_id":"source/_posts/Ubuntu中一个网卡配置多个IP地址.md","hash":"fe5cf1b52e5f33b2bb76e9bacd2789663d614b22","modified":1558776763103},{"_id":"source/_posts/WSGI协议.md","hash":"b0a67825c22dfe61ca13d4b842a71870e8e076ac","modified":1558776763103},{"_id":"source/_posts/open函数的errors参数的使用.md","hash":"8e6fdd6d9e0a91fd8d479f4e9700e4fec938b5b3","modified":1558776763105},{"_id":"source/_posts/logging日志模块配置-使用-禁用.md","hash":"1271bd2c438597bde7c44da74c2cd81b7ab2b3e0","modified":1558776763104},{"_id":"source/_posts/namedtuple的妙用.md","hash":"01659e43c5cb388e1e0eca4e00c12dc1c253b781","modified":1558776763105},{"_id":"source/_posts/【Python基础系列1】.md","hash":"cc83bdb48e94d9d540d00e6a46c6c115b8fc0b5e","modified":1558776763108},{"_id":"source/_posts/python-backend-pen-questions-0513.md","hash":"0119ebe6ae8a8f8b734ed228a9fe1512f0ffa386","modified":1558776763107},{"_id":"source/_posts/修改Redis数据库个数的方法.md","hash":"9425464e5d517d09731366f0b8fb1d205f4e2c3e","modified":1558776763110},{"_id":"source/_posts/使用正则校验密码强度以及正则版的Python字符串strip处理函数.md","hash":"f9f02080d0c328db8d2f814062152838762952f7","modified":1558776763109},{"_id":"source/_posts/使用boto3批量上传图片到S3.md","hash":"69c360f0285915fa19f53270ccab90021fe4d54b","modified":1558776763109},{"_id":"source/_posts/存在引用关系的表或视图快速添加字段.md","hash":"944a69b063c79521cb2e83dd198d0930289879d0","modified":1558776763111},{"_id":"source/_posts/增长黑客GrowthHacker.md","hash":"3bae94af25ce451a13ae3336d3d143bf0d70b8dc","modified":1558776763110},{"_id":"source/_posts/正则表达式用法注意点.md","hash":"5a44352b66cd666a47f277117a60d3647b5cf453","modified":1558776763111},{"_id":"source/_posts/python-decorator.md","hash":"9724caf02b8991da469306b1ae3078fcfd23b6c9","modified":1558776938071},{"_id":"source/_posts/段子一键取并存为Markdown文档.md","hash":"49518f35610dc5dd6b017678d9406a568db9ce37","modified":1558776763111},{"_id":"source/_posts/常用数据库.md","hash":"c82399de293af765daad222d9ead2b165e383517","modified":1558776763111},{"_id":"source/_posts/都是Python3就万事大吉.md","hash":"d9b4574865dcc14c7dce10c73e1e77b2df7b4d82","modified":1558776763112},{"_id":"source/_posts/猜数字小程序.md","hash":"d5c9f0c5a3859589d26bec901dec3f5cb84d8eab","modified":1558776763112},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1558776763139},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1558776763140},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1558776763139},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1558776763139},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1558776763140},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1558776763140},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1558776763140},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1558776763147},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1558776763147},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1558776763148},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1558776763148},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1558776763148},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1558776763148},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1558776763148},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"466a97a3d0e2679de9fa292b0bacb93ff96431a4","modified":1558776763167},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1558776763169},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1558776763149},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1558776763161},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558776763147},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1558776763168},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1558776763168},{"_id":"source/_posts/用Pythony验证万物归一-考拉咨猜想.md","hash":"56d241dd2f5d94513395e7cdb42648a4ddcee5b0","modified":1558776763112},{"_id":"themes/yilia/assets/img/RidingRoadLogo.PNG","hash":"367ab15f0d40b0ceb3cdc9fad6338326c7d6c3de","modified":1558776763138},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1558776763141},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1558776763141},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"6af108b0107c8abc50aeeab8a7e0c5372d6050e9","modified":1558776763141},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1558776763142},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"9cc8e304e6d47088573587ebaf6310cd32a0a8af","modified":1558776763141},{"_id":"themes/yilia/layout/_partial/baidu_analytics.ejs","hash":"d5699ce0621269c5e96ca15e9cf3e060d079701c","modified":1558776763142},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1558776763142},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1558776763142},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1558776763143},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"8c0f4b4a9cfa74abc937f488b78f22936166480d","modified":1558776763142},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1558776763143},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"c76b5b081425f62e0ec6576b04934c05b9caf5c7","modified":1558776763143},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1558776763143},{"_id":"themes/yilia/layout/_partial/note","hash":"59f790decdbb1be8adcfe697ddb09f56953fd2ed","modified":1558776763144},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1558776763143},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1558776763143},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1558776763147},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1558776763147},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1558776763162},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1558776763162},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1558776763162},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1558776763162},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1558776763163},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1558776763163},{"_id":"themes/yilia/source/img/RidingRoad.png","hash":"367ab15f0d40b0ceb3cdc9fad6338326c7d6c3de","modified":1558776763163},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1558776763165},{"_id":"themes/yilia/source/img/favicon.ico","hash":"d0e15bd8ef327a67e1bbd6c834070f55c2c4e4ce","modified":1558776763165},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1558776763166},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1558776763166},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1558776763149},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1558776763149},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1558776763150},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1558776763149},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1558776763150},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1558776763150},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1558776763151},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1558776763151},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1558776763151},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1558776763152},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1558776763155},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1558776763154},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1558776763154},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1558776763155},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1558776763156},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1558776763156},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1558776763156},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1558776763156},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1558776763157},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1558776763157},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1558776763157},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1558776763157},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1558776763157},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1558776763158},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1558776763158},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1558776763158},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1558776763159},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1558776763159},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1558776763159},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1558776763159},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1558776763160},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1558776763160},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1558776763160},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1558776763160},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1558776763160},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1558776763161},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1558776763161},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1558776763161},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1558776763161},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1558776763147},{"_id":"themes/yilia/source/img/wechat.png","hash":"30a1e21c0dac55ab2310434ccfdaeb97b9f97467","modified":1558776763167},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1558776763144},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1558776763144},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1558776763144},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1558776763144},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1558776763145},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1558776763145},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"500a51889a74cbff955b0a6a1807c5caec6892eb","modified":1558776763146},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1558776763146},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1558776763146},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1558776763146},{"_id":"themes/yilia/source/img/alipy.png","hash":"a5d377b2fda2f1bff17b408f3866da9f888aa252","modified":1558776763165},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1558776763152},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1558776763151},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1558776763153},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1558776763153},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1558776763152},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1558776763154},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1558776763154},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1558776763152},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1558776763152},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1558776763155},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1558776763156},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1558776763156},{"_id":"public/content.json","hash":"bd83fa100c17ff52b2fdcb25f5bfa42432bc44a0","modified":1558776952765},{"_id":"public/2018/12/01/都是Python3就万事大吉/index.html","hash":"85bc4197aadafa1c908484a3b6abd771d5d10605","modified":1558776953378},{"_id":"public/2018/11/20/Python后台开发ORM模型类自动生成神器-md/index.html","hash":"90b6dbd5b636d4a3245bc3f7247cb43f7c8c69e3","modified":1558776953466},{"_id":"public/2018/11/13/Python实现UTC时间戳和格式化字符串互转/index.html","hash":"633d5f31128a37b4cf85c92b1a088b03acad75d7","modified":1558776953481},{"_id":"public/2018/11/13/Python中实现Linux管道/index.html","hash":"9ebddae8dc84f400fb5c70d85fc59b7d88d23963","modified":1558776953481},{"_id":"public/2018/08/29/Docker常用命令/index.html","hash":"99316d822933eb1efd2fed2ef36df771c79fc84d","modified":1558776953481},{"_id":"public/2018/08/16/Redis数据持久化的方式/index.html","hash":"771115aa9a376ce1ad14c83a2e6730edaf5986ab","modified":1558776953482},{"_id":"public/2018/08/16/Ubuntu中一个网卡配置多个IP地址/index.html","hash":"ebb964f1dbb958244b4cd2ea98d002c9b5ff741a","modified":1558776953482},{"_id":"public/2018/08/15/Linux终端命令修改ip地址掩码和网关/index.html","hash":"7dd141bef2080f5af7ccedf46f5ac4933baf6481","modified":1558776953482},{"_id":"public/2018/08/15/修改Redis数据库个数的方法/index.html","hash":"8c2f3e4b1436a7b94489715fe479d725842cface","modified":1558776953482},{"_id":"public/2018/08/15/MySQL修改默认引擎的方法/index.html","hash":"81b7279f6c9c158202e772a5a2e337c345293b0f","modified":1558776953482},{"_id":"public/2018/08/12/Python告诉你爱情公寓和一出好戏的差别/index.html","hash":"fae94ec221236d46d21fac49f1e2c23af4fd9a09","modified":1558776953482},{"_id":"public/2018/08/10/Python代码版本兼容技巧以及自我实现six/index.html","hash":"8fdca959c406bae887c91ef73f8b51e65ed3b711","modified":1558776953482},{"_id":"public/2018/08/09/Django中序列化器read-only和write-only/index.html","hash":"06aa2bd86ed04e7f2dc04efe19e0c49de4212957","modified":1558776953483},{"_id":"public/2018/08/09/open函数的errors参数的使用/index.html","hash":"e4012162445bbd00bf40b973628b79148d62c672","modified":1558776953483},{"_id":"public/2018/08/06/Flask的一对多多对多以及自关联/index.html","hash":"59b587a4b45e090d5d4eef8751003a556ad761ee","modified":1558776953483},{"_id":"public/2018/08/05/Python中用中文也能做变量？？？/index.html","hash":"8c49abee2b7672cb15dd113908cf5ce8190088da","modified":1558776953483},{"_id":"public/2018/08/02/logging日志模块配置-使用-禁用/index.html","hash":"0058cf6d975ddb0fbbdea6d995398989840c85c7","modified":1558776953483},{"_id":"public/2018/08/01/Linux中su-su-sudo的区别/index.html","hash":"8bbb41088497cced041936d2f92ff25c4747a7e8","modified":1558776953483},{"_id":"public/2018/08/01/Python中global和nonlocal的应用场景区别/index.html","hash":"041d5938f1825f26bb63ecd07cbcad43c2dbec6b","modified":1558776953484},{"_id":"public/2018/07/31/Python中浅拷贝的三种形式/index.html","hash":"2728e188b9313d73075e312af1e906e8e3f870b2","modified":1558776953484},{"_id":"public/2018/07/31/Python中else其他用法/index.html","hash":"686fbbc159aa22a79d9ea69ed501c8e50bc1a01a","modified":1558776953484},{"_id":"public/2018/07/30/常用数据库/index.html","hash":"53e1301bb7de99cb2456d478b51afe4f58f99a8e","modified":1558776953484},{"_id":"public/2018/07/29/段子一键取并存为Markdown文档/index.html","hash":"ad0128bb829518eaf704ba9b67b69c982ec2019b","modified":1558776953484},{"_id":"public/2018/07/26/正则表达式用法注意点/index.html","hash":"baa81cf4f54e11030931513bd26577630f5885bb","modified":1558776953485},{"_id":"public/2018/07/24/DjangoRESTframework/index.html","hash":"be73e84139353931d0fb8e173cd05c0321224d31","modified":1558776953485},{"_id":"public/2018/07/24/Django框架/index.html","hash":"052ec0447fa619bdc1756ed1507158ee2d3f4cc0","modified":1558776953485},{"_id":"public/2018/07/24/WSGI协议/index.html","hash":"e358cd341b42a90008a169a983b318581c1831c5","modified":1558776953485},{"_id":"public/2018/07/24/增长黑客GrowthHacker/index.html","hash":"fa0eb65f0fcea12ba8959f96cb50558d9375f0ba","modified":1558776953485},{"_id":"public/2018/07/24/用Pythony验证万物归一-考拉咨猜想/index.html","hash":"07fc23156c30aa26ad5074b6adf2590ae0e7b95b","modified":1558776953485},{"_id":"public/2018/07/24/使用正则校验密码强度以及正则版的Python字符串strip处理函数/index.html","hash":"ea1bf76b4e54e00b57c118a52965c2a2c5ead872","modified":1558776953486},{"_id":"public/2018/07/24/猜数字小程序/index.html","hash":"c558a6dac2b82eec22cbf5c4117a89e8ac87534e","modified":1558776953486},{"_id":"public/2018/07/24/Python自动化Markdown无序列表/index.html","hash":"fc6e129959126a2dd2f26ca389cc78fd7c327431","modified":1558776953486},{"_id":"public/2018/07/24/Ctrl-C-Ctrl-V组合拳提取电话和邮箱/index.html","hash":"6118e51bf3a81403e9e37d2e76940476b54a8eaf","modified":1558776953486},{"_id":"public/2018/07/20/Flask-Web-框架网站的一丁点修修改改/index.html","hash":"8d943b4704e8db369652218f995178c44d924802","modified":1558776953486},{"_id":"public/2018/07/19/【Python基础系列1】/index.html","hash":"1b875cbf81bde2e2f6bd10c50d0df8104fe62098","modified":1558776953486},{"_id":"public/index.html","hash":"a1433d2ec22240b119b8ef42e80b0fd70ef6801e","modified":1558776953487},{"_id":"public/page/2/index.html","hash":"653078d168ba38b7e34a1ffa103dd8b3867c77ca","modified":1558776953487},{"_id":"public/page/3/index.html","hash":"265e77151580fb0a7d6679d78916938e5fc30914","modified":1558776953487},{"_id":"public/page/4/index.html","hash":"3aad8951014e9a874deedb12f531be13fa3cd209","modified":1558776953487},{"_id":"public/archives/index.html","hash":"1c928b674d17d6e91d5fd782df3b61d0df8d4265","modified":1558776953487},{"_id":"public/archives/page/2/index.html","hash":"b9e83f97268eeea5ee8d2c59e6f223dd185e7a2a","modified":1558776953487},{"_id":"public/archives/page/3/index.html","hash":"34dc7431bb4fc8d77104634a5189c6461cf147f2","modified":1558776953488},{"_id":"public/archives/page/4/index.html","hash":"8640fa1e7c243ac7125c6d06ed579ae7b720c4af","modified":1558776953488},{"_id":"public/archives/2018/index.html","hash":"53e8f0cb21e70ac295f2df1f3df68e3fec11195e","modified":1558776953488},{"_id":"public/archives/2018/page/2/index.html","hash":"b8be4c4930c3df3d52e5a8de267747cfce54fe89","modified":1558776953488},{"_id":"public/archives/2018/page/3/index.html","hash":"b974a29729c5b9220bbd904d00f29338a4b82d1c","modified":1558776953488},{"_id":"public/archives/2018/page/4/index.html","hash":"53ef4c2c89e37cd28a12fa6678b8ab5c8d6eefdb","modified":1558776953488},{"_id":"public/archives/2018/07/index.html","hash":"12a3623a9fcc1417b1d18dddef01bcad2799ecf4","modified":1558776953488},{"_id":"public/archives/2018/07/page/2/index.html","hash":"9b18933046bf1eb14bfb8e8b01e503fa832c1a57","modified":1558776953489},{"_id":"public/archives/2018/08/index.html","hash":"3ffb02664cd23eaddf9b6f443fd14c07a8f92c0f","modified":1558776953489},{"_id":"public/archives/2018/08/page/2/index.html","hash":"ae0b0f9357542a693f4a83af805fc7b5108cd868","modified":1558776953489},{"_id":"public/archives/2018/11/index.html","hash":"38719c0cab8004c32d7ea3f3d0a511354fb4a067","modified":1558776953489},{"_id":"public/archives/2018/12/index.html","hash":"5f7b3c82b69aac715ae1df8c841fc570e3522264","modified":1558776953489},{"_id":"public/categories/Python/index.html","hash":"1ab0da894b99b412ff6687a3dc6cc6303ebefab1","modified":1558776953489},{"_id":"public/categories/Python/page/2/index.html","hash":"b6b338116e79515f3155a95c3ff3a280818ca92b","modified":1558776953489},{"_id":"public/categories/Python/page/3/index.html","hash":"a557ed412c6fdf70d5eb6f7e74c8c45de1185d1b","modified":1558776953490},{"_id":"public/categories/Django/index.html","hash":"cb7c8673721a9d37c69ceade70838753a0dbd175","modified":1558776953490},{"_id":"public/categories/Docker/index.html","hash":"7fe901b34a2865ef7204519eccbd40eae7ceee29","modified":1558776953490},{"_id":"public/categories/Python/Fun/index.html","hash":"0eeb1cdfd856e2c7f6b1892e5df4f0dc92cc56c5","modified":1558776953490},{"_id":"public/categories/Web框架网站/index.html","hash":"0eecfb58de89e91095d16815b856d83a2f9ed3b7","modified":1558776953490},{"_id":"public/categories/Linux/index.html","hash":"2a497eb0c402d32b32b7d2bdd5544ae8e507680d","modified":1558776953490},{"_id":"public/categories/DataBase/index.html","hash":"b6cd93017335e55b2e5320e15af7891258d752b9","modified":1558776953491},{"_id":"public/categories/Rdis/index.html","hash":"6d1baf6b372f5c1438e15efee28a684469087c72","modified":1558776953491},{"_id":"public/categories/Python/Interview/index.html","hash":"556d298aad722daafc2d6282f5fda672c82b8654","modified":1558776953491},{"_id":"public/tags/提取电话邮箱/index.html","hash":"43f9b8f5f076d384425cf5ee8a42a8f7b2b6e717","modified":1558776953491},{"_id":"public/tags/Django/index.html","hash":"43c8d0775f65662d64242eb9e28dd013f2345b8f","modified":1558776953491},{"_id":"public/tags/DRF/index.html","hash":"2fca62913202d5f6253c0b3a397199a8c57bcc04","modified":1558776953491},{"_id":"public/tags/command/index.html","hash":"8062ccae551708d5d300a7c18dc2c7df3e95d0e5","modified":1558776953491},{"_id":"public/tags/Flask/index.html","hash":"e938045c952819ad65c73f464dcc13f05245bb78","modified":1558776953492},{"_id":"public/tags/su/index.html","hash":"99ffc462608b1fdd81a166f5c33cbda025be7bf6","modified":1558776953492},{"_id":"public/tags/MySQL-数据库引擎/index.html","hash":"e56f3ad79efba4457ed875fad164e27dcd1bc7fa","modified":1558776953492},{"_id":"public/tags/else其他用法/index.html","hash":"52081e1ba3c1286a6b9b2ae50bc7906bb9520ca7","modified":1558776953492},{"_id":"public/tags/IP掩码网关修改/index.html","hash":"64c5d98a84ef9da9907c09d80876f1a210dbfaac","modified":1558776953492},{"_id":"public/tags/浅拷贝/index.html","hash":"4271a53767afa40fd2b84dfb51ad092ce02c58ff","modified":1558776953492},{"_id":"public/tags/变量定义/index.html","hash":"6155aec84dd024f0f13dbc61ee0de9464ba2d0fb","modified":1558776953492},{"_id":"public/tags/管道/index.html","hash":"c10f535c68ee1577ea93d64ea76d0179af3ea640","modified":1558776953492},{"_id":"public/tags/Scrapy-数据分析/index.html","hash":"9e5b202fc58c6cd8fb4236e5009e175fbd74c705","modified":1558776953493},{"_id":"public/tags/兼容/index.html","hash":"b60e54fc2583602c7fc26166eefc5914b6e88442","modified":1558776953493},{"_id":"public/tags/时间戳/index.html","hash":"f489456f3dad2b4ac0025bea4c3c5433ebc78c64","modified":1558776953493},{"_id":"public/tags/无序列表/index.html","hash":"5594ae9575b55994c091836ccffbba612aea148c","modified":1558776953493},{"_id":"public/tags/Markdown/index.html","hash":"919ec0157f76a317b438f37b33153ce31ba36b96","modified":1558776953493},{"_id":"public/tags/持久化/index.html","hash":"71ff7f6c784c6b4dfaadc453fd4f3ca55894cfa4","modified":1558776953493},{"_id":"public/tags/自动生成Model模型类/index.html","hash":"fc22315f626029e78db6061e6d83eecdca7b7419","modified":1558776953493},{"_id":"public/tags/IP/index.html","hash":"b736ba8503d309bcc1ea62b1f3f09a7c5cc5e391","modified":1558776953494},{"_id":"public/tags/WSGI/index.html","hash":"49e87dec27b1639d034970814d570f7b5e41f923","modified":1558776953494},{"_id":"public/tags/open/index.html","hash":"1d38b509110199e01f7e5b33c8714add1e09ba07","modified":1558776953494},{"_id":"public/tags/logging-日志/index.html","hash":"b9d34e6cc568c57a9be2ef50fc6cc73b2d0c4286","modified":1558776953494},{"_id":"public/tags/Python/index.html","hash":"41cd76e8f97025dc7d349242307913f2dfdbc949","modified":1558776953494},{"_id":"public/tags/Interview/index.html","hash":"174ad926c8345668ac58d2ab936978ee585f899f","modified":1558776953494},{"_id":"public/tags/Redis/index.html","hash":"36d2fa67b739d28e88184c61a19543cc0f3a340c","modified":1558776953494},{"_id":"public/tags/正则/index.html","hash":"7fcf693cd94d389ae433b6a169784a0737a435b7","modified":1558776953494},{"_id":"public/tags/密码强度校验/index.html","hash":"28ded4037ed92c398cf348d4b122811d07eaf03c","modified":1558776953494},{"_id":"public/tags/GrowthHacker/index.html","hash":"11bfb9566dd35d5399b693d686cde16e8fab4872","modified":1558776953495},{"_id":"public/tags/正则表达式/index.html","hash":"c6c4e9f29ca4840a35f6af08925ac7f29760e850","modified":1558776953495},{"_id":"public/tags/爬虫/index.html","hash":"e350b8359208e97a07e0e7252df14a3dee06f796","modified":1558776953495},{"_id":"public/tags/数据库/index.html","hash":"222917ac24db67b2be26f278abd71df2537f3058","modified":1558776953495},{"_id":"public/tags/expression/index.html","hash":"da28e45c4d713bc5d518a289348fcb79ba1157ff","modified":1558776953495},{"_id":"public/tags/随机/index.html","hash":"6544d8eb215c5148ed7e7b1a0d9327c808bf435a","modified":1558776953495},{"_id":"public/tags/猜数字/index.html","hash":"f6daf46a6d8a0a7b4737211d2fc1fc582e13444c","modified":1558776953495},{"_id":"public/tags/考拉咨猜想/index.html","hash":"47fa199d33fe65df926fe412714a4c1736e1ae47","modified":1558776953495},{"_id":"public/2019/05/14/python-backend-pen-questions-0513/index.html","hash":"6f5a2192df3abcb3606269aa4d492e4ae7d5ca8b","modified":1558776953501},{"_id":"public/2019/05/12/Python-exception-handler-finally/index.html","hash":"c0c2f74010168c2ad52db09dd76b45880b8265b4","modified":1558776953501},{"_id":"public/2018/12/13/使用boto3批量上传图片到S3/index.html","hash":"f80b005cba96fd458c63cb47f28ace217103f331","modified":1558776953501},{"_id":"public/2018/12/05/Elasticsearch待续/index.html","hash":"c489c4d67ad7d0c6f667a31a5f1987a92a863cce","modified":1558776953501},{"_id":"public/2018/12/05/Golang待续/index.html","hash":"3969bba3253495a10bfa8aab07c975cede9d5b28","modified":1558776953501},{"_id":"public/2018/12/05/存在引用关系的表或视图快速添加字段/index.html","hash":"20b9de8cea457781e46b7150bc403b7c4f780965","modified":1558776953501},{"_id":"public/2018/11/27/namedtuple的妙用/index.html","hash":"b0ce12a863c2049e1ab6a5b3abcec66b5b93d390","modified":1558776953502},{"_id":"public/page/5/index.html","hash":"5bdf897b0c55f934a63ce10c03831dc810e04caf","modified":1558776953502},{"_id":"public/archives/page/5/index.html","hash":"3d8b2fb97297014506acd82490ca28ab18b5bdbb","modified":1558776953502},{"_id":"public/archives/2019/index.html","hash":"f5126d83753a5e1570ca61d133b89d0b1abc9a1e","modified":1558776953503},{"_id":"public/archives/2019/05/index.html","hash":"53c0ae742e3270a952f7cda03835ca8fba6472d5","modified":1558776953503},{"_id":"public/categories/Elasticsearch/index.html","hash":"d34237328aa51235ed49a4048c07d8e2e3fc0bb0","modified":1558776953503},{"_id":"public/categories/golang/index.html","hash":"deeb92e6e41e6ad7586c4f8dfe2fd3a393fc609d","modified":1558776953503},{"_id":"public/categories/postgresql/index.html","hash":"4517f48ae761db5cfe7a72965e92e82b72574f85","modified":1558776953503},{"_id":"public/tags/待续/index.html","hash":"be6a84fe69759047b771abb25145a76bbf37afa7","modified":1558776953504},{"_id":"public/tags/finally/index.html","hash":"708857b2f004626c83410ab4c7592a5d5990f880","modified":1558776953504},{"_id":"public/tags/namedtuple/index.html","hash":"0bca7b4e20aadd82b4a45a03c89bb34fa5f2ae72","modified":1558776953504},{"_id":"public/tags/pen-questions/index.html","hash":"db56e71a0450601fcb685ccacb09392a99d3f5cd","modified":1558776953504},{"_id":"public/tags/上传图片-s3/index.html","hash":"a678036f418d18d0a495d59d8e929f16a456bece","modified":1558776953504},{"_id":"public/tags/新增字段/index.html","hash":"75e364e00d264511cf5925a3321cba266f8ecbac","modified":1558776953505},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1558776953508},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1558776953508},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1558776953508},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1558776953508},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1558776953508},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1558776953508},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1558776953509},{"_id":"public/img/RidingRoad.png","hash":"367ab15f0d40b0ceb3cdc9fad6338326c7d6c3de","modified":1558776953509},{"_id":"public/img/favicon.ico","hash":"d0e15bd8ef327a67e1bbd6c834070f55c2c4e4ce","modified":1558776953509},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1558776953509},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1558776953509},{"_id":"public/img/wechat.png","hash":"30a1e21c0dac55ab2310434ccfdaeb97b9f97467","modified":1558776953512},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1558776953514},{"_id":"public/main.0cf68a.css","hash":"466a97a3d0e2679de9fa292b0bacb93ff96431a4","modified":1558776953514},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1558776953514},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1558776953514},{"_id":"public/img/alipy.png","hash":"a5d377b2fda2f1bff17b408f3866da9f888aa252","modified":1558776953517}],"Category":[{"name":"Python","_id":"cjw3bjtc10002e5vxsoe43o5h"},{"name":"Django","_id":"cjw3bjtca000ce5vxgjdx8eah"},{"name":"Docker","_id":"cjw3bjtci000je5vx6hwl6d4w"},{"name":"Fun","parent":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtcn000pe5vxua4js7kn"},{"name":"Elasticsearch","_id":"cjw3bjtcq000we5vxjuasiekd"},{"name":"Web框架网站","_id":"cjw3bjtd1001be5vx0x979oru"},{"name":"golang","_id":"cjw3bjtdd001ie5vxrlo109aw"},{"name":"Linux","_id":"cjw3bjtdg001pe5vx3ij1aybe"},{"name":"DataBase","_id":"cjw3bjtdk001we5vxp67lh0w3"},{"name":"Rdis","_id":"cjw3bjtdt002ce5vxh4ur47if"},{"name":"Interview","parent":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjte0002pe5vxg6yr6xuk"},{"name":"postgresql","_id":"cjw3bjte6002ze5vxu0gyrrdx"}],"Data":[],"Page":[],"Post":[{"title":"Ctrl+C,Ctrl+V组合拳提取电话和邮箱","comments":1,"toc":true,"date":"2018-07-24T00:39:33.000Z","_content":"# Ctrl+C,Ctrl+V组合拳提取电话和邮箱\n<!--more-->\n> 目前假设有这么一个需求: 你的一份文件里面有许多电话、邮箱以及其他文本内容,领导要求你从文本中把电话和邮箱提取处理整理到一个文档中,你想可不可以我只需要Ctrl + C ,Ctrl + V 就可以了呢.那么本条推文就可以帮你实现.\n\n### 提取思路\n1. 打开文件,Ctrl + C\n2. 从剪贴板获取你内容\n3. 正则匹配,保存到一个列表里\n4. 把结果返回剪贴板\n5. 你Ctrl + V 到一个新文档,美滋滋的完成,Bingo\n### 匹配电话\n```python\n # 提取固话即分机号码的正则\n    phoneRegex = re.compile(r'''(\n        (\\d{3}|\\(\\d{3}\\))?          # 匹配区号,'?'表示区号可有可无\n        (\\s|-|\\.)?                  # 分隔符 ,号码数字之间的分隔符 比如 020-333-3333,'?'表示分隔符可有可无\n        (\\d{3})                     # 号码中前面三个数字\n        (\\s|-|\\.)                   # 分隔符\n        (\\d{4})                     # 最后的4个数字\n        (\\s*(ext|x|ext.)\\s*(\\d{2,5}))? # 获取分机号码\n        )''', re.VERBOSE)  # re.VERBOSE 表示可以在正则表达式中写注释,正则中注释也是以'#'开头\n```\n\n### 匹配邮箱\n\n```\n    # 提取邮箱的正则\n    emailRegex = re.compile(r'''(\n        [a-zA-Z0-9.%+-]+        # 邮箱的用户名\n        @                       # @标志\n        [a-zA-Z0-9.-]+          # 域名\n        (\\.[a-zA-Z]{2,4})       # 顶级域名\n        )''', re.VERBOSE)\n```\n\n### 获取剪贴板信息\n\n```python\ntext = str(pyperclip.paste())  # 获取剪贴板的信息存到变量text中\n```\n\n### 处理过程\n```\nmatches = []  # 匹配成功的邮箱和电话存放到matches列表中\n\n    for groups in phoneRegex.findall(text):  # 遍历匹配到的电话列表\n        phoneNum = '-'.join([groups[1], groups[3], groups[5]])  # 统一格式 020-333-3333\n        if groups[8] != '':  # 如果有分机,则把分机号码也提取出来\n            phoneNum += 'x' + groups[8]\n        matches.append(phoneNum)\n\n    for groups in emailRegex.findall(text):  # 遍历匹配到的邮箱\n        matches.append(groups[0])\n\n    if len(matches) > 0:  # 判断文本中是否存在电话邮箱地址\n        pyperclip.copy(\"\\n\".join(matches))  # 把匹配结果存放到剪贴板中\n        # print('Copied to clipboard:')\n        # print('\\n'.join(matches))\n    else:\n        print(\"文本中不存在邮箱或电话\")\n```\n### 到这里,可以Ctrl + V了\n到了这里，CV组合实现提取电话和邮箱了。需要完整的代码关注我的公众号Python孙行者,聊天界面回复\"CV\",即可获取.\n","source":"_posts/Ctrl-C-Ctrl-V组合拳提取电话和邮箱.md","raw":"---\ntitle: 'Ctrl+C,Ctrl+V组合拳提取电话和邮箱'\ncomments: true\ntoc: true\ndate: 2018-07-24 08:39:33\ncategories:\n- Python\n- Fun\ntags:\n- 提取电话邮箱\n---\n# Ctrl+C,Ctrl+V组合拳提取电话和邮箱\n<!--more-->\n> 目前假设有这么一个需求: 你的一份文件里面有许多电话、邮箱以及其他文本内容,领导要求你从文本中把电话和邮箱提取处理整理到一个文档中,你想可不可以我只需要Ctrl + C ,Ctrl + V 就可以了呢.那么本条推文就可以帮你实现.\n\n### 提取思路\n1. 打开文件,Ctrl + C\n2. 从剪贴板获取你内容\n3. 正则匹配,保存到一个列表里\n4. 把结果返回剪贴板\n5. 你Ctrl + V 到一个新文档,美滋滋的完成,Bingo\n### 匹配电话\n```python\n # 提取固话即分机号码的正则\n    phoneRegex = re.compile(r'''(\n        (\\d{3}|\\(\\d{3}\\))?          # 匹配区号,'?'表示区号可有可无\n        (\\s|-|\\.)?                  # 分隔符 ,号码数字之间的分隔符 比如 020-333-3333,'?'表示分隔符可有可无\n        (\\d{3})                     # 号码中前面三个数字\n        (\\s|-|\\.)                   # 分隔符\n        (\\d{4})                     # 最后的4个数字\n        (\\s*(ext|x|ext.)\\s*(\\d{2,5}))? # 获取分机号码\n        )''', re.VERBOSE)  # re.VERBOSE 表示可以在正则表达式中写注释,正则中注释也是以'#'开头\n```\n\n### 匹配邮箱\n\n```\n    # 提取邮箱的正则\n    emailRegex = re.compile(r'''(\n        [a-zA-Z0-9.%+-]+        # 邮箱的用户名\n        @                       # @标志\n        [a-zA-Z0-9.-]+          # 域名\n        (\\.[a-zA-Z]{2,4})       # 顶级域名\n        )''', re.VERBOSE)\n```\n\n### 获取剪贴板信息\n\n```python\ntext = str(pyperclip.paste())  # 获取剪贴板的信息存到变量text中\n```\n\n### 处理过程\n```\nmatches = []  # 匹配成功的邮箱和电话存放到matches列表中\n\n    for groups in phoneRegex.findall(text):  # 遍历匹配到的电话列表\n        phoneNum = '-'.join([groups[1], groups[3], groups[5]])  # 统一格式 020-333-3333\n        if groups[8] != '':  # 如果有分机,则把分机号码也提取出来\n            phoneNum += 'x' + groups[8]\n        matches.append(phoneNum)\n\n    for groups in emailRegex.findall(text):  # 遍历匹配到的邮箱\n        matches.append(groups[0])\n\n    if len(matches) > 0:  # 判断文本中是否存在电话邮箱地址\n        pyperclip.copy(\"\\n\".join(matches))  # 把匹配结果存放到剪贴板中\n        # print('Copied to clipboard:')\n        # print('\\n'.join(matches))\n    else:\n        print(\"文本中不存在邮箱或电话\")\n```\n### 到这里,可以Ctrl + V了\n到了这里，CV组合实现提取电话和邮箱了。需要完整的代码关注我的公众号Python孙行者,聊天界面回复\"CV\",即可获取.\n","slug":"Ctrl-C-Ctrl-V组合拳提取电话和邮箱","published":1,"updated":"2019-05-25T09:32:43.095Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtbv0000e5vx85ud0hc9","content":"<h1 id=\"Ctrl-C-Ctrl-V组合拳提取电话和邮箱\"><a href=\"#Ctrl-C-Ctrl-V组合拳提取电话和邮箱\" class=\"headerlink\" title=\"Ctrl+C,Ctrl+V组合拳提取电话和邮箱\"></a>Ctrl+C,Ctrl+V组合拳提取电话和邮箱</h1><a id=\"more\"></a>\n<blockquote>\n<p>目前假设有这么一个需求: 你的一份文件里面有许多电话、邮箱以及其他文本内容,领导要求你从文本中把电话和邮箱提取处理整理到一个文档中,你想可不可以我只需要Ctrl + C ,Ctrl + V 就可以了呢.那么本条推文就可以帮你实现.</p>\n</blockquote>\n<h3 id=\"提取思路\"><a href=\"#提取思路\" class=\"headerlink\" title=\"提取思路\"></a>提取思路</h3><ol>\n<li>打开文件,Ctrl + C</li>\n<li>从剪贴板获取你内容</li>\n<li>正则匹配,保存到一个列表里</li>\n<li>把结果返回剪贴板</li>\n<li>你Ctrl + V 到一个新文档,美滋滋的完成,Bingo<h3 id=\"匹配电话\"><a href=\"#匹配电话\" class=\"headerlink\" title=\"匹配电话\"></a>匹配电话</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提取固话即分机号码的正则</span></span><br><span class=\"line\">   phoneRegex = re.compile(<span class=\"string\">r'''(</span></span><br><span class=\"line\"><span class=\"string\">       (\\d&#123;3&#125;|\\(\\d&#123;3&#125;\\))?          # 匹配区号,'?'表示区号可有可无</span></span><br><span class=\"line\"><span class=\"string\">       (\\s|-|\\.)?                  # 分隔符 ,号码数字之间的分隔符 比如 020-333-3333,'?'表示分隔符可有可无</span></span><br><span class=\"line\"><span class=\"string\">       (\\d&#123;3&#125;)                     # 号码中前面三个数字</span></span><br><span class=\"line\"><span class=\"string\">       (\\s|-|\\.)                   # 分隔符</span></span><br><span class=\"line\"><span class=\"string\">       (\\d&#123;4&#125;)                     # 最后的4个数字</span></span><br><span class=\"line\"><span class=\"string\">       (\\s*(ext|x|ext.)\\s*(\\d&#123;2,5&#125;))? # 获取分机号码</span></span><br><span class=\"line\"><span class=\"string\">       )'''</span>, re.VERBOSE)  <span class=\"comment\"># re.VERBOSE 表示可以在正则表达式中写注释,正则中注释也是以'#'开头</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"匹配邮箱\"><a href=\"#匹配邮箱\" class=\"headerlink\" title=\"匹配邮箱\"></a>匹配邮箱</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 提取邮箱的正则</span><br><span class=\"line\">emailRegex = re.compile(r&apos;&apos;&apos;(</span><br><span class=\"line\">    [a-zA-Z0-9.%+-]+        # 邮箱的用户名</span><br><span class=\"line\">    @                       # @标志</span><br><span class=\"line\">    [a-zA-Z0-9.-]+          # 域名</span><br><span class=\"line\">    (\\.[a-zA-Z]&#123;2,4&#125;)       # 顶级域名</span><br><span class=\"line\">    )&apos;&apos;&apos;, re.VERBOSE)</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取剪贴板信息\"><a href=\"#获取剪贴板信息\" class=\"headerlink\" title=\"获取剪贴板信息\"></a>获取剪贴板信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text = str(pyperclip.paste())  <span class=\"comment\"># 获取剪贴板的信息存到变量text中</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"处理过程\"><a href=\"#处理过程\" class=\"headerlink\" title=\"处理过程\"></a>处理过程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matches = []  # 匹配成功的邮箱和电话存放到matches列表中</span><br><span class=\"line\"></span><br><span class=\"line\">    for groups in phoneRegex.findall(text):  # 遍历匹配到的电话列表</span><br><span class=\"line\">        phoneNum = &apos;-&apos;.join([groups[1], groups[3], groups[5]])  # 统一格式 020-333-3333</span><br><span class=\"line\">        if groups[8] != &apos;&apos;:  # 如果有分机,则把分机号码也提取出来</span><br><span class=\"line\">            phoneNum += &apos;x&apos; + groups[8]</span><br><span class=\"line\">        matches.append(phoneNum)</span><br><span class=\"line\"></span><br><span class=\"line\">    for groups in emailRegex.findall(text):  # 遍历匹配到的邮箱</span><br><span class=\"line\">        matches.append(groups[0])</span><br><span class=\"line\"></span><br><span class=\"line\">    if len(matches) &gt; 0:  # 判断文本中是否存在电话邮箱地址</span><br><span class=\"line\">        pyperclip.copy(&quot;\\n&quot;.join(matches))  # 把匹配结果存放到剪贴板中</span><br><span class=\"line\">        # print(&apos;Copied to clipboard:&apos;)</span><br><span class=\"line\">        # print(&apos;\\n&apos;.join(matches))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;文本中不存在邮箱或电话&quot;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"到这里-可以Ctrl-V了\"><a href=\"#到这里-可以Ctrl-V了\" class=\"headerlink\" title=\"到这里,可以Ctrl + V了\"></a>到这里,可以Ctrl + V了</h3><p>到了这里，CV组合实现提取电话和邮箱了。需要完整的代码关注我的公众号Python孙行者,聊天界面回复”CV”,即可获取.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Ctrl-C-Ctrl-V组合拳提取电话和邮箱\"><a href=\"#Ctrl-C-Ctrl-V组合拳提取电话和邮箱\" class=\"headerlink\" title=\"Ctrl+C,Ctrl+V组合拳提取电话和邮箱\"></a>Ctrl+C,Ctrl+V组合拳提取电话和邮箱</h1>","more":"<blockquote>\n<p>目前假设有这么一个需求: 你的一份文件里面有许多电话、邮箱以及其他文本内容,领导要求你从文本中把电话和邮箱提取处理整理到一个文档中,你想可不可以我只需要Ctrl + C ,Ctrl + V 就可以了呢.那么本条推文就可以帮你实现.</p>\n</blockquote>\n<h3 id=\"提取思路\"><a href=\"#提取思路\" class=\"headerlink\" title=\"提取思路\"></a>提取思路</h3><ol>\n<li>打开文件,Ctrl + C</li>\n<li>从剪贴板获取你内容</li>\n<li>正则匹配,保存到一个列表里</li>\n<li>把结果返回剪贴板</li>\n<li>你Ctrl + V 到一个新文档,美滋滋的完成,Bingo<h3 id=\"匹配电话\"><a href=\"#匹配电话\" class=\"headerlink\" title=\"匹配电话\"></a>匹配电话</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提取固话即分机号码的正则</span></span><br><span class=\"line\">   phoneRegex = re.compile(<span class=\"string\">r'''(</span></span><br><span class=\"line\"><span class=\"string\">       (\\d&#123;3&#125;|\\(\\d&#123;3&#125;\\))?          # 匹配区号,'?'表示区号可有可无</span></span><br><span class=\"line\"><span class=\"string\">       (\\s|-|\\.)?                  # 分隔符 ,号码数字之间的分隔符 比如 020-333-3333,'?'表示分隔符可有可无</span></span><br><span class=\"line\"><span class=\"string\">       (\\d&#123;3&#125;)                     # 号码中前面三个数字</span></span><br><span class=\"line\"><span class=\"string\">       (\\s|-|\\.)                   # 分隔符</span></span><br><span class=\"line\"><span class=\"string\">       (\\d&#123;4&#125;)                     # 最后的4个数字</span></span><br><span class=\"line\"><span class=\"string\">       (\\s*(ext|x|ext.)\\s*(\\d&#123;2,5&#125;))? # 获取分机号码</span></span><br><span class=\"line\"><span class=\"string\">       )'''</span>, re.VERBOSE)  <span class=\"comment\"># re.VERBOSE 表示可以在正则表达式中写注释,正则中注释也是以'#'开头</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"匹配邮箱\"><a href=\"#匹配邮箱\" class=\"headerlink\" title=\"匹配邮箱\"></a>匹配邮箱</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 提取邮箱的正则</span><br><span class=\"line\">emailRegex = re.compile(r&apos;&apos;&apos;(</span><br><span class=\"line\">    [a-zA-Z0-9.%+-]+        # 邮箱的用户名</span><br><span class=\"line\">    @                       # @标志</span><br><span class=\"line\">    [a-zA-Z0-9.-]+          # 域名</span><br><span class=\"line\">    (\\.[a-zA-Z]&#123;2,4&#125;)       # 顶级域名</span><br><span class=\"line\">    )&apos;&apos;&apos;, re.VERBOSE)</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取剪贴板信息\"><a href=\"#获取剪贴板信息\" class=\"headerlink\" title=\"获取剪贴板信息\"></a>获取剪贴板信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text = str(pyperclip.paste())  <span class=\"comment\"># 获取剪贴板的信息存到变量text中</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"处理过程\"><a href=\"#处理过程\" class=\"headerlink\" title=\"处理过程\"></a>处理过程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matches = []  # 匹配成功的邮箱和电话存放到matches列表中</span><br><span class=\"line\"></span><br><span class=\"line\">    for groups in phoneRegex.findall(text):  # 遍历匹配到的电话列表</span><br><span class=\"line\">        phoneNum = &apos;-&apos;.join([groups[1], groups[3], groups[5]])  # 统一格式 020-333-3333</span><br><span class=\"line\">        if groups[8] != &apos;&apos;:  # 如果有分机,则把分机号码也提取出来</span><br><span class=\"line\">            phoneNum += &apos;x&apos; + groups[8]</span><br><span class=\"line\">        matches.append(phoneNum)</span><br><span class=\"line\"></span><br><span class=\"line\">    for groups in emailRegex.findall(text):  # 遍历匹配到的邮箱</span><br><span class=\"line\">        matches.append(groups[0])</span><br><span class=\"line\"></span><br><span class=\"line\">    if len(matches) &gt; 0:  # 判断文本中是否存在电话邮箱地址</span><br><span class=\"line\">        pyperclip.copy(&quot;\\n&quot;.join(matches))  # 把匹配结果存放到剪贴板中</span><br><span class=\"line\">        # print(&apos;Copied to clipboard:&apos;)</span><br><span class=\"line\">        # print(&apos;\\n&apos;.join(matches))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;文本中不存在邮箱或电话&quot;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"到这里-可以Ctrl-V了\"><a href=\"#到这里-可以Ctrl-V了\" class=\"headerlink\" title=\"到这里,可以Ctrl + V了\"></a>到这里,可以Ctrl + V了</h3><p>到了这里，CV组合实现提取电话和邮箱了。需要完整的代码关注我的公众号Python孙行者,聊天界面回复”CV”,即可获取.</p>"},{"title":"Django中序列化器read_only和write_only","comments":1,"toc":true,"date":"2018-08-09T13:50:42.000Z","_content":"\n在Django RESTFramework 的序列化器中，有一些需要注意的通用参数。<!--more-->\n首先，我们需要知道的一点就是，序列化器不仅仅使用于模型类，这很重要。\n序列化器的主要作用是进行数据的**校验**（还有进行对数据对象进行转换），并不是仅能对models进行校验，了解到这一点，后面的注意点就容易理解了。\n### read_only 仅序列化输出\n这个参数的作用是告诉序列化器：\n1. 这个字段只需要进行校验格式或数据类型是否正确，无需入库\n2. 这个字段需要序列化返回给请求\n其实read_only字段的作用主要在项目中是为了添加模型类中没有的字段信息，比如用户注册后返回用户信息给前端的同时签发Json Web Token，通过作为user的一个token属性进行返回给前端\n```\nfrom rest_framework_jwt.settings import api_settings\n\nclass CreateUserSerializer(serializers.ModelSerializer):\n    \"\"\"\n    创建用户序列化器\n    \"\"\"\n    ...\n    token = serializers.CharField(label='登录状态token', read_only=True)  # 增加token字段\n\n    class Meta：\n        ...\n        fields = ('id', 'username', 'password', 'password2', 'sms_code', 'mobile', 'allow', 'token')  # 增加token\n        ...\n\n    def create(self, validated_data):\n        \"\"\"\n        创建用户\n        \"\"\"\n        # 移除数据库模型类中不存在的属性\n        del validated_data['password2']\n        del validated_data['sms_code']\n        del validated_data['allow']\n        user = super().create(validated_data)\n\n        # 调用django的认证系统加密密码\n        user.set_password(validated_data['password'])\n        user.save()\n\n        # 补充生成记录登录状态的token\n        jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER\n        jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER\n        payload = jwt_payload_handler(user)\n        token = jwt_encode_handler(payload)\n        user.token = token\n\n        return user\n\n```\n### write_only  仅反序列化输入\nwrite_only 和read_only 刚好相反，write_only表示校验输入数据并且入库，但不能进行序列化输出，比如为了安全，密码我们一般会设置为write_only，不会把密码也返回出去到前端。\n","source":"_posts/Django中序列化器read-only和write-only.md","raw":"---\ntitle: Django中序列化器read_only和write_only\ncomments: true\ntoc: true\ncategories:\n- Python\ndate: 2018-08-09 21:50:42\ntags:\n- Django\n---\n\n在Django RESTFramework 的序列化器中，有一些需要注意的通用参数。<!--more-->\n首先，我们需要知道的一点就是，序列化器不仅仅使用于模型类，这很重要。\n序列化器的主要作用是进行数据的**校验**（还有进行对数据对象进行转换），并不是仅能对models进行校验，了解到这一点，后面的注意点就容易理解了。\n### read_only 仅序列化输出\n这个参数的作用是告诉序列化器：\n1. 这个字段只需要进行校验格式或数据类型是否正确，无需入库\n2. 这个字段需要序列化返回给请求\n其实read_only字段的作用主要在项目中是为了添加模型类中没有的字段信息，比如用户注册后返回用户信息给前端的同时签发Json Web Token，通过作为user的一个token属性进行返回给前端\n```\nfrom rest_framework_jwt.settings import api_settings\n\nclass CreateUserSerializer(serializers.ModelSerializer):\n    \"\"\"\n    创建用户序列化器\n    \"\"\"\n    ...\n    token = serializers.CharField(label='登录状态token', read_only=True)  # 增加token字段\n\n    class Meta：\n        ...\n        fields = ('id', 'username', 'password', 'password2', 'sms_code', 'mobile', 'allow', 'token')  # 增加token\n        ...\n\n    def create(self, validated_data):\n        \"\"\"\n        创建用户\n        \"\"\"\n        # 移除数据库模型类中不存在的属性\n        del validated_data['password2']\n        del validated_data['sms_code']\n        del validated_data['allow']\n        user = super().create(validated_data)\n\n        # 调用django的认证系统加密密码\n        user.set_password(validated_data['password'])\n        user.save()\n\n        # 补充生成记录登录状态的token\n        jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER\n        jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER\n        payload = jwt_payload_handler(user)\n        token = jwt_encode_handler(payload)\n        user.token = token\n\n        return user\n\n```\n### write_only  仅反序列化输入\nwrite_only 和read_only 刚好相反，write_only表示校验输入数据并且入库，但不能进行序列化输出，比如为了安全，密码我们一般会设置为write_only，不会把密码也返回出去到前端。\n","slug":"Django中序列化器read-only和write-only","published":1,"updated":"2019-05-25T09:32:43.096Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtbz0001e5vxje18l2af","content":"<p>在Django RESTFramework 的序列化器中，有一些需要注意的通用参数。<a id=\"more\"></a><br>首先，我们需要知道的一点就是，序列化器不仅仅使用于模型类，这很重要。<br>序列化器的主要作用是进行数据的<strong>校验</strong>（还有进行对数据对象进行转换），并不是仅能对models进行校验，了解到这一点，后面的注意点就容易理解了。</p>\n<h3 id=\"read-only-仅序列化输出\"><a href=\"#read-only-仅序列化输出\" class=\"headerlink\" title=\"read_only 仅序列化输出\"></a>read_only 仅序列化输出</h3><p>这个参数的作用是告诉序列化器：</p>\n<ol>\n<li>这个字段只需要进行校验格式或数据类型是否正确，无需入库</li>\n<li>这个字段需要序列化返回给请求<br>其实read_only字段的作用主要在项目中是为了添加模型类中没有的字段信息，比如用户注册后返回用户信息给前端的同时签发Json Web Token，通过作为user的一个token属性进行返回给前端<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from rest_framework_jwt.settings import api_settings</span><br><span class=\"line\"></span><br><span class=\"line\">class CreateUserSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    创建用户序列化器</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    token = serializers.CharField(label=&apos;登录状态token&apos;, read_only=True)  # 增加token字段</span><br><span class=\"line\"></span><br><span class=\"line\">    class Meta：</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        fields = (&apos;id&apos;, &apos;username&apos;, &apos;password&apos;, &apos;password2&apos;, &apos;sms_code&apos;, &apos;mobile&apos;, &apos;allow&apos;, &apos;token&apos;)  # 增加token</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    def create(self, validated_data):</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        创建用户</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        # 移除数据库模型类中不存在的属性</span><br><span class=\"line\">        del validated_data[&apos;password2&apos;]</span><br><span class=\"line\">        del validated_data[&apos;sms_code&apos;]</span><br><span class=\"line\">        del validated_data[&apos;allow&apos;]</span><br><span class=\"line\">        user = super().create(validated_data)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 调用django的认证系统加密密码</span><br><span class=\"line\">        user.set_password(validated_data[&apos;password&apos;])</span><br><span class=\"line\">        user.save()</span><br><span class=\"line\"></span><br><span class=\"line\">        # 补充生成记录登录状态的token</span><br><span class=\"line\">        jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class=\"line\">        jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class=\"line\">        payload = jwt_payload_handler(user)</span><br><span class=\"line\">        token = jwt_encode_handler(payload)</span><br><span class=\"line\">        user.token = token</span><br><span class=\"line\"></span><br><span class=\"line\">        return user</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"write-only-仅反序列化输入\"><a href=\"#write-only-仅反序列化输入\" class=\"headerlink\" title=\"write_only  仅反序列化输入\"></a>write_only  仅反序列化输入</h3><p>write_only 和read_only 刚好相反，write_only表示校验输入数据并且入库，但不能进行序列化输出，比如为了安全，密码我们一般会设置为write_only，不会把密码也返回出去到前端。</p>\n","site":{"data":{}},"excerpt":"<p>在Django RESTFramework 的序列化器中，有一些需要注意的通用参数。","more":"<br>首先，我们需要知道的一点就是，序列化器不仅仅使用于模型类，这很重要。<br>序列化器的主要作用是进行数据的<strong>校验</strong>（还有进行对数据对象进行转换），并不是仅能对models进行校验，了解到这一点，后面的注意点就容易理解了。</p>\n<h3 id=\"read-only-仅序列化输出\"><a href=\"#read-only-仅序列化输出\" class=\"headerlink\" title=\"read_only 仅序列化输出\"></a>read_only 仅序列化输出</h3><p>这个参数的作用是告诉序列化器：</p>\n<ol>\n<li>这个字段只需要进行校验格式或数据类型是否正确，无需入库</li>\n<li>这个字段需要序列化返回给请求<br>其实read_only字段的作用主要在项目中是为了添加模型类中没有的字段信息，比如用户注册后返回用户信息给前端的同时签发Json Web Token，通过作为user的一个token属性进行返回给前端<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from rest_framework_jwt.settings import api_settings</span><br><span class=\"line\"></span><br><span class=\"line\">class CreateUserSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    创建用户序列化器</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    token = serializers.CharField(label=&apos;登录状态token&apos;, read_only=True)  # 增加token字段</span><br><span class=\"line\"></span><br><span class=\"line\">    class Meta：</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        fields = (&apos;id&apos;, &apos;username&apos;, &apos;password&apos;, &apos;password2&apos;, &apos;sms_code&apos;, &apos;mobile&apos;, &apos;allow&apos;, &apos;token&apos;)  # 增加token</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    def create(self, validated_data):</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        创建用户</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        # 移除数据库模型类中不存在的属性</span><br><span class=\"line\">        del validated_data[&apos;password2&apos;]</span><br><span class=\"line\">        del validated_data[&apos;sms_code&apos;]</span><br><span class=\"line\">        del validated_data[&apos;allow&apos;]</span><br><span class=\"line\">        user = super().create(validated_data)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 调用django的认证系统加密密码</span><br><span class=\"line\">        user.set_password(validated_data[&apos;password&apos;])</span><br><span class=\"line\">        user.save()</span><br><span class=\"line\"></span><br><span class=\"line\">        # 补充生成记录登录状态的token</span><br><span class=\"line\">        jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class=\"line\">        jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class=\"line\">        payload = jwt_payload_handler(user)</span><br><span class=\"line\">        token = jwt_encode_handler(payload)</span><br><span class=\"line\">        user.token = token</span><br><span class=\"line\"></span><br><span class=\"line\">        return user</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"write-only-仅反序列化输入\"><a href=\"#write-only-仅反序列化输入\" class=\"headerlink\" title=\"write_only  仅反序列化输入\"></a>write_only  仅反序列化输入</h3><p>write_only 和read_only 刚好相反，write_only表示校验输入数据并且入库，但不能进行序列化输出，比如为了安全，密码我们一般会设置为write_only，不会把密码也返回出去到前端。</p>"},{"title":"DjangoRESTframework","comments":1,"date":"2018-07-24T13:49:20.000Z","toc":true,"_content":"\n\nDjango REST Framework是基于Django进行的二次封装，提供快速序列化以及丰富的视图，实现快速的符合RESTful 风格的API开发。\n<!---more-->\n\n### RESTful设计方法\n\n* 域名\n\n* 版本\n\n* 路径\n\n(1) 资源作为网址，只能有名词，不能有动词，而且所用的名词往往与数据库的表名对应。\n\n(2) API中的名词应该使用复数。无论子资源或者所有资源。\n\n* HTTP动词\n\n\n常用的HTTP动词有下面四个（括号里是对应的SQL命令）。\n\nGET（SELECT）：从服务器取出资源（一项或多项）。\nPOST（CREATE）：在服务器新建一个资源。\nPUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\nDELETE（DELETE）：从服务器删除资源。\n还有三个不常用的HTTP动词。\n\nPATCH（UPDATE）：在服务器更新(更新)资源（客户端提供改变的属性）。\nHEAD：获取资源的元数据。\nOPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。\n* 过滤信息\n\n如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果\n\n\n?limit=10：指定返回记录的数量\n?offset=10：指定返回记录的开始位置。\n?page=2&per_page=100：指定第几页，以及每页的记录数。\n?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。\n?animal_type_id=1：指定筛选条件\n* 状态码\n\n服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。\n\n200 OK - [GET]：服务器成功返回用户请求的数据\n201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。\n202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）\n204 NO CONTENT - [DELETE]：用户删除数据成功。\n400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作\n401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。\n403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。\n404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\n406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。\n410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。\n422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。\n500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。\n* 错误处理\n\n如果状态码是4xx，服务器就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。\n\n```\n{\n    error: \"Invalid API key\"\n}\n```\n* 返回结果\n\n针对不同操作，服务器向用户返回的结果应该符合以下规范。\n\nGET /collection：返回资源对象的列表（数组）\nGET /collection/resource：返回单个资源对象\nPOST /collection：返回新生成的资源对象\nPUT /collection/resource：返回完整的资源对象\nPATCH /collection/resource：返回完整的资源对象\nDELETE /collection/resource：返回一个空文档\n* 超媒体\n\n* 数据格式\n\n一般返回json格式数据\n\n#### RESTful开发核心任务\n\n将请求的数据（如JSON格式）转换为模型类对象  \n操作数据库\n将模型类对象转换为响应的数据（如JSON格式）\n\n简而言之，我们可以将序列化理解为：\n\n将程序中的一个数据结构类型转换为其他格式（字典、JSON、XML等），例如将Django中的模型类对象装换为JSON字符串，这个转换过程我们称为序列化。\n\n反之，将其他格式（字典、JSON、XML等）转换为程序中的数据，例如将JSON字符串转换为Django中的模型类对象，这个过程我们称为反序列化。\n\n### 工程搭建\n\n\n1.安装DRF\n\n```\npip install djangorestframework\n```\n2. 注册rest_framework应用\n\n我们利用在Django框架学习中创建的demo工程，在settings.py的INSTALLED_APPS中添加'rest_framework'\n\n```\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\n```\n\n\n### 序列化\n\n#### rest_framework.serializers.Serializer\n\n* 定义序列化器\n\n继承 rest_framework.serializers.Serializer\n\n```\n\n\nclass BookInfoSerializer(serializers.Serializer):\n    \"\"\"图书数据序列化器\"\"\"\n    id = serializers.IntegerField(label='ID', read_only=True)\n    btitle = serializers.CharField(label='名称', max_length=20)\n    bpub_date = serializers.DateField(label='发布日期', required=False)\n    bread = serializers.IntegerField(label='阅读量', required=False)\n    bcomment = serializers.IntegerField(label='评论量', required=False)\n    image = serializers.ImageField(label='图片', required=False)\n```\n\n* 构造序列化器对象\n\n\n```\nfrom booktest.serializers import BookInfoSerializer\nbook_qs = BookInfo.objects.all()\n\n\nserializer = BookInfoSerializer(book_qs, many=True)\n\n```\n* 查看序列化器对象的数据\n\nserializer.data\n\n##### 关联对象序列化\n\n* PrimaryKeyRelatedField\n\n```\nserializers.PrimaryKeyRelatedField(label='图书', queryset=BookInfo.objects.all()[,read_only=True])\n包含read_only=True参数时，该字段将不能用作反序列化使用\n包含queryset参数时，将被用作反序列化时参数校验使用\n```\n* StringRelatedField\n\n此字段将被序列化为关联对象的字符串表示方式（即__str__方法的返回值）\n\n\n```\nhbook = serializers.StringRelatedField(label='图书')\n```\n* 使用关联对象的序列化器\n\n```\nhbook = BookInfoSerializer()\n```\n\n* HyperlinkedRelatedField\n\n此字段将被序列化为获取关联对象数据的接口链接\n\n\n```\nhbook = serializers.HyperlinkedRelatedField(label='图书', read_only=True, view_name='books-detail')\n```\n* SlugRelatedField\n\n此字段将被序列化为关联对象的指定字段数据\n\n\n```\nhbook = serializers.SlugRelatedField(label='图书', read_only=True, slug_field='bpub_date')\n```\n### 反序列化\n\n使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。\n\n在获取反序列化的数据前，必须调用is_valid()方法进行验证，验证成功返回True，否则返回False。\n\n验证失败，可以通过序列化器对象的errors属性获取错误信息，返回字典，包含了字段和字段的错误。如果是非字段错误，可以通过修改REST framework配置中的NON_FIELD_ERRORS_KEY来控制错误字典中的键名。\n\n验证成功，可以通过序列化器对象的validated_data属性获取数据。\n\n在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。\n\n#### 验证\n\n##### 序列化器字段验证\n\n通过构造序列化器对象，并将要反序列化的数据传递给data构造参数，进而进行验证\n\n\ndata = {'btitle': 'python'}\nserializer = BookInfoSerializer(data=data)\nserializer.is_valid(raise_exception=True)  # True\nserializer.errors  # {}\nserializer.validated_data  #  OrderedDict([('btitle', 'python')])\nis_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递raise_exception=True参数开启，REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。\n\n##### 自定义验证行为\n\n###### validate_<field_name>  单个字段验证\n\n\n对<field_name>字段进行验证，如\n\n```\nclass BookInfoSerializer(serializers.Serializer):\n    \"\"\"图书数据序列化器\"\"\"\n    ...\n\n    def validate_btitle(self, value):\n        if 'django' not in value.lower():\n            raise serializers.ValidationError(\"图书不是关于Django的\")\n        return value\n\n```\n###### validate  多个字段进行验证\n\n\n在序列化器中需要同时对多个字段进行比较验证时，可以定义validate方法来验证，如\n\n```\nclass BookInfoSerializer(serializers.Serializer):\n    \"\"\"图书数据序列化器\"\"\"\n    ...\n\n    def validate(self, attrs):\n        bread = attrs['bread']\n        bcomment = attrs['bcomment']\n        if bread < bcomment:\n            raise serializers.ValidationError('阅读量小于评论量')\n        return attrs\n\n```\n###### validators  在序列化器的字段添加验证\n\n在字段中添加validators选项参数，也可以补充验证行为\n\nvalidators = [func]\n\n```\n\n\ndef about_django(value):\n    if 'django' not in value.lower():\n        raise serializers.ValidationError(\"图书不是关于Django的\")\n\nclass BookInfoSerializer(serializers.Serializer):\n    \"\"\"图书数据序列化器\"\"\"\n    id = serializers.IntegerField(label='ID', read_only=True)\n    btitle = serializers.CharField(label='名称', max_length=20, validators=[about_django])\n    bpub_date = serializers.DateField(label='发布日期', required=False)\n    bread = serializers.IntegerField(label='阅读量', required=False)\n    bcomment = serializers.IntegerField(label='评论量', required=False)\n    image = serializers.ImageField(label='图片', required=False)\n\n```\n#### 保存\n\n如果在验证成功后，想要基于validated_data完成数据对象的创建，可以通过在序列化器实现create()和update()两个方法来实现。\n\n\n```\nclass BookInfoSerializer(serializers.Serializer):\n    \"\"\"图书数据序列化器\"\"\"\n    ...\n\n    def create(self, validated_data):\n        \"\"\"新建\"\"\"\n        return BookInfo.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        \"\"\"更新，instance为要更新的对象实例\"\"\"\n        instance.btitle = validated_data.get('btitle', instance.btitle)\n        instance.bpub_date = validated_data.get('bpub_date', instance.bpub_date)\n        instance.bread = validated_data.get('bread', instance.bread)\n        instance.bcomment = validated_data.get('bcomment', instance.bcomment)\n        instance.save()\n        return instance\n```\n\n\n实现了上述两个方法后，在反序列化数据的时候，就可以通过save()方法返回一个数据对象实例了\n\n```\nbook = serializer.save()\n```\n如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时候，create()被调用，相反，如果传递了instance实例，则调用save()方法的时候，update()被调用。\n\n```\nfrom db.serializers import BookInfoSerializer\ndata = {'btitle': '封神演义'}\nserializer = BookInfoSerializer(data=data)\nserializer.is_valid()  # True\nserializer.save()  # <BookInfo: 封神演义>\n\nfrom db.models import BookInfo\nbook = BookInfo.objects.get(id=2)\ndata = {'btitle': '倚天剑'}\nserializer = BookInfoSerializer(book, data=data)\nserializer.is_valid()  # True\nserializer.save()  # <BookInfo: 倚天剑>\nbook.btitle  # '倚天剑'\n```\n\n两点说明：\n\n1） 在对序列化器进行save()保存时，可以额外传递数据，这些数据可以在create()和update()中的validated_data参数获取到\n\n```\nserializer.save(owner=request.user)\n```\n2）默认序列化器必须传递所有required的字段，否则会抛出验证异常。但是我们可以使用**partial参数来允许部分字段更新**\n\n```\nUpdate `comment` with partial data\nserializer = CommentSerializer(comment, data={'content': u'foo bar'}, partial=True)\n\n```\n#### 模型类序列化器ModelSerializer\n\n\n如果我们想要使用序列化器对应的是**Django的模型类**，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。\n\nModelSerializer与常规的Serializer相同，但提供了：\n\n基于模型类自动生成一系列字段\n基于模型类自动为Serializer生成validators，比如unique_together\n包含默认的create()和update()的实现\n##### 定义模型类序列化器\n\n\n比如我们创建一个BookInfoSerializer\n\n```\nclass BookInfoSerializer(serializers.ModelSerializer):\n    \"\"\"图书数据序列化器\"\"\"\n    class Meta:\n        model = BookInfo\n        fields = '__all__'   或者使用元组  ('btitle', 'bpub_date')\n```\nmodel 指明参照哪个模型类\nfields 指明为**模型类的哪些字段生成**\n\n##### 指定字段\n\n1) 使用fields来明确字段，__all__表名包含所有字段，也可以写明具体哪些字段，如\n\n```\nclass BookInfoSerializer(serializers.ModelSerializer):\n    \"\"\"图书数据序列化器\"\"\"\n    class Meta:\n        model = BookInfo\n        fields = ('id', 'btitle', 'bpub_date')  元组类型\n\n```\n2) 使用exclude可以明确排除掉哪些字段\n\n```\nclass BookInfoSerializer(serializers.ModelSerializer):\n    \"\"\"图书数据序列化器\"\"\"\n    class Meta:\n        model = BookInfo\n        exclude = ('image',)  元组类型\n\n```\n3) 默认ModelSerializer使用主键作为关联字段，但是我们可以使用depth来简单的生成嵌套表示，depth应该是整数，表明嵌套的层级数量。如：\n\n```\nclass HeroInfoSerializer2(serializers.ModelSerializer):\n    class Meta:\n        model = HeroInfo\n        fields = '__all__'\n        depth = 1\n```\n形成的序列化器如下：\n\n```\nHeroInfoSerializer():\n    id = IntegerField(label='ID', read_only=True)\n    hname = CharField(label='名称', max_length=20)\n    hgender = ChoiceField(choices=((0, 'male'), (1, 'female')), label='性别', required=False, validators=[<django.core.valators.MinValueValidator object>, <django.core.validators.MaxValueValidator object>])\n    hcomment = CharField(allow_null=True, label='描述信息', max_length=200, required=False)\n    hbook = NestedSerializer(read_only=True):\n        id = IntegerField(label='ID', read_only=True)\n        btitle = CharField(label='名称', max_length=20)\n        bpub_date = DateField(allow_null=True, label='发布日期', required=False)\n        bread = IntegerField(label='阅读量', max_value=2147483647, min_value=-2147483648, required=False)\n        bcomment = IntegerField(label='评论量', max_value=2147483647, min_value=-2147483648, required=False)\n        image = ImageField(allow_null=True, label='图片', max_length=100, required=False)\n```\n4) 指明显示字段，如：\n\n```\nclass HeroInfoSerializer(serializers.ModelSerializer):\n    hbook = BookInfoSerializer()\n\n    class Meta:\n        model = HeroInfo\n        fields = ('id', 'hname', 'hgender', 'hcomment', 'hbook')\n\n```\n5) 指明只读字段\n\n可以通过read_only_fields指明只读字段，即仅用于序列化输出的字段\n\n```\nclass BookInfoSerializer(serializers.ModelSerializer):\n    \"\"\"图书数据序列化器\"\"\"\n    class Meta:\n        model = BookInfo\n        fields = ('id', 'btitle', 'bpub_date'， 'bread', 'bcomment')\n        read_only_fields = ('id', 'bread', 'bcomment')\n\n```\n#####  添加额外参数\n\n我们可以使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数\n\n```\nclass BookInfoSerializer(serializers.ModelSerializer):\n    \"\"\"图书数据序列化器\"\"\"\n    class Meta:\n        model = BookInfo\n        fields = ('id', 'btitle', 'bpub_date', 'bread', 'bcomment')\n        extra_kwargs = {\n            'bread': {'min_value': 0, 'required': True},\n            'bcomment': {'min_value': 0, 'required': True},\n        }\nBookInfoSerializer():\nid = IntegerField(label='ID', read_only=True)\nbtitle = CharField(label='名称', max_length=20)\nbpub_date = DateField(allow_null=True, label='发布日期', required=False)\nbread = IntegerField(label='阅读量', max_value=2147483647, min_value=0, required=True)\nbcomment = IntegerField(label='评论量', max_value=2147483647, min_value=0, required=True)\n```\n\n\n\n### 视图\n\n#### DRF的Request对象\n\n\n\n1）REST framework 提供了Parser解析器，在接收到请求后会自动根据Content-Type指明的请求数据类型（如JSON、表单等）将请求数据进行parse解析，解析为类字典对象保存到Request对象中。)\n\n2）Request对象的数据是自动根据前端发送数据的格式进行解析之后的结果。\n\n3）无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据。\n\n\n\n##### 常用属性\n\n1）.data  请求体\n\nrequest.data 返回解析之后的请求体数据。类似于Django中标准的request.POST和request.FILES属性，但提供如下特性：\n\n包含了解析之后的文件和非文件数据\n包含了对POST、PUT、PATCH请求方式解析后的数据\n利用了REST framework的parsers解析器，不仅支持表单类型数据，也支持JSON数据\n2）.query_params  查询字符串\n\nrequest.query_params与Django标准的request.GET相同，只是更换了更正确的名称而已。\n\n\n\n#### DRF的Response对象\n\n\n\n```\n\nrest_framework.response.Response\n\n```\n\nREST framework提供了一个响应类Response，使用该类构造响应对象时，响应的具体数据内容会被转换（render渲染）成符合前端需求的类型。\n\nREST framework提供了Renderer 渲染器，用来根据请求头中的Accept（接收数据类型声明）来自动转换响应数据到对应格式。如果前端请求中未进行Accept声明，则会采用默认方式处理响应数据，我们可以通过配置来修改默认响应格式。\n\n```\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (  # 默认响应渲染类\n        'rest_framework.renderers.JSONRenderer',  # json渲染器\n        'rest_framework.renderers.BrowsableAPIRenderer',  # 浏览API渲染器\n    )\n}\n```\n\n\n##### 构造方式\n\n```\nResponse(data, status=None, template_name=None, headers=None, content_type=None)\n```\n\n\n参数说明：\n\ndata: 为响应准备的序列化处理后的数据；\nstatus: 状态码，默认200；\ntemplate_name: 模板名称，如果使用HTMLRenderer 时需指明；\nheaders: 用于存放响应头信息的字典；\ncontent_type: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数。\n\n\n##### 常用属性\n\n1）.data\n\n传给response对象的序列化后，但尚未render处理的数据\n\n2）.status_code\n\n状态码的数字\n\n3）.content\n\n经过render处理后的响应数据\n\n#### RDF状态码\n\n为了方便设置状态码，REST framewrok在rest_framework.status模块中提供了常用状态码常量。\n\n\n#### 两个基类视图\n\n##### APIView\n\n1）支持定义的属性：\n\nauthentication_classes 列表或元组，身份认证类\npermissoin_classes 列表或元组，权限检查类\nthrottle_classes 列表或元组，流量控制类\n##### GenericAPIViewe\n\n继承自APIVIew，增加了对于列表视图和详情视图可能用到的通用支持方法。通常使用时，可搭配一个或多个Mixin扩展类。\n\n\n1）支持定义的属性：\n\n* 列表视图与详情视图通用：\nqueryset 列表视图的查询集\nserializer_class 视图使用的序列化器\n* 列表视图使用：\npagination_class 分页控制类\nfilter_backends 过滤控制后端\n* 详情页视图使用：\nlookup_field **查询单一数据库对象时使用的条件字段，默认为'pk'**\nlookup_url_kwarg 查询单一数据时URL中的参数关键字名称，默认与look_field相同)\n\n\n\n2）提供的方法：\n\n* 列表视图与详情视图通用：\n\nget_queryset(self)\n\n返回视图使用的查询集，是列表视图与详情视图获取数据的基础，默认返回queryset属性，可以重写，例如：\n\n```\ndef get_queryset(self):\n    user = self.request.user\n    return user.accounts.all()\n\n```\nget_serializer_class(self)\n\n返回序列化器类，默认返回serializer_class，可以重写，例如：\n\n```\ndef get_serializer_class(self):\n    if self.request.user.is_staff:\n        return FullAccountSerializer\n    return BasicAccountSerializer\n\n```\nget_serializer(self, args, *kwargs)\n\n返回序列化器对象，被其他视图或扩展类使用，如果我们在视图中想要获取序列化器对象，可以直接调用此方法。\n\n注意，在提供序列化器对象的时候，REST framework会向对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。\n\n* 详情视图使用：\n\nget_object(self) 返回详情视图所需的模型类数据对象，默认使用**lookup_field参数**来过滤queryset。 在试图中可以调用该方法获取详情信息的模型类对象。\n\n若详情访问的模型类对象不存在，会返回404。\n\n该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。\n\n\n\n\n#### 5个扩展类视图,一般结合GenericAPIView\n\n1) ListModelMixin\n\n列表视图扩展类，提供list(request, \\*args, \\*\\*kwargs)方法快速实现列表视图，返回200状态码。\n\n该Mixin的list方法会对数据进行过滤和分页\n\n\n2) CreateModelMixin\n\n\n创建视图扩展类，提供create(request, \\*args, \\*\\*kwargs)方法快速实现创建资源的视图，成功返回201状态码。\n\n如果序列化器对前端发送的数据验证失败，返回400错误\n\n\n3） RetrieveModelMixin\n\n详情视图扩展类，提供retrieve(request, \\*args, \\*\\*kwargs)方法，可以快速实现返回一个存在的数据对象。\n\n如果存在，返回200， 否则返回404。\n\n源代码：\n\n```\nclass RetrieveModelMixin(object):\n    \"\"\"\n    Retrieve a model instance.\n    \"\"\"\n    def retrieve(self, request, *args, **kwargs):\n        # 获取对象，会检查对象的权限\n        instance = self.get_object()\n        # 序列化\n        serializer = self.get_serializer(instance)\n        return Response(serializer.data)\n\n```\n举例：\n\n```\nclass BookDetailView(RetrieveModelMixin, GenericAPIView):\n    queryset = BookInfo.objects.all()\n    serializer_class = BookInfoSerializer\n\n    def get(self, request, pk):\n        return self.retrieve(request)\n\n```\n4）UpdateModelMixin\n\n更新视图扩展类，提供update(request, \\*args, \\*\\*kwargs)方法，可以快速实现更新一个存在的数据对象。\n\n同时也提供partial_update(request, \\*args, \\*\\*kwargs)方法，可以实现局部更新。\n\n成功返回200，序列化器校验数据失败时，返回400错误。\n\n源代码：\n\n```\nclass UpdateModelMixin(object):\n    \"\"\"\n    Update a model instance.\n    \"\"\"\n    def update(self, request, *args, **kwargs):\n        partial = kwargs.pop('partial', False)\n        instance = self.get_object()\n        serializer = self.get_serializer(instance, data=request.data, partial=partial)\n        serializer.is_valid(raise_exception=True)\n        self.perform_update(serializer)\n\n        if getattr(instance, '_prefetched_objects_cache', None):\n            # If 'prefetch_related' has been applied to a queryset, we need to\n            # forcibly invalidate the prefetch cache on the instance.\n            instance._prefetched_objects_cache = {}\n\n        return Response(serializer.data)\n\n    def perform_update(self, serializer):\n        serializer.save()\n\n    def partial_update(self, request, *args, **kwargs):\n        kwargs['partial'] = True\n        return self.update(request, *args, **kwargs)\n\n```\n5）DestroyModelMixin\n\n删除视图扩展类，提供destroy(request, \\*args, \\*\\*kwargs)方法，可以快速实现删除一个存在的数据对象。\n\n成功返回204，不存在返回404。\n\n源代码：\n\n```\nclass DestroyModelMixin(object):\n    \"\"\"\n    Destroy a model instance.\n    \"\"\"\n    def destroy(self, request, *args, **kwargs):\n        instance = self.get_object()\n        self.perform_destroy(instance)\n        return Response(status=status.HTTP_204_NO_CONTENT)\n\n    def perform_destroy(self, instance):\n        instance.delete()\n\n```\n#### 7个可用子类视图\n\n1） CreateAPIView\n\n提供 post 方法\n\n继承自： GenericAPIView、CreateModelMixin\n\n2）ListAPIView\n\n提供 get 方法\n\n继承自：GenericAPIView、ListModelMixin\n\n3）RetireveAPIView\n\n提供 get 方法\n\n继承自: GenericAPIView、RetrieveModelMixin\n\n4）DestoryAPIView\n\n提供 delete 方法\n\n继承自：GenericAPIView、DestoryModelMixin\n\n5）UpdateAPIView\n\n提供 put 和 patch 方法\n\n继承自：GenericAPIView、UpdateModelMixin\n\n6）RetrieveUpdateAPIView\n\n提供 get、put、patch方法\n\n继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin\n\n7）RetrieveUpdateDestoryAPIView\n\n提供 get、put、patch、delete方法\n\n继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin\n#### 视图集\n\n视图集只在使用as_view()方法的时候，才会将action动作与具体请求方式对应上。如：\n\n```\nclass BookInfoViewSet(viewsets.ViewSet):\n\n    def list(self, request):\n        ...\n\n    def retrieve(self, request, pk=None):\n        ...\n\n```\n在设置路由时，我们可以如下操作\n\n```\nurlpatterns = [\n    url(r'^books/$', BookInfoViewSet.as_view({'get':'list'}),\n    url(r'^books/(?P<pk>\\d+)/$', BookInfoViewSet.as_view({'get': 'retrieve'})\n]\n```\n##### ViewSetMixin\n\n```\n\nclass ViewSetMixin(object):\n    \"\"\"\n    This is the magic.\n\n    Overrides `.as_view()` so that it takes an `actions` keyword that performs\n    the binding of HTTP methods to actions on the Resource.\n\n    For example, to create a concrete view binding the 'GET' and 'POST' methods\n    to the 'list' and 'create' actions...\n\n    view = MyViewSet.as_view({'get': 'list', 'post': 'create'})\n    \"\"\"\n```\n\n#####  rest_framework.viewsets.ViewSet\n\n继承自 rest_framework.views.APIView 和rest_framework.viewsets.ViewSetMixin\n\n##### rest_framework.viewsets.GenericViewSet\n\n继承自rest_framework.generic.GenericAPIView和rest_framework.viewsets.ViewSetMixin\n\n##### rest_framework.viewsets.ModelViewSet\n\n继承自GenericAPIVIew，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。\n\n##### rest_framework.viewsets.ReadOnlyModelViewSet\n\n继承自GenericAPIVIew，同时包括了ListModelMixin、RetrieveModelMixin。\n\n##### 视图集中自定义action动作\n\n\n在视图集中，除了上述默认的方法动作外，还可以添加自定义动作。\n\n添加自定义动作需要使用rest_framework.decorators.action装饰器。\n\n以action装饰器装饰的方法名会作为action动作名，与list、retrieve等同。\n\naction装饰器可以接收两个参数：\n\nmethods: 该action支持的请求方式，列表传递\ndetail: 表示是action中要处理的是否是视图资源的对象（即是否通过url路径获取主键）\nTrue 表示使用通过URL获取的主键对应的数据对象\nFalse 表示不使用URL获取主键\n举例：\n\n```\nfrom rest_framework import mixins\nfrom rest_framework.viewsets import GenericViewSet\nfrom rest_framework.decorators import action\n\nclass BookInfoViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):\n    queryset = BookInfo.objects.all()\n    serializer_class = BookInfoSerializer\n\n    detail为False 表示不需要处理具体的BookInfo对象\n    @action(methods=['get'], detail=False)\n    def latest(self, request):\n        \"\"\"\n        返回最新的图书信息\n        \"\"\"\n        book = BookInfo.objects.latest('id')\n        serializer = self.get_serializer(book)\n        return Response(serializer.data)\n\n     detail为True，表示要处理具体与pk主键对应的BookInfo对象\n    @action(methods=['put'], detail=True)\n    def read(self, request, pk):\n        \"\"\"\n        修改图书的阅读量数据\n        \"\"\"\n        book = self.get_object()\n        book.bread = request.data.get('read')\n        book.save()\n        serializer = self.get_serializer(book)\n        return Response(serializer.data)\n\n```\nurl的定义\n\n```\nurlpatterns = [\n    url(r'^books/$', views.BookInfoViewSet.as_view({'get': 'list'})),\n    url(r'^books/latest/$', views.BookInfoViewSet.as_view({'get': 'latest'})),\n    url(r'^books/(?P<pk>\\d+)/$', views.BookInfoViewSet.as_view({'get': 'retrieve'})),\n    url(r'^books/(?P<pk>\\d+)/read/$', views.BookInfoViewSet.as_view({'put': 'read'})),\n]\n```\n### 路由\n\n对于视图集ViewSet，我们除了可以自己手动指明请求方式与动作action之间的对应关系外，还可以使用Routers来帮助我们快速实现路由信息。\n\nREST framework提供了两个router\n\nSimpleRouter\nDefaultRouter\n\n\n####  使用方法\n\n1） 创建router对象，并注册视图集，例如\n\n```\nfrom rest_framework import routers\n\nrouter = routers.SimpleRouter()\nrouter.register(r'books', BookInfoViewSet, base_name='book')\n\n```\nregister(prefix, viewset, base_name)\n\nprefix 该视图集的路由前缀\nviewset 视图集\nbase_name 路由名称的前缀\n如上述代码会形成的路由如下：\n\n```\n^books/$    name: book-list\n^books/{pk}/$   name: book-detail\n```\n2）添加路由数据\n\n可以有两种方式：\n\n```\nurlpatterns = [\n    ...\n]\nurlpatterns += router.urls\n```\n或\n\n```\nurlpatterns = [\n    ...\n    url(r'^', include(router.urls))\n]\n```\n#### 视图集中包含附加action的\n\n```\nclass BookInfoViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):\n    queryset = BookInfo.objects.all()\n    serializer_class = BookInfoSerializer\n\n    @action(methods=['get'], detail=False)\n    def latest(self, request):\n        ...\n\n    @action(methods=['put'], detail=True)\n    def read(self, request, pk):\n        ...\n\n```\n此视图集会形成的路由：\n\n```\n^books/latest/$    name: book-latest\n^books/{pk}/read/$  name: book-read\n```\n","source":"_posts/DjangoRESTframework.md","raw":"---\ntitle: DjangoRESTframework\ncomments: true\ndate: 2018-07-24 21:49:20\ntoc: true\ncategories:\n- Django\ntags:\n- DRF\n---\n\n\nDjango REST Framework是基于Django进行的二次封装，提供快速序列化以及丰富的视图，实现快速的符合RESTful 风格的API开发。\n<!---more-->\n\n### RESTful设计方法\n\n* 域名\n\n* 版本\n\n* 路径\n\n(1) 资源作为网址，只能有名词，不能有动词，而且所用的名词往往与数据库的表名对应。\n\n(2) API中的名词应该使用复数。无论子资源或者所有资源。\n\n* HTTP动词\n\n\n常用的HTTP动词有下面四个（括号里是对应的SQL命令）。\n\nGET（SELECT）：从服务器取出资源（一项或多项）。\nPOST（CREATE）：在服务器新建一个资源。\nPUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\nDELETE（DELETE）：从服务器删除资源。\n还有三个不常用的HTTP动词。\n\nPATCH（UPDATE）：在服务器更新(更新)资源（客户端提供改变的属性）。\nHEAD：获取资源的元数据。\nOPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。\n* 过滤信息\n\n如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果\n\n\n?limit=10：指定返回记录的数量\n?offset=10：指定返回记录的开始位置。\n?page=2&per_page=100：指定第几页，以及每页的记录数。\n?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。\n?animal_type_id=1：指定筛选条件\n* 状态码\n\n服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。\n\n200 OK - [GET]：服务器成功返回用户请求的数据\n201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。\n202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）\n204 NO CONTENT - [DELETE]：用户删除数据成功。\n400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作\n401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。\n403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。\n404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\n406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。\n410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。\n422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。\n500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。\n* 错误处理\n\n如果状态码是4xx，服务器就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。\n\n```\n{\n    error: \"Invalid API key\"\n}\n```\n* 返回结果\n\n针对不同操作，服务器向用户返回的结果应该符合以下规范。\n\nGET /collection：返回资源对象的列表（数组）\nGET /collection/resource：返回单个资源对象\nPOST /collection：返回新生成的资源对象\nPUT /collection/resource：返回完整的资源对象\nPATCH /collection/resource：返回完整的资源对象\nDELETE /collection/resource：返回一个空文档\n* 超媒体\n\n* 数据格式\n\n一般返回json格式数据\n\n#### RESTful开发核心任务\n\n将请求的数据（如JSON格式）转换为模型类对象  \n操作数据库\n将模型类对象转换为响应的数据（如JSON格式）\n\n简而言之，我们可以将序列化理解为：\n\n将程序中的一个数据结构类型转换为其他格式（字典、JSON、XML等），例如将Django中的模型类对象装换为JSON字符串，这个转换过程我们称为序列化。\n\n反之，将其他格式（字典、JSON、XML等）转换为程序中的数据，例如将JSON字符串转换为Django中的模型类对象，这个过程我们称为反序列化。\n\n### 工程搭建\n\n\n1.安装DRF\n\n```\npip install djangorestframework\n```\n2. 注册rest_framework应用\n\n我们利用在Django框架学习中创建的demo工程，在settings.py的INSTALLED_APPS中添加'rest_framework'\n\n```\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\n```\n\n\n### 序列化\n\n#### rest_framework.serializers.Serializer\n\n* 定义序列化器\n\n继承 rest_framework.serializers.Serializer\n\n```\n\n\nclass BookInfoSerializer(serializers.Serializer):\n    \"\"\"图书数据序列化器\"\"\"\n    id = serializers.IntegerField(label='ID', read_only=True)\n    btitle = serializers.CharField(label='名称', max_length=20)\n    bpub_date = serializers.DateField(label='发布日期', required=False)\n    bread = serializers.IntegerField(label='阅读量', required=False)\n    bcomment = serializers.IntegerField(label='评论量', required=False)\n    image = serializers.ImageField(label='图片', required=False)\n```\n\n* 构造序列化器对象\n\n\n```\nfrom booktest.serializers import BookInfoSerializer\nbook_qs = BookInfo.objects.all()\n\n\nserializer = BookInfoSerializer(book_qs, many=True)\n\n```\n* 查看序列化器对象的数据\n\nserializer.data\n\n##### 关联对象序列化\n\n* PrimaryKeyRelatedField\n\n```\nserializers.PrimaryKeyRelatedField(label='图书', queryset=BookInfo.objects.all()[,read_only=True])\n包含read_only=True参数时，该字段将不能用作反序列化使用\n包含queryset参数时，将被用作反序列化时参数校验使用\n```\n* StringRelatedField\n\n此字段将被序列化为关联对象的字符串表示方式（即__str__方法的返回值）\n\n\n```\nhbook = serializers.StringRelatedField(label='图书')\n```\n* 使用关联对象的序列化器\n\n```\nhbook = BookInfoSerializer()\n```\n\n* HyperlinkedRelatedField\n\n此字段将被序列化为获取关联对象数据的接口链接\n\n\n```\nhbook = serializers.HyperlinkedRelatedField(label='图书', read_only=True, view_name='books-detail')\n```\n* SlugRelatedField\n\n此字段将被序列化为关联对象的指定字段数据\n\n\n```\nhbook = serializers.SlugRelatedField(label='图书', read_only=True, slug_field='bpub_date')\n```\n### 反序列化\n\n使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。\n\n在获取反序列化的数据前，必须调用is_valid()方法进行验证，验证成功返回True，否则返回False。\n\n验证失败，可以通过序列化器对象的errors属性获取错误信息，返回字典，包含了字段和字段的错误。如果是非字段错误，可以通过修改REST framework配置中的NON_FIELD_ERRORS_KEY来控制错误字典中的键名。\n\n验证成功，可以通过序列化器对象的validated_data属性获取数据。\n\n在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。\n\n#### 验证\n\n##### 序列化器字段验证\n\n通过构造序列化器对象，并将要反序列化的数据传递给data构造参数，进而进行验证\n\n\ndata = {'btitle': 'python'}\nserializer = BookInfoSerializer(data=data)\nserializer.is_valid(raise_exception=True)  # True\nserializer.errors  # {}\nserializer.validated_data  #  OrderedDict([('btitle', 'python')])\nis_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递raise_exception=True参数开启，REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。\n\n##### 自定义验证行为\n\n###### validate_<field_name>  单个字段验证\n\n\n对<field_name>字段进行验证，如\n\n```\nclass BookInfoSerializer(serializers.Serializer):\n    \"\"\"图书数据序列化器\"\"\"\n    ...\n\n    def validate_btitle(self, value):\n        if 'django' not in value.lower():\n            raise serializers.ValidationError(\"图书不是关于Django的\")\n        return value\n\n```\n###### validate  多个字段进行验证\n\n\n在序列化器中需要同时对多个字段进行比较验证时，可以定义validate方法来验证，如\n\n```\nclass BookInfoSerializer(serializers.Serializer):\n    \"\"\"图书数据序列化器\"\"\"\n    ...\n\n    def validate(self, attrs):\n        bread = attrs['bread']\n        bcomment = attrs['bcomment']\n        if bread < bcomment:\n            raise serializers.ValidationError('阅读量小于评论量')\n        return attrs\n\n```\n###### validators  在序列化器的字段添加验证\n\n在字段中添加validators选项参数，也可以补充验证行为\n\nvalidators = [func]\n\n```\n\n\ndef about_django(value):\n    if 'django' not in value.lower():\n        raise serializers.ValidationError(\"图书不是关于Django的\")\n\nclass BookInfoSerializer(serializers.Serializer):\n    \"\"\"图书数据序列化器\"\"\"\n    id = serializers.IntegerField(label='ID', read_only=True)\n    btitle = serializers.CharField(label='名称', max_length=20, validators=[about_django])\n    bpub_date = serializers.DateField(label='发布日期', required=False)\n    bread = serializers.IntegerField(label='阅读量', required=False)\n    bcomment = serializers.IntegerField(label='评论量', required=False)\n    image = serializers.ImageField(label='图片', required=False)\n\n```\n#### 保存\n\n如果在验证成功后，想要基于validated_data完成数据对象的创建，可以通过在序列化器实现create()和update()两个方法来实现。\n\n\n```\nclass BookInfoSerializer(serializers.Serializer):\n    \"\"\"图书数据序列化器\"\"\"\n    ...\n\n    def create(self, validated_data):\n        \"\"\"新建\"\"\"\n        return BookInfo.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        \"\"\"更新，instance为要更新的对象实例\"\"\"\n        instance.btitle = validated_data.get('btitle', instance.btitle)\n        instance.bpub_date = validated_data.get('bpub_date', instance.bpub_date)\n        instance.bread = validated_data.get('bread', instance.bread)\n        instance.bcomment = validated_data.get('bcomment', instance.bcomment)\n        instance.save()\n        return instance\n```\n\n\n实现了上述两个方法后，在反序列化数据的时候，就可以通过save()方法返回一个数据对象实例了\n\n```\nbook = serializer.save()\n```\n如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时候，create()被调用，相反，如果传递了instance实例，则调用save()方法的时候，update()被调用。\n\n```\nfrom db.serializers import BookInfoSerializer\ndata = {'btitle': '封神演义'}\nserializer = BookInfoSerializer(data=data)\nserializer.is_valid()  # True\nserializer.save()  # <BookInfo: 封神演义>\n\nfrom db.models import BookInfo\nbook = BookInfo.objects.get(id=2)\ndata = {'btitle': '倚天剑'}\nserializer = BookInfoSerializer(book, data=data)\nserializer.is_valid()  # True\nserializer.save()  # <BookInfo: 倚天剑>\nbook.btitle  # '倚天剑'\n```\n\n两点说明：\n\n1） 在对序列化器进行save()保存时，可以额外传递数据，这些数据可以在create()和update()中的validated_data参数获取到\n\n```\nserializer.save(owner=request.user)\n```\n2）默认序列化器必须传递所有required的字段，否则会抛出验证异常。但是我们可以使用**partial参数来允许部分字段更新**\n\n```\nUpdate `comment` with partial data\nserializer = CommentSerializer(comment, data={'content': u'foo bar'}, partial=True)\n\n```\n#### 模型类序列化器ModelSerializer\n\n\n如果我们想要使用序列化器对应的是**Django的模型类**，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。\n\nModelSerializer与常规的Serializer相同，但提供了：\n\n基于模型类自动生成一系列字段\n基于模型类自动为Serializer生成validators，比如unique_together\n包含默认的create()和update()的实现\n##### 定义模型类序列化器\n\n\n比如我们创建一个BookInfoSerializer\n\n```\nclass BookInfoSerializer(serializers.ModelSerializer):\n    \"\"\"图书数据序列化器\"\"\"\n    class Meta:\n        model = BookInfo\n        fields = '__all__'   或者使用元组  ('btitle', 'bpub_date')\n```\nmodel 指明参照哪个模型类\nfields 指明为**模型类的哪些字段生成**\n\n##### 指定字段\n\n1) 使用fields来明确字段，__all__表名包含所有字段，也可以写明具体哪些字段，如\n\n```\nclass BookInfoSerializer(serializers.ModelSerializer):\n    \"\"\"图书数据序列化器\"\"\"\n    class Meta:\n        model = BookInfo\n        fields = ('id', 'btitle', 'bpub_date')  元组类型\n\n```\n2) 使用exclude可以明确排除掉哪些字段\n\n```\nclass BookInfoSerializer(serializers.ModelSerializer):\n    \"\"\"图书数据序列化器\"\"\"\n    class Meta:\n        model = BookInfo\n        exclude = ('image',)  元组类型\n\n```\n3) 默认ModelSerializer使用主键作为关联字段，但是我们可以使用depth来简单的生成嵌套表示，depth应该是整数，表明嵌套的层级数量。如：\n\n```\nclass HeroInfoSerializer2(serializers.ModelSerializer):\n    class Meta:\n        model = HeroInfo\n        fields = '__all__'\n        depth = 1\n```\n形成的序列化器如下：\n\n```\nHeroInfoSerializer():\n    id = IntegerField(label='ID', read_only=True)\n    hname = CharField(label='名称', max_length=20)\n    hgender = ChoiceField(choices=((0, 'male'), (1, 'female')), label='性别', required=False, validators=[<django.core.valators.MinValueValidator object>, <django.core.validators.MaxValueValidator object>])\n    hcomment = CharField(allow_null=True, label='描述信息', max_length=200, required=False)\n    hbook = NestedSerializer(read_only=True):\n        id = IntegerField(label='ID', read_only=True)\n        btitle = CharField(label='名称', max_length=20)\n        bpub_date = DateField(allow_null=True, label='发布日期', required=False)\n        bread = IntegerField(label='阅读量', max_value=2147483647, min_value=-2147483648, required=False)\n        bcomment = IntegerField(label='评论量', max_value=2147483647, min_value=-2147483648, required=False)\n        image = ImageField(allow_null=True, label='图片', max_length=100, required=False)\n```\n4) 指明显示字段，如：\n\n```\nclass HeroInfoSerializer(serializers.ModelSerializer):\n    hbook = BookInfoSerializer()\n\n    class Meta:\n        model = HeroInfo\n        fields = ('id', 'hname', 'hgender', 'hcomment', 'hbook')\n\n```\n5) 指明只读字段\n\n可以通过read_only_fields指明只读字段，即仅用于序列化输出的字段\n\n```\nclass BookInfoSerializer(serializers.ModelSerializer):\n    \"\"\"图书数据序列化器\"\"\"\n    class Meta:\n        model = BookInfo\n        fields = ('id', 'btitle', 'bpub_date'， 'bread', 'bcomment')\n        read_only_fields = ('id', 'bread', 'bcomment')\n\n```\n#####  添加额外参数\n\n我们可以使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数\n\n```\nclass BookInfoSerializer(serializers.ModelSerializer):\n    \"\"\"图书数据序列化器\"\"\"\n    class Meta:\n        model = BookInfo\n        fields = ('id', 'btitle', 'bpub_date', 'bread', 'bcomment')\n        extra_kwargs = {\n            'bread': {'min_value': 0, 'required': True},\n            'bcomment': {'min_value': 0, 'required': True},\n        }\nBookInfoSerializer():\nid = IntegerField(label='ID', read_only=True)\nbtitle = CharField(label='名称', max_length=20)\nbpub_date = DateField(allow_null=True, label='发布日期', required=False)\nbread = IntegerField(label='阅读量', max_value=2147483647, min_value=0, required=True)\nbcomment = IntegerField(label='评论量', max_value=2147483647, min_value=0, required=True)\n```\n\n\n\n### 视图\n\n#### DRF的Request对象\n\n\n\n1）REST framework 提供了Parser解析器，在接收到请求后会自动根据Content-Type指明的请求数据类型（如JSON、表单等）将请求数据进行parse解析，解析为类字典对象保存到Request对象中。)\n\n2）Request对象的数据是自动根据前端发送数据的格式进行解析之后的结果。\n\n3）无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据。\n\n\n\n##### 常用属性\n\n1）.data  请求体\n\nrequest.data 返回解析之后的请求体数据。类似于Django中标准的request.POST和request.FILES属性，但提供如下特性：\n\n包含了解析之后的文件和非文件数据\n包含了对POST、PUT、PATCH请求方式解析后的数据\n利用了REST framework的parsers解析器，不仅支持表单类型数据，也支持JSON数据\n2）.query_params  查询字符串\n\nrequest.query_params与Django标准的request.GET相同，只是更换了更正确的名称而已。\n\n\n\n#### DRF的Response对象\n\n\n\n```\n\nrest_framework.response.Response\n\n```\n\nREST framework提供了一个响应类Response，使用该类构造响应对象时，响应的具体数据内容会被转换（render渲染）成符合前端需求的类型。\n\nREST framework提供了Renderer 渲染器，用来根据请求头中的Accept（接收数据类型声明）来自动转换响应数据到对应格式。如果前端请求中未进行Accept声明，则会采用默认方式处理响应数据，我们可以通过配置来修改默认响应格式。\n\n```\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (  # 默认响应渲染类\n        'rest_framework.renderers.JSONRenderer',  # json渲染器\n        'rest_framework.renderers.BrowsableAPIRenderer',  # 浏览API渲染器\n    )\n}\n```\n\n\n##### 构造方式\n\n```\nResponse(data, status=None, template_name=None, headers=None, content_type=None)\n```\n\n\n参数说明：\n\ndata: 为响应准备的序列化处理后的数据；\nstatus: 状态码，默认200；\ntemplate_name: 模板名称，如果使用HTMLRenderer 时需指明；\nheaders: 用于存放响应头信息的字典；\ncontent_type: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数。\n\n\n##### 常用属性\n\n1）.data\n\n传给response对象的序列化后，但尚未render处理的数据\n\n2）.status_code\n\n状态码的数字\n\n3）.content\n\n经过render处理后的响应数据\n\n#### RDF状态码\n\n为了方便设置状态码，REST framewrok在rest_framework.status模块中提供了常用状态码常量。\n\n\n#### 两个基类视图\n\n##### APIView\n\n1）支持定义的属性：\n\nauthentication_classes 列表或元组，身份认证类\npermissoin_classes 列表或元组，权限检查类\nthrottle_classes 列表或元组，流量控制类\n##### GenericAPIViewe\n\n继承自APIVIew，增加了对于列表视图和详情视图可能用到的通用支持方法。通常使用时，可搭配一个或多个Mixin扩展类。\n\n\n1）支持定义的属性：\n\n* 列表视图与详情视图通用：\nqueryset 列表视图的查询集\nserializer_class 视图使用的序列化器\n* 列表视图使用：\npagination_class 分页控制类\nfilter_backends 过滤控制后端\n* 详情页视图使用：\nlookup_field **查询单一数据库对象时使用的条件字段，默认为'pk'**\nlookup_url_kwarg 查询单一数据时URL中的参数关键字名称，默认与look_field相同)\n\n\n\n2）提供的方法：\n\n* 列表视图与详情视图通用：\n\nget_queryset(self)\n\n返回视图使用的查询集，是列表视图与详情视图获取数据的基础，默认返回queryset属性，可以重写，例如：\n\n```\ndef get_queryset(self):\n    user = self.request.user\n    return user.accounts.all()\n\n```\nget_serializer_class(self)\n\n返回序列化器类，默认返回serializer_class，可以重写，例如：\n\n```\ndef get_serializer_class(self):\n    if self.request.user.is_staff:\n        return FullAccountSerializer\n    return BasicAccountSerializer\n\n```\nget_serializer(self, args, *kwargs)\n\n返回序列化器对象，被其他视图或扩展类使用，如果我们在视图中想要获取序列化器对象，可以直接调用此方法。\n\n注意，在提供序列化器对象的时候，REST framework会向对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。\n\n* 详情视图使用：\n\nget_object(self) 返回详情视图所需的模型类数据对象，默认使用**lookup_field参数**来过滤queryset。 在试图中可以调用该方法获取详情信息的模型类对象。\n\n若详情访问的模型类对象不存在，会返回404。\n\n该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。\n\n\n\n\n#### 5个扩展类视图,一般结合GenericAPIView\n\n1) ListModelMixin\n\n列表视图扩展类，提供list(request, \\*args, \\*\\*kwargs)方法快速实现列表视图，返回200状态码。\n\n该Mixin的list方法会对数据进行过滤和分页\n\n\n2) CreateModelMixin\n\n\n创建视图扩展类，提供create(request, \\*args, \\*\\*kwargs)方法快速实现创建资源的视图，成功返回201状态码。\n\n如果序列化器对前端发送的数据验证失败，返回400错误\n\n\n3） RetrieveModelMixin\n\n详情视图扩展类，提供retrieve(request, \\*args, \\*\\*kwargs)方法，可以快速实现返回一个存在的数据对象。\n\n如果存在，返回200， 否则返回404。\n\n源代码：\n\n```\nclass RetrieveModelMixin(object):\n    \"\"\"\n    Retrieve a model instance.\n    \"\"\"\n    def retrieve(self, request, *args, **kwargs):\n        # 获取对象，会检查对象的权限\n        instance = self.get_object()\n        # 序列化\n        serializer = self.get_serializer(instance)\n        return Response(serializer.data)\n\n```\n举例：\n\n```\nclass BookDetailView(RetrieveModelMixin, GenericAPIView):\n    queryset = BookInfo.objects.all()\n    serializer_class = BookInfoSerializer\n\n    def get(self, request, pk):\n        return self.retrieve(request)\n\n```\n4）UpdateModelMixin\n\n更新视图扩展类，提供update(request, \\*args, \\*\\*kwargs)方法，可以快速实现更新一个存在的数据对象。\n\n同时也提供partial_update(request, \\*args, \\*\\*kwargs)方法，可以实现局部更新。\n\n成功返回200，序列化器校验数据失败时，返回400错误。\n\n源代码：\n\n```\nclass UpdateModelMixin(object):\n    \"\"\"\n    Update a model instance.\n    \"\"\"\n    def update(self, request, *args, **kwargs):\n        partial = kwargs.pop('partial', False)\n        instance = self.get_object()\n        serializer = self.get_serializer(instance, data=request.data, partial=partial)\n        serializer.is_valid(raise_exception=True)\n        self.perform_update(serializer)\n\n        if getattr(instance, '_prefetched_objects_cache', None):\n            # If 'prefetch_related' has been applied to a queryset, we need to\n            # forcibly invalidate the prefetch cache on the instance.\n            instance._prefetched_objects_cache = {}\n\n        return Response(serializer.data)\n\n    def perform_update(self, serializer):\n        serializer.save()\n\n    def partial_update(self, request, *args, **kwargs):\n        kwargs['partial'] = True\n        return self.update(request, *args, **kwargs)\n\n```\n5）DestroyModelMixin\n\n删除视图扩展类，提供destroy(request, \\*args, \\*\\*kwargs)方法，可以快速实现删除一个存在的数据对象。\n\n成功返回204，不存在返回404。\n\n源代码：\n\n```\nclass DestroyModelMixin(object):\n    \"\"\"\n    Destroy a model instance.\n    \"\"\"\n    def destroy(self, request, *args, **kwargs):\n        instance = self.get_object()\n        self.perform_destroy(instance)\n        return Response(status=status.HTTP_204_NO_CONTENT)\n\n    def perform_destroy(self, instance):\n        instance.delete()\n\n```\n#### 7个可用子类视图\n\n1） CreateAPIView\n\n提供 post 方法\n\n继承自： GenericAPIView、CreateModelMixin\n\n2）ListAPIView\n\n提供 get 方法\n\n继承自：GenericAPIView、ListModelMixin\n\n3）RetireveAPIView\n\n提供 get 方法\n\n继承自: GenericAPIView、RetrieveModelMixin\n\n4）DestoryAPIView\n\n提供 delete 方法\n\n继承自：GenericAPIView、DestoryModelMixin\n\n5）UpdateAPIView\n\n提供 put 和 patch 方法\n\n继承自：GenericAPIView、UpdateModelMixin\n\n6）RetrieveUpdateAPIView\n\n提供 get、put、patch方法\n\n继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin\n\n7）RetrieveUpdateDestoryAPIView\n\n提供 get、put、patch、delete方法\n\n继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin\n#### 视图集\n\n视图集只在使用as_view()方法的时候，才会将action动作与具体请求方式对应上。如：\n\n```\nclass BookInfoViewSet(viewsets.ViewSet):\n\n    def list(self, request):\n        ...\n\n    def retrieve(self, request, pk=None):\n        ...\n\n```\n在设置路由时，我们可以如下操作\n\n```\nurlpatterns = [\n    url(r'^books/$', BookInfoViewSet.as_view({'get':'list'}),\n    url(r'^books/(?P<pk>\\d+)/$', BookInfoViewSet.as_view({'get': 'retrieve'})\n]\n```\n##### ViewSetMixin\n\n```\n\nclass ViewSetMixin(object):\n    \"\"\"\n    This is the magic.\n\n    Overrides `.as_view()` so that it takes an `actions` keyword that performs\n    the binding of HTTP methods to actions on the Resource.\n\n    For example, to create a concrete view binding the 'GET' and 'POST' methods\n    to the 'list' and 'create' actions...\n\n    view = MyViewSet.as_view({'get': 'list', 'post': 'create'})\n    \"\"\"\n```\n\n#####  rest_framework.viewsets.ViewSet\n\n继承自 rest_framework.views.APIView 和rest_framework.viewsets.ViewSetMixin\n\n##### rest_framework.viewsets.GenericViewSet\n\n继承自rest_framework.generic.GenericAPIView和rest_framework.viewsets.ViewSetMixin\n\n##### rest_framework.viewsets.ModelViewSet\n\n继承自GenericAPIVIew，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。\n\n##### rest_framework.viewsets.ReadOnlyModelViewSet\n\n继承自GenericAPIVIew，同时包括了ListModelMixin、RetrieveModelMixin。\n\n##### 视图集中自定义action动作\n\n\n在视图集中，除了上述默认的方法动作外，还可以添加自定义动作。\n\n添加自定义动作需要使用rest_framework.decorators.action装饰器。\n\n以action装饰器装饰的方法名会作为action动作名，与list、retrieve等同。\n\naction装饰器可以接收两个参数：\n\nmethods: 该action支持的请求方式，列表传递\ndetail: 表示是action中要处理的是否是视图资源的对象（即是否通过url路径获取主键）\nTrue 表示使用通过URL获取的主键对应的数据对象\nFalse 表示不使用URL获取主键\n举例：\n\n```\nfrom rest_framework import mixins\nfrom rest_framework.viewsets import GenericViewSet\nfrom rest_framework.decorators import action\n\nclass BookInfoViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):\n    queryset = BookInfo.objects.all()\n    serializer_class = BookInfoSerializer\n\n    detail为False 表示不需要处理具体的BookInfo对象\n    @action(methods=['get'], detail=False)\n    def latest(self, request):\n        \"\"\"\n        返回最新的图书信息\n        \"\"\"\n        book = BookInfo.objects.latest('id')\n        serializer = self.get_serializer(book)\n        return Response(serializer.data)\n\n     detail为True，表示要处理具体与pk主键对应的BookInfo对象\n    @action(methods=['put'], detail=True)\n    def read(self, request, pk):\n        \"\"\"\n        修改图书的阅读量数据\n        \"\"\"\n        book = self.get_object()\n        book.bread = request.data.get('read')\n        book.save()\n        serializer = self.get_serializer(book)\n        return Response(serializer.data)\n\n```\nurl的定义\n\n```\nurlpatterns = [\n    url(r'^books/$', views.BookInfoViewSet.as_view({'get': 'list'})),\n    url(r'^books/latest/$', views.BookInfoViewSet.as_view({'get': 'latest'})),\n    url(r'^books/(?P<pk>\\d+)/$', views.BookInfoViewSet.as_view({'get': 'retrieve'})),\n    url(r'^books/(?P<pk>\\d+)/read/$', views.BookInfoViewSet.as_view({'put': 'read'})),\n]\n```\n### 路由\n\n对于视图集ViewSet，我们除了可以自己手动指明请求方式与动作action之间的对应关系外，还可以使用Routers来帮助我们快速实现路由信息。\n\nREST framework提供了两个router\n\nSimpleRouter\nDefaultRouter\n\n\n####  使用方法\n\n1） 创建router对象，并注册视图集，例如\n\n```\nfrom rest_framework import routers\n\nrouter = routers.SimpleRouter()\nrouter.register(r'books', BookInfoViewSet, base_name='book')\n\n```\nregister(prefix, viewset, base_name)\n\nprefix 该视图集的路由前缀\nviewset 视图集\nbase_name 路由名称的前缀\n如上述代码会形成的路由如下：\n\n```\n^books/$    name: book-list\n^books/{pk}/$   name: book-detail\n```\n2）添加路由数据\n\n可以有两种方式：\n\n```\nurlpatterns = [\n    ...\n]\nurlpatterns += router.urls\n```\n或\n\n```\nurlpatterns = [\n    ...\n    url(r'^', include(router.urls))\n]\n```\n#### 视图集中包含附加action的\n\n```\nclass BookInfoViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):\n    queryset = BookInfo.objects.all()\n    serializer_class = BookInfoSerializer\n\n    @action(methods=['get'], detail=False)\n    def latest(self, request):\n        ...\n\n    @action(methods=['put'], detail=True)\n    def read(self, request, pk):\n        ...\n\n```\n此视图集会形成的路由：\n\n```\n^books/latest/$    name: book-latest\n^books/{pk}/read/$  name: book-read\n```\n","slug":"DjangoRESTframework","published":1,"updated":"2019-05-25T09:32:43.095Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtc30004e5vxkvbtv7pa","content":"<p>Django REST Framework是基于Django进行的二次封装，提供快速序列化以及丰富的视图，实现快速的符合RESTful 风格的API开发。<br><a id=\"more\"></a></p>\n<h3 id=\"RESTful设计方法\"><a href=\"#RESTful设计方法\" class=\"headerlink\" title=\"RESTful设计方法\"></a>RESTful设计方法</h3><ul>\n<li><p>域名</p>\n</li>\n<li><p>版本</p>\n</li>\n<li><p>路径</p>\n</li>\n</ul>\n<p>(1) 资源作为网址，只能有名词，不能有动词，而且所用的名词往往与数据库的表名对应。</p>\n<p>(2) API中的名词应该使用复数。无论子资源或者所有资源。</p>\n<ul>\n<li>HTTP动词</li>\n</ul>\n<p>常用的HTTP动词有下面四个（括号里是对应的SQL命令）。</p>\n<p>GET（SELECT）：从服务器取出资源（一项或多项）。<br>POST（CREATE）：在服务器新建一个资源。<br>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。<br>DELETE（DELETE）：从服务器删除资源。<br>还有三个不常用的HTTP动词。</p>\n<p>PATCH（UPDATE）：在服务器更新(更新)资源（客户端提供改变的属性）。<br>HEAD：获取资源的元数据。<br>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</p>\n<ul>\n<li>过滤信息</li>\n</ul>\n<p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果</p>\n<p>?limit=10：指定返回记录的数量<br>?offset=10：指定返回记录的开始位置。<br>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。<br>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。<br>?animal_type_id=1：指定筛选条件</p>\n<ul>\n<li>状态码</li>\n</ul>\n<p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p>\n<p>200 OK - [GET]：服务器成功返回用户请求的数据<br>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。<br>202 Accepted - [<em>]：表示一个请求已经进入后台排队（异步任务）<br>204 NO CONTENT - [DELETE]：用户删除数据成功。<br>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作<br>401 Unauthorized - [</em>]：表示用户没有权限（令牌、用户名、密码错误）。<br>403 Forbidden - [<em>] 表示用户得到授权（与401错误相对），但是访问是被禁止的。<br>404 NOT FOUND - [</em>]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。<br>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。<br>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。<br>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。<br>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</p>\n<ul>\n<li>错误处理</li>\n</ul>\n<p>如果状态码是4xx，服务器就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    error: &quot;Invalid API key&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>返回结果</li>\n</ul>\n<p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>\n<p>GET /collection：返回资源对象的列表（数组）<br>GET /collection/resource：返回单个资源对象<br>POST /collection：返回新生成的资源对象<br>PUT /collection/resource：返回完整的资源对象<br>PATCH /collection/resource：返回完整的资源对象<br>DELETE /collection/resource：返回一个空文档</p>\n<ul>\n<li><p>超媒体</p>\n</li>\n<li><p>数据格式</p>\n</li>\n</ul>\n<p>一般返回json格式数据</p>\n<h4 id=\"RESTful开发核心任务\"><a href=\"#RESTful开发核心任务\" class=\"headerlink\" title=\"RESTful开发核心任务\"></a>RESTful开发核心任务</h4><p>将请求的数据（如JSON格式）转换为模型类对象<br>操作数据库<br>将模型类对象转换为响应的数据（如JSON格式）</p>\n<p>简而言之，我们可以将序列化理解为：</p>\n<p>将程序中的一个数据结构类型转换为其他格式（字典、JSON、XML等），例如将Django中的模型类对象装换为JSON字符串，这个转换过程我们称为序列化。</p>\n<p>反之，将其他格式（字典、JSON、XML等）转换为程序中的数据，例如将JSON字符串转换为Django中的模型类对象，这个过程我们称为反序列化。</p>\n<h3 id=\"工程搭建\"><a href=\"#工程搭建\" class=\"headerlink\" title=\"工程搭建\"></a>工程搭建</h3><p>1.安装DRF</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install djangorestframework</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>注册rest_framework应用</li>\n</ol>\n<p>我们利用在Django框架学习中创建的demo工程，在settings.py的INSTALLED_APPS中添加’rest_framework’</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &apos;rest_framework&apos;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><h4 id=\"rest-framework-serializers-Serializer\"><a href=\"#rest-framework-serializers-Serializer\" class=\"headerlink\" title=\"rest_framework.serializers.Serializer\"></a>rest_framework.serializers.Serializer</h4><ul>\n<li>定义序列化器</li>\n</ul>\n<p>继承 rest_framework.serializers.Serializer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class BookInfoSerializer(serializers.Serializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    id = serializers.IntegerField(label=&apos;ID&apos;, read_only=True)</span><br><span class=\"line\">    btitle = serializers.CharField(label=&apos;名称&apos;, max_length=20)</span><br><span class=\"line\">    bpub_date = serializers.DateField(label=&apos;发布日期&apos;, required=False)</span><br><span class=\"line\">    bread = serializers.IntegerField(label=&apos;阅读量&apos;, required=False)</span><br><span class=\"line\">    bcomment = serializers.IntegerField(label=&apos;评论量&apos;, required=False)</span><br><span class=\"line\">    image = serializers.ImageField(label=&apos;图片&apos;, required=False)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>构造序列化器对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from booktest.serializers import BookInfoSerializer</span><br><span class=\"line\">book_qs = BookInfo.objects.all()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">serializer = BookInfoSerializer(book_qs, many=True)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看序列化器对象的数据</li>\n</ul>\n<p>serializer.data</p>\n<h5 id=\"关联对象序列化\"><a href=\"#关联对象序列化\" class=\"headerlink\" title=\"关联对象序列化\"></a>关联对象序列化</h5><ul>\n<li>PrimaryKeyRelatedField</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serializers.PrimaryKeyRelatedField(label=&apos;图书&apos;, queryset=BookInfo.objects.all()[,read_only=True])</span><br><span class=\"line\">包含read_only=True参数时，该字段将不能用作反序列化使用</span><br><span class=\"line\">包含queryset参数时，将被用作反序列化时参数校验使用</span><br></pre></td></tr></table></figure>\n<ul>\n<li>StringRelatedField</li>\n</ul>\n<p>此字段将被序列化为关联对象的字符串表示方式（即<strong>str</strong>方法的返回值）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hbook = serializers.StringRelatedField(label=&apos;图书&apos;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用关联对象的序列化器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hbook = BookInfoSerializer()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>HyperlinkedRelatedField</li>\n</ul>\n<p>此字段将被序列化为获取关联对象数据的接口链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hbook = serializers.HyperlinkedRelatedField(label=&apos;图书&apos;, read_only=True, view_name=&apos;books-detail&apos;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>SlugRelatedField</li>\n</ul>\n<p>此字段将被序列化为关联对象的指定字段数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hbook = serializers.SlugRelatedField(label=&apos;图书&apos;, read_only=True, slug_field=&apos;bpub_date&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><p>使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。</p>\n<p>在获取反序列化的数据前，必须调用is_valid()方法进行验证，验证成功返回True，否则返回False。</p>\n<p>验证失败，可以通过序列化器对象的errors属性获取错误信息，返回字典，包含了字段和字段的错误。如果是非字段错误，可以通过修改REST framework配置中的NON_FIELD_ERRORS_KEY来控制错误字典中的键名。</p>\n<p>验证成功，可以通过序列化器对象的validated_data属性获取数据。</p>\n<p>在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><h5 id=\"序列化器字段验证\"><a href=\"#序列化器字段验证\" class=\"headerlink\" title=\"序列化器字段验证\"></a>序列化器字段验证</h5><p>通过构造序列化器对象，并将要反序列化的数据传递给data构造参数，进而进行验证</p>\n<p>data = {‘btitle’: ‘python’}<br>serializer = BookInfoSerializer(data=data)<br>serializer.is_valid(raise_exception=True)  # True<br>serializer.errors  # {}<br>serializer.validated_data  #  OrderedDict([(‘btitle’, ‘python’)])<br>is_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递raise_exception=True参数开启，REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。</p>\n<h5 id=\"自定义验证行为\"><a href=\"#自定义验证行为\" class=\"headerlink\" title=\"自定义验证行为\"></a>自定义验证行为</h5><h6 id=\"validate-lt-field-name-gt-单个字段验证\"><a href=\"#validate-lt-field-name-gt-单个字段验证\" class=\"headerlink\" title=\"validate_&lt;field_name&gt;  单个字段验证\"></a>validate_&lt;field_name&gt;  单个字段验证</h6><p>对&lt;field_name&gt;字段进行验证，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.Serializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate_btitle(self, value):</span><br><span class=\"line\">        if &apos;django&apos; not in value.lower():</span><br><span class=\"line\">            raise serializers.ValidationError(&quot;图书不是关于Django的&quot;)</span><br><span class=\"line\">        return value</span><br></pre></td></tr></table></figure>\n<h6 id=\"validate-多个字段进行验证\"><a href=\"#validate-多个字段进行验证\" class=\"headerlink\" title=\"validate  多个字段进行验证\"></a>validate  多个字段进行验证</h6><p>在序列化器中需要同时对多个字段进行比较验证时，可以定义validate方法来验证，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.Serializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate(self, attrs):</span><br><span class=\"line\">        bread = attrs[&apos;bread&apos;]</span><br><span class=\"line\">        bcomment = attrs[&apos;bcomment&apos;]</span><br><span class=\"line\">        if bread &lt; bcomment:</span><br><span class=\"line\">            raise serializers.ValidationError(&apos;阅读量小于评论量&apos;)</span><br><span class=\"line\">        return attrs</span><br></pre></td></tr></table></figure>\n<h6 id=\"validators-在序列化器的字段添加验证\"><a href=\"#validators-在序列化器的字段添加验证\" class=\"headerlink\" title=\"validators  在序列化器的字段添加验证\"></a>validators  在序列化器的字段添加验证</h6><p>在字段中添加validators选项参数，也可以补充验证行为</p>\n<p>validators = [func]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def about_django(value):</span><br><span class=\"line\">    if &apos;django&apos; not in value.lower():</span><br><span class=\"line\">        raise serializers.ValidationError(&quot;图书不是关于Django的&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">class BookInfoSerializer(serializers.Serializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    id = serializers.IntegerField(label=&apos;ID&apos;, read_only=True)</span><br><span class=\"line\">    btitle = serializers.CharField(label=&apos;名称&apos;, max_length=20, validators=[about_django])</span><br><span class=\"line\">    bpub_date = serializers.DateField(label=&apos;发布日期&apos;, required=False)</span><br><span class=\"line\">    bread = serializers.IntegerField(label=&apos;阅读量&apos;, required=False)</span><br><span class=\"line\">    bcomment = serializers.IntegerField(label=&apos;评论量&apos;, required=False)</span><br><span class=\"line\">    image = serializers.ImageField(label=&apos;图片&apos;, required=False)</span><br></pre></td></tr></table></figure>\n<h4 id=\"保存\"><a href=\"#保存\" class=\"headerlink\" title=\"保存\"></a>保存</h4><p>如果在验证成功后，想要基于validated_data完成数据对象的创建，可以通过在序列化器实现create()和update()两个方法来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.Serializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    def create(self, validated_data):</span><br><span class=\"line\">        &quot;&quot;&quot;新建&quot;&quot;&quot;</span><br><span class=\"line\">        return BookInfo.objects.create(**validated_data)</span><br><span class=\"line\"></span><br><span class=\"line\">    def update(self, instance, validated_data):</span><br><span class=\"line\">        &quot;&quot;&quot;更新，instance为要更新的对象实例&quot;&quot;&quot;</span><br><span class=\"line\">        instance.btitle = validated_data.get(&apos;btitle&apos;, instance.btitle)</span><br><span class=\"line\">        instance.bpub_date = validated_data.get(&apos;bpub_date&apos;, instance.bpub_date)</span><br><span class=\"line\">        instance.bread = validated_data.get(&apos;bread&apos;, instance.bread)</span><br><span class=\"line\">        instance.bcomment = validated_data.get(&apos;bcomment&apos;, instance.bcomment)</span><br><span class=\"line\">        instance.save()</span><br><span class=\"line\">        return instance</span><br></pre></td></tr></table></figure>\n<p>实现了上述两个方法后，在反序列化数据的时候，就可以通过save()方法返回一个数据对象实例了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book = serializer.save()</span><br></pre></td></tr></table></figure>\n<p>如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时候，create()被调用，相反，如果传递了instance实例，则调用save()方法的时候，update()被调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from db.serializers import BookInfoSerializer</span><br><span class=\"line\">data = &#123;&apos;btitle&apos;: &apos;封神演义&apos;&#125;</span><br><span class=\"line\">serializer = BookInfoSerializer(data=data)</span><br><span class=\"line\">serializer.is_valid()  # True</span><br><span class=\"line\">serializer.save()  # &lt;BookInfo: 封神演义&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">from db.models import BookInfo</span><br><span class=\"line\">book = BookInfo.objects.get(id=2)</span><br><span class=\"line\">data = &#123;&apos;btitle&apos;: &apos;倚天剑&apos;&#125;</span><br><span class=\"line\">serializer = BookInfoSerializer(book, data=data)</span><br><span class=\"line\">serializer.is_valid()  # True</span><br><span class=\"line\">serializer.save()  # &lt;BookInfo: 倚天剑&gt;</span><br><span class=\"line\">book.btitle  # &apos;倚天剑&apos;</span><br></pre></td></tr></table></figure>\n<p>两点说明：</p>\n<p>1） 在对序列化器进行save()保存时，可以额外传递数据，这些数据可以在create()和update()中的validated_data参数获取到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serializer.save(owner=request.user)</span><br></pre></td></tr></table></figure>\n<p>2）默认序列化器必须传递所有required的字段，否则会抛出验证异常。但是我们可以使用<strong>partial参数来允许部分字段更新</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Update `comment` with partial data</span><br><span class=\"line\">serializer = CommentSerializer(comment, data=&#123;&apos;content&apos;: u&apos;foo bar&apos;&#125;, partial=True)</span><br></pre></td></tr></table></figure>\n<h4 id=\"模型类序列化器ModelSerializer\"><a href=\"#模型类序列化器ModelSerializer\" class=\"headerlink\" title=\"模型类序列化器ModelSerializer\"></a>模型类序列化器ModelSerializer</h4><p>如果我们想要使用序列化器对应的是<strong>Django的模型类</strong>，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。</p>\n<p>ModelSerializer与常规的Serializer相同，但提供了：</p>\n<p>基于模型类自动生成一系列字段<br>基于模型类自动为Serializer生成validators，比如unique_together<br>包含默认的create()和update()的实现</p>\n<h5 id=\"定义模型类序列化器\"><a href=\"#定义模型类序列化器\" class=\"headerlink\" title=\"定义模型类序列化器\"></a>定义模型类序列化器</h5><p>比如我们创建一个BookInfoSerializer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = BookInfo</span><br><span class=\"line\">        fields = &apos;__all__&apos;   或者使用元组  (&apos;btitle&apos;, &apos;bpub_date&apos;)</span><br></pre></td></tr></table></figure>\n<p>model 指明参照哪个模型类<br>fields 指明为<strong>模型类的哪些字段生成</strong></p>\n<h5 id=\"指定字段\"><a href=\"#指定字段\" class=\"headerlink\" title=\"指定字段\"></a>指定字段</h5><p>1) 使用fields来明确字段，<strong>all</strong>表名包含所有字段，也可以写明具体哪些字段，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = BookInfo</span><br><span class=\"line\">        fields = (&apos;id&apos;, &apos;btitle&apos;, &apos;bpub_date&apos;)  元组类型</span><br></pre></td></tr></table></figure>\n<p>2) 使用exclude可以明确排除掉哪些字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = BookInfo</span><br><span class=\"line\">        exclude = (&apos;image&apos;,)  元组类型</span><br></pre></td></tr></table></figure>\n<p>3) 默认ModelSerializer使用主键作为关联字段，但是我们可以使用depth来简单的生成嵌套表示，depth应该是整数，表明嵌套的层级数量。如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HeroInfoSerializer2(serializers.ModelSerializer):</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = HeroInfo</span><br><span class=\"line\">        fields = &apos;__all__&apos;</span><br><span class=\"line\">        depth = 1</span><br></pre></td></tr></table></figure>\n<p>形成的序列化器如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HeroInfoSerializer():</span><br><span class=\"line\">    id = IntegerField(label=&apos;ID&apos;, read_only=True)</span><br><span class=\"line\">    hname = CharField(label=&apos;名称&apos;, max_length=20)</span><br><span class=\"line\">    hgender = ChoiceField(choices=((0, &apos;male&apos;), (1, &apos;female&apos;)), label=&apos;性别&apos;, required=False, validators=[&lt;django.core.valators.MinValueValidator object&gt;, &lt;django.core.validators.MaxValueValidator object&gt;])</span><br><span class=\"line\">    hcomment = CharField(allow_null=True, label=&apos;描述信息&apos;, max_length=200, required=False)</span><br><span class=\"line\">    hbook = NestedSerializer(read_only=True):</span><br><span class=\"line\">        id = IntegerField(label=&apos;ID&apos;, read_only=True)</span><br><span class=\"line\">        btitle = CharField(label=&apos;名称&apos;, max_length=20)</span><br><span class=\"line\">        bpub_date = DateField(allow_null=True, label=&apos;发布日期&apos;, required=False)</span><br><span class=\"line\">        bread = IntegerField(label=&apos;阅读量&apos;, max_value=2147483647, min_value=-2147483648, required=False)</span><br><span class=\"line\">        bcomment = IntegerField(label=&apos;评论量&apos;, max_value=2147483647, min_value=-2147483648, required=False)</span><br><span class=\"line\">        image = ImageField(allow_null=True, label=&apos;图片&apos;, max_length=100, required=False)</span><br></pre></td></tr></table></figure>\n<p>4) 指明显示字段，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HeroInfoSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    hbook = BookInfoSerializer()</span><br><span class=\"line\"></span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = HeroInfo</span><br><span class=\"line\">        fields = (&apos;id&apos;, &apos;hname&apos;, &apos;hgender&apos;, &apos;hcomment&apos;, &apos;hbook&apos;)</span><br></pre></td></tr></table></figure>\n<p>5) 指明只读字段</p>\n<p>可以通过read_only_fields指明只读字段，即仅用于序列化输出的字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = BookInfo</span><br><span class=\"line\">        fields = (&apos;id&apos;, &apos;btitle&apos;, &apos;bpub_date&apos;， &apos;bread&apos;, &apos;bcomment&apos;)</span><br><span class=\"line\">        read_only_fields = (&apos;id&apos;, &apos;bread&apos;, &apos;bcomment&apos;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"添加额外参数\"><a href=\"#添加额外参数\" class=\"headerlink\" title=\"添加额外参数\"></a>添加额外参数</h5><p>我们可以使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = BookInfo</span><br><span class=\"line\">        fields = (&apos;id&apos;, &apos;btitle&apos;, &apos;bpub_date&apos;, &apos;bread&apos;, &apos;bcomment&apos;)</span><br><span class=\"line\">        extra_kwargs = &#123;</span><br><span class=\"line\">            &apos;bread&apos;: &#123;&apos;min_value&apos;: 0, &apos;required&apos;: True&#125;,</span><br><span class=\"line\">            &apos;bcomment&apos;: &#123;&apos;min_value&apos;: 0, &apos;required&apos;: True&#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">BookInfoSerializer():</span><br><span class=\"line\">id = IntegerField(label=&apos;ID&apos;, read_only=True)</span><br><span class=\"line\">btitle = CharField(label=&apos;名称&apos;, max_length=20)</span><br><span class=\"line\">bpub_date = DateField(allow_null=True, label=&apos;发布日期&apos;, required=False)</span><br><span class=\"line\">bread = IntegerField(label=&apos;阅读量&apos;, max_value=2147483647, min_value=0, required=True)</span><br><span class=\"line\">bcomment = IntegerField(label=&apos;评论量&apos;, max_value=2147483647, min_value=0, required=True)</span><br></pre></td></tr></table></figure>\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><h4 id=\"DRF的Request对象\"><a href=\"#DRF的Request对象\" class=\"headerlink\" title=\"DRF的Request对象\"></a>DRF的Request对象</h4><p>1）REST framework 提供了Parser解析器，在接收到请求后会自动根据Content-Type指明的请求数据类型（如JSON、表单等）将请求数据进行parse解析，解析为类字典对象保存到Request对象中。)</p>\n<p>2）Request对象的数据是自动根据前端发送数据的格式进行解析之后的结果。</p>\n<p>3）无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据。</p>\n<h5 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h5><p>1）.data  请求体</p>\n<p>request.data 返回解析之后的请求体数据。类似于Django中标准的request.POST和request.FILES属性，但提供如下特性：</p>\n<p>包含了解析之后的文件和非文件数据<br>包含了对POST、PUT、PATCH请求方式解析后的数据<br>利用了REST framework的parsers解析器，不仅支持表单类型数据，也支持JSON数据<br>2）.query_params  查询字符串</p>\n<p>request.query_params与Django标准的request.GET相同，只是更换了更正确的名称而已。</p>\n<h4 id=\"DRF的Response对象\"><a href=\"#DRF的Response对象\" class=\"headerlink\" title=\"DRF的Response对象\"></a>DRF的Response对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">rest_framework.response.Response</span><br></pre></td></tr></table></figure>\n<p>REST framework提供了一个响应类Response，使用该类构造响应对象时，响应的具体数据内容会被转换（render渲染）成符合前端需求的类型。</p>\n<p>REST framework提供了Renderer 渲染器，用来根据请求头中的Accept（接收数据类型声明）来自动转换响应数据到对应格式。如果前端请求中未进行Accept声明，则会采用默认方式处理响应数据，我们可以通过配置来修改默认响应格式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    &apos;DEFAULT_RENDERER_CLASSES&apos;: (  # 默认响应渲染类</span><br><span class=\"line\">        &apos;rest_framework.renderers.JSONRenderer&apos;,  # json渲染器</span><br><span class=\"line\">        &apos;rest_framework.renderers.BrowsableAPIRenderer&apos;,  # 浏览API渲染器</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"构造方式\"><a href=\"#构造方式\" class=\"headerlink\" title=\"构造方式\"></a>构造方式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Response(data, status=None, template_name=None, headers=None, content_type=None)</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<p>data: 为响应准备的序列化处理后的数据；<br>status: 状态码，默认200；<br>template_name: 模板名称，如果使用HTMLRenderer 时需指明；<br>headers: 用于存放响应头信息的字典；<br>content_type: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数。</p>\n<h5 id=\"常用属性-1\"><a href=\"#常用属性-1\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h5><p>1）.data</p>\n<p>传给response对象的序列化后，但尚未render处理的数据</p>\n<p>2）.status_code</p>\n<p>状态码的数字</p>\n<p>3）.content</p>\n<p>经过render处理后的响应数据</p>\n<h4 id=\"RDF状态码\"><a href=\"#RDF状态码\" class=\"headerlink\" title=\"RDF状态码\"></a>RDF状态码</h4><p>为了方便设置状态码，REST framewrok在rest_framework.status模块中提供了常用状态码常量。</p>\n<h4 id=\"两个基类视图\"><a href=\"#两个基类视图\" class=\"headerlink\" title=\"两个基类视图\"></a>两个基类视图</h4><h5 id=\"APIView\"><a href=\"#APIView\" class=\"headerlink\" title=\"APIView\"></a>APIView</h5><p>1）支持定义的属性：</p>\n<p>authentication_classes 列表或元组，身份认证类<br>permissoin_classes 列表或元组，权限检查类<br>throttle_classes 列表或元组，流量控制类</p>\n<h5 id=\"GenericAPIViewe\"><a href=\"#GenericAPIViewe\" class=\"headerlink\" title=\"GenericAPIViewe\"></a>GenericAPIViewe</h5><p>继承自APIVIew，增加了对于列表视图和详情视图可能用到的通用支持方法。通常使用时，可搭配一个或多个Mixin扩展类。</p>\n<p>1）支持定义的属性：</p>\n<ul>\n<li>列表视图与详情视图通用：<br>queryset 列表视图的查询集<br>serializer_class 视图使用的序列化器</li>\n<li>列表视图使用：<br>pagination_class 分页控制类<br>filter_backends 过滤控制后端</li>\n<li>详情页视图使用：<br>lookup_field <strong>查询单一数据库对象时使用的条件字段，默认为’pk’</strong><br>lookup_url_kwarg 查询单一数据时URL中的参数关键字名称，默认与look_field相同)</li>\n</ul>\n<p>2）提供的方法：</p>\n<ul>\n<li>列表视图与详情视图通用：</li>\n</ul>\n<p>get_queryset(self)</p>\n<p>返回视图使用的查询集，是列表视图与详情视图获取数据的基础，默认返回queryset属性，可以重写，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_queryset(self):</span><br><span class=\"line\">    user = self.request.user</span><br><span class=\"line\">    return user.accounts.all()</span><br></pre></td></tr></table></figure>\n<p>get_serializer_class(self)</p>\n<p>返回序列化器类，默认返回serializer_class，可以重写，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_serializer_class(self):</span><br><span class=\"line\">    if self.request.user.is_staff:</span><br><span class=\"line\">        return FullAccountSerializer</span><br><span class=\"line\">    return BasicAccountSerializer</span><br></pre></td></tr></table></figure>\n<p>get_serializer(self, args, *kwargs)</p>\n<p>返回序列化器对象，被其他视图或扩展类使用，如果我们在视图中想要获取序列化器对象，可以直接调用此方法。</p>\n<p>注意，在提供序列化器对象的时候，REST framework会向对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</p>\n<ul>\n<li>详情视图使用：</li>\n</ul>\n<p>get_object(self) 返回详情视图所需的模型类数据对象，默认使用<strong>lookup_field参数</strong>来过滤queryset。 在试图中可以调用该方法获取详情信息的模型类对象。</p>\n<p>若详情访问的模型类对象不存在，会返回404。</p>\n<p>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</p>\n<h4 id=\"5个扩展类视图-一般结合GenericAPIView\"><a href=\"#5个扩展类视图-一般结合GenericAPIView\" class=\"headerlink\" title=\"5个扩展类视图,一般结合GenericAPIView\"></a>5个扩展类视图,一般结合GenericAPIView</h4><p>1) ListModelMixin</p>\n<p>列表视图扩展类，提供list(request, *args, **kwargs)方法快速实现列表视图，返回200状态码。</p>\n<p>该Mixin的list方法会对数据进行过滤和分页</p>\n<p>2) CreateModelMixin</p>\n<p>创建视图扩展类，提供create(request, *args, **kwargs)方法快速实现创建资源的视图，成功返回201状态码。</p>\n<p>如果序列化器对前端发送的数据验证失败，返回400错误</p>\n<p>3） RetrieveModelMixin</p>\n<p>详情视图扩展类，提供retrieve(request, *args, **kwargs)方法，可以快速实现返回一个存在的数据对象。</p>\n<p>如果存在，返回200， 否则返回404。</p>\n<p>源代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RetrieveModelMixin(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Retrieve a model instance.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    def retrieve(self, request, *args, **kwargs):</span><br><span class=\"line\">        # 获取对象，会检查对象的权限</span><br><span class=\"line\">        instance = self.get_object()</span><br><span class=\"line\">        # 序列化</span><br><span class=\"line\">        serializer = self.get_serializer(instance)</span><br><span class=\"line\">        return Response(serializer.data)</span><br></pre></td></tr></table></figure>\n<p>举例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookDetailView(RetrieveModelMixin, GenericAPIView):</span><br><span class=\"line\">    queryset = BookInfo.objects.all()</span><br><span class=\"line\">    serializer_class = BookInfoSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">    def get(self, request, pk):</span><br><span class=\"line\">        return self.retrieve(request)</span><br></pre></td></tr></table></figure>\n<p>4）UpdateModelMixin</p>\n<p>更新视图扩展类，提供update(request, *args, **kwargs)方法，可以快速实现更新一个存在的数据对象。</p>\n<p>同时也提供partial_update(request, *args, **kwargs)方法，可以实现局部更新。</p>\n<p>成功返回200，序列化器校验数据失败时，返回400错误。</p>\n<p>源代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class UpdateModelMixin(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Update a model instance.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    def update(self, request, *args, **kwargs):</span><br><span class=\"line\">        partial = kwargs.pop(&apos;partial&apos;, False)</span><br><span class=\"line\">        instance = self.get_object()</span><br><span class=\"line\">        serializer = self.get_serializer(instance, data=request.data, partial=partial)</span><br><span class=\"line\">        serializer.is_valid(raise_exception=True)</span><br><span class=\"line\">        self.perform_update(serializer)</span><br><span class=\"line\"></span><br><span class=\"line\">        if getattr(instance, &apos;_prefetched_objects_cache&apos;, None):</span><br><span class=\"line\">            # If &apos;prefetch_related&apos; has been applied to a queryset, we need to</span><br><span class=\"line\">            # forcibly invalidate the prefetch cache on the instance.</span><br><span class=\"line\">            instance._prefetched_objects_cache = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return Response(serializer.data)</span><br><span class=\"line\"></span><br><span class=\"line\">    def perform_update(self, serializer):</span><br><span class=\"line\">        serializer.save()</span><br><span class=\"line\"></span><br><span class=\"line\">    def partial_update(self, request, *args, **kwargs):</span><br><span class=\"line\">        kwargs[&apos;partial&apos;] = True</span><br><span class=\"line\">        return self.update(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>\n<p>5）DestroyModelMixin</p>\n<p>删除视图扩展类，提供destroy(request, *args, **kwargs)方法，可以快速实现删除一个存在的数据对象。</p>\n<p>成功返回204，不存在返回404。</p>\n<p>源代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DestroyModelMixin(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Destroy a model instance.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    def destroy(self, request, *args, **kwargs):</span><br><span class=\"line\">        instance = self.get_object()</span><br><span class=\"line\">        self.perform_destroy(instance)</span><br><span class=\"line\">        return Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class=\"line\"></span><br><span class=\"line\">    def perform_destroy(self, instance):</span><br><span class=\"line\">        instance.delete()</span><br></pre></td></tr></table></figure>\n<h4 id=\"7个可用子类视图\"><a href=\"#7个可用子类视图\" class=\"headerlink\" title=\"7个可用子类视图\"></a>7个可用子类视图</h4><p>1） CreateAPIView</p>\n<p>提供 post 方法</p>\n<p>继承自： GenericAPIView、CreateModelMixin</p>\n<p>2）ListAPIView</p>\n<p>提供 get 方法</p>\n<p>继承自：GenericAPIView、ListModelMixin</p>\n<p>3）RetireveAPIView</p>\n<p>提供 get 方法</p>\n<p>继承自: GenericAPIView、RetrieveModelMixin</p>\n<p>4）DestoryAPIView</p>\n<p>提供 delete 方法</p>\n<p>继承自：GenericAPIView、DestoryModelMixin</p>\n<p>5）UpdateAPIView</p>\n<p>提供 put 和 patch 方法</p>\n<p>继承自：GenericAPIView、UpdateModelMixin</p>\n<p>6）RetrieveUpdateAPIView</p>\n<p>提供 get、put、patch方法</p>\n<p>继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin</p>\n<p>7）RetrieveUpdateDestoryAPIView</p>\n<p>提供 get、put、patch、delete方法</p>\n<p>继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin</p>\n<h4 id=\"视图集\"><a href=\"#视图集\" class=\"headerlink\" title=\"视图集\"></a>视图集</h4><p>视图集只在使用as_view()方法的时候，才会将action动作与具体请求方式对应上。如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoViewSet(viewsets.ViewSet):</span><br><span class=\"line\"></span><br><span class=\"line\">    def list(self, request):</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    def retrieve(self, request, pk=None):</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<p>在设置路由时，我们可以如下操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^books/$&apos;, BookInfoViewSet.as_view(&#123;&apos;get&apos;:&apos;list&apos;&#125;),</span><br><span class=\"line\">    url(r&apos;^books/(?P&lt;pk&gt;\\d+)/$&apos;, BookInfoViewSet.as_view(&#123;&apos;get&apos;: &apos;retrieve&apos;&#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"ViewSetMixin\"><a href=\"#ViewSetMixin\" class=\"headerlink\" title=\"ViewSetMixin\"></a>ViewSetMixin</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class ViewSetMixin(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    This is the magic.</span><br><span class=\"line\"></span><br><span class=\"line\">    Overrides `.as_view()` so that it takes an `actions` keyword that performs</span><br><span class=\"line\">    the binding of HTTP methods to actions on the Resource.</span><br><span class=\"line\"></span><br><span class=\"line\">    For example, to create a concrete view binding the &apos;GET&apos; and &apos;POST&apos; methods</span><br><span class=\"line\">    to the &apos;list&apos; and &apos;create&apos; actions...</span><br><span class=\"line\"></span><br><span class=\"line\">    view = MyViewSet.as_view(&#123;&apos;get&apos;: &apos;list&apos;, &apos;post&apos;: &apos;create&apos;&#125;)</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"rest-framework-viewsets-ViewSet\"><a href=\"#rest-framework-viewsets-ViewSet\" class=\"headerlink\" title=\"rest_framework.viewsets.ViewSet\"></a>rest_framework.viewsets.ViewSet</h5><p>继承自 rest_framework.views.APIView 和rest_framework.viewsets.ViewSetMixin</p>\n<h5 id=\"rest-framework-viewsets-GenericViewSet\"><a href=\"#rest-framework-viewsets-GenericViewSet\" class=\"headerlink\" title=\"rest_framework.viewsets.GenericViewSet\"></a>rest_framework.viewsets.GenericViewSet</h5><p>继承自rest_framework.generic.GenericAPIView和rest_framework.viewsets.ViewSetMixin</p>\n<h5 id=\"rest-framework-viewsets-ModelViewSet\"><a href=\"#rest-framework-viewsets-ModelViewSet\" class=\"headerlink\" title=\"rest_framework.viewsets.ModelViewSet\"></a>rest_framework.viewsets.ModelViewSet</h5><p>继承自GenericAPIVIew，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。</p>\n<h5 id=\"rest-framework-viewsets-ReadOnlyModelViewSet\"><a href=\"#rest-framework-viewsets-ReadOnlyModelViewSet\" class=\"headerlink\" title=\"rest_framework.viewsets.ReadOnlyModelViewSet\"></a>rest_framework.viewsets.ReadOnlyModelViewSet</h5><p>继承自GenericAPIVIew，同时包括了ListModelMixin、RetrieveModelMixin。</p>\n<h5 id=\"视图集中自定义action动作\"><a href=\"#视图集中自定义action动作\" class=\"headerlink\" title=\"视图集中自定义action动作\"></a>视图集中自定义action动作</h5><p>在视图集中，除了上述默认的方法动作外，还可以添加自定义动作。</p>\n<p>添加自定义动作需要使用rest_framework.decorators.action装饰器。</p>\n<p>以action装饰器装饰的方法名会作为action动作名，与list、retrieve等同。</p>\n<p>action装饰器可以接收两个参数：</p>\n<p>methods: 该action支持的请求方式，列表传递<br>detail: 表示是action中要处理的是否是视图资源的对象（即是否通过url路径获取主键）<br>True 表示使用通过URL获取的主键对应的数据对象<br>False 表示不使用URL获取主键<br>举例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from rest_framework import mixins</span><br><span class=\"line\">from rest_framework.viewsets import GenericViewSet</span><br><span class=\"line\">from rest_framework.decorators import action</span><br><span class=\"line\"></span><br><span class=\"line\">class BookInfoViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):</span><br><span class=\"line\">    queryset = BookInfo.objects.all()</span><br><span class=\"line\">    serializer_class = BookInfoSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">    detail为False 表示不需要处理具体的BookInfo对象</span><br><span class=\"line\">    @action(methods=[&apos;get&apos;], detail=False)</span><br><span class=\"line\">    def latest(self, request):</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        返回最新的图书信息</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        book = BookInfo.objects.latest(&apos;id&apos;)</span><br><span class=\"line\">        serializer = self.get_serializer(book)</span><br><span class=\"line\">        return Response(serializer.data)</span><br><span class=\"line\"></span><br><span class=\"line\">     detail为True，表示要处理具体与pk主键对应的BookInfo对象</span><br><span class=\"line\">    @action(methods=[&apos;put&apos;], detail=True)</span><br><span class=\"line\">    def read(self, request, pk):</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        修改图书的阅读量数据</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        book = self.get_object()</span><br><span class=\"line\">        book.bread = request.data.get(&apos;read&apos;)</span><br><span class=\"line\">        book.save()</span><br><span class=\"line\">        serializer = self.get_serializer(book)</span><br><span class=\"line\">        return Response(serializer.data)</span><br></pre></td></tr></table></figure>\n<p>url的定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^books/$&apos;, views.BookInfoViewSet.as_view(&#123;&apos;get&apos;: &apos;list&apos;&#125;)),</span><br><span class=\"line\">    url(r&apos;^books/latest/$&apos;, views.BookInfoViewSet.as_view(&#123;&apos;get&apos;: &apos;latest&apos;&#125;)),</span><br><span class=\"line\">    url(r&apos;^books/(?P&lt;pk&gt;\\d+)/$&apos;, views.BookInfoViewSet.as_view(&#123;&apos;get&apos;: &apos;retrieve&apos;&#125;)),</span><br><span class=\"line\">    url(r&apos;^books/(?P&lt;pk&gt;\\d+)/read/$&apos;, views.BookInfoViewSet.as_view(&#123;&apos;put&apos;: &apos;read&apos;&#125;)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p>对于视图集ViewSet，我们除了可以自己手动指明请求方式与动作action之间的对应关系外，还可以使用Routers来帮助我们快速实现路由信息。</p>\n<p>REST framework提供了两个router</p>\n<p>SimpleRouter<br>DefaultRouter</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><p>1） 创建router对象，并注册视图集，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from rest_framework import routers</span><br><span class=\"line\"></span><br><span class=\"line\">router = routers.SimpleRouter()</span><br><span class=\"line\">router.register(r&apos;books&apos;, BookInfoViewSet, base_name=&apos;book&apos;)</span><br></pre></td></tr></table></figure>\n<p>register(prefix, viewset, base_name)</p>\n<p>prefix 该视图集的路由前缀<br>viewset 视图集<br>base_name 路由名称的前缀<br>如上述代码会形成的路由如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^books/$    name: book-list</span><br><span class=\"line\">^books/&#123;pk&#125;/$   name: book-detail</span><br></pre></td></tr></table></figure>\n<p>2）添加路由数据</p>\n<p>可以有两种方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br><span class=\"line\">urlpatterns += router.urls</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    url(r&apos;^&apos;, include(router.urls))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"视图集中包含附加action的\"><a href=\"#视图集中包含附加action的\" class=\"headerlink\" title=\"视图集中包含附加action的\"></a>视图集中包含附加action的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):</span><br><span class=\"line\">    queryset = BookInfo.objects.all()</span><br><span class=\"line\">    serializer_class = BookInfoSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">    @action(methods=[&apos;get&apos;], detail=False)</span><br><span class=\"line\">    def latest(self, request):</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    @action(methods=[&apos;put&apos;], detail=True)</span><br><span class=\"line\">    def read(self, request, pk):</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<p>此视图集会形成的路由：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^books/latest/$    name: book-latest</span><br><span class=\"line\">^books/&#123;pk&#125;/read/$  name: book-read</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Django REST Framework是基于Django进行的二次封装，提供快速序列化以及丰富的视图，实现快速的符合RESTful 风格的API开发。<br>","more":"</p>\n<h3 id=\"RESTful设计方法\"><a href=\"#RESTful设计方法\" class=\"headerlink\" title=\"RESTful设计方法\"></a>RESTful设计方法</h3><ul>\n<li><p>域名</p>\n</li>\n<li><p>版本</p>\n</li>\n<li><p>路径</p>\n</li>\n</ul>\n<p>(1) 资源作为网址，只能有名词，不能有动词，而且所用的名词往往与数据库的表名对应。</p>\n<p>(2) API中的名词应该使用复数。无论子资源或者所有资源。</p>\n<ul>\n<li>HTTP动词</li>\n</ul>\n<p>常用的HTTP动词有下面四个（括号里是对应的SQL命令）。</p>\n<p>GET（SELECT）：从服务器取出资源（一项或多项）。<br>POST（CREATE）：在服务器新建一个资源。<br>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。<br>DELETE（DELETE）：从服务器删除资源。<br>还有三个不常用的HTTP动词。</p>\n<p>PATCH（UPDATE）：在服务器更新(更新)资源（客户端提供改变的属性）。<br>HEAD：获取资源的元数据。<br>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</p>\n<ul>\n<li>过滤信息</li>\n</ul>\n<p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果</p>\n<p>?limit=10：指定返回记录的数量<br>?offset=10：指定返回记录的开始位置。<br>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。<br>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。<br>?animal_type_id=1：指定筛选条件</p>\n<ul>\n<li>状态码</li>\n</ul>\n<p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p>\n<p>200 OK - [GET]：服务器成功返回用户请求的数据<br>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。<br>202 Accepted - [<em>]：表示一个请求已经进入后台排队（异步任务）<br>204 NO CONTENT - [DELETE]：用户删除数据成功。<br>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作<br>401 Unauthorized - [</em>]：表示用户没有权限（令牌、用户名、密码错误）。<br>403 Forbidden - [<em>] 表示用户得到授权（与401错误相对），但是访问是被禁止的。<br>404 NOT FOUND - [</em>]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。<br>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。<br>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。<br>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。<br>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</p>\n<ul>\n<li>错误处理</li>\n</ul>\n<p>如果状态码是4xx，服务器就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    error: &quot;Invalid API key&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>返回结果</li>\n</ul>\n<p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>\n<p>GET /collection：返回资源对象的列表（数组）<br>GET /collection/resource：返回单个资源对象<br>POST /collection：返回新生成的资源对象<br>PUT /collection/resource：返回完整的资源对象<br>PATCH /collection/resource：返回完整的资源对象<br>DELETE /collection/resource：返回一个空文档</p>\n<ul>\n<li><p>超媒体</p>\n</li>\n<li><p>数据格式</p>\n</li>\n</ul>\n<p>一般返回json格式数据</p>\n<h4 id=\"RESTful开发核心任务\"><a href=\"#RESTful开发核心任务\" class=\"headerlink\" title=\"RESTful开发核心任务\"></a>RESTful开发核心任务</h4><p>将请求的数据（如JSON格式）转换为模型类对象<br>操作数据库<br>将模型类对象转换为响应的数据（如JSON格式）</p>\n<p>简而言之，我们可以将序列化理解为：</p>\n<p>将程序中的一个数据结构类型转换为其他格式（字典、JSON、XML等），例如将Django中的模型类对象装换为JSON字符串，这个转换过程我们称为序列化。</p>\n<p>反之，将其他格式（字典、JSON、XML等）转换为程序中的数据，例如将JSON字符串转换为Django中的模型类对象，这个过程我们称为反序列化。</p>\n<h3 id=\"工程搭建\"><a href=\"#工程搭建\" class=\"headerlink\" title=\"工程搭建\"></a>工程搭建</h3><p>1.安装DRF</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install djangorestframework</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>注册rest_framework应用</li>\n</ol>\n<p>我们利用在Django框架学习中创建的demo工程，在settings.py的INSTALLED_APPS中添加’rest_framework’</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &apos;rest_framework&apos;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><h4 id=\"rest-framework-serializers-Serializer\"><a href=\"#rest-framework-serializers-Serializer\" class=\"headerlink\" title=\"rest_framework.serializers.Serializer\"></a>rest_framework.serializers.Serializer</h4><ul>\n<li>定义序列化器</li>\n</ul>\n<p>继承 rest_framework.serializers.Serializer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class BookInfoSerializer(serializers.Serializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    id = serializers.IntegerField(label=&apos;ID&apos;, read_only=True)</span><br><span class=\"line\">    btitle = serializers.CharField(label=&apos;名称&apos;, max_length=20)</span><br><span class=\"line\">    bpub_date = serializers.DateField(label=&apos;发布日期&apos;, required=False)</span><br><span class=\"line\">    bread = serializers.IntegerField(label=&apos;阅读量&apos;, required=False)</span><br><span class=\"line\">    bcomment = serializers.IntegerField(label=&apos;评论量&apos;, required=False)</span><br><span class=\"line\">    image = serializers.ImageField(label=&apos;图片&apos;, required=False)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>构造序列化器对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from booktest.serializers import BookInfoSerializer</span><br><span class=\"line\">book_qs = BookInfo.objects.all()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">serializer = BookInfoSerializer(book_qs, many=True)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看序列化器对象的数据</li>\n</ul>\n<p>serializer.data</p>\n<h5 id=\"关联对象序列化\"><a href=\"#关联对象序列化\" class=\"headerlink\" title=\"关联对象序列化\"></a>关联对象序列化</h5><ul>\n<li>PrimaryKeyRelatedField</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serializers.PrimaryKeyRelatedField(label=&apos;图书&apos;, queryset=BookInfo.objects.all()[,read_only=True])</span><br><span class=\"line\">包含read_only=True参数时，该字段将不能用作反序列化使用</span><br><span class=\"line\">包含queryset参数时，将被用作反序列化时参数校验使用</span><br></pre></td></tr></table></figure>\n<ul>\n<li>StringRelatedField</li>\n</ul>\n<p>此字段将被序列化为关联对象的字符串表示方式（即<strong>str</strong>方法的返回值）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hbook = serializers.StringRelatedField(label=&apos;图书&apos;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用关联对象的序列化器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hbook = BookInfoSerializer()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>HyperlinkedRelatedField</li>\n</ul>\n<p>此字段将被序列化为获取关联对象数据的接口链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hbook = serializers.HyperlinkedRelatedField(label=&apos;图书&apos;, read_only=True, view_name=&apos;books-detail&apos;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>SlugRelatedField</li>\n</ul>\n<p>此字段将被序列化为关联对象的指定字段数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hbook = serializers.SlugRelatedField(label=&apos;图书&apos;, read_only=True, slug_field=&apos;bpub_date&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><p>使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。</p>\n<p>在获取反序列化的数据前，必须调用is_valid()方法进行验证，验证成功返回True，否则返回False。</p>\n<p>验证失败，可以通过序列化器对象的errors属性获取错误信息，返回字典，包含了字段和字段的错误。如果是非字段错误，可以通过修改REST framework配置中的NON_FIELD_ERRORS_KEY来控制错误字典中的键名。</p>\n<p>验证成功，可以通过序列化器对象的validated_data属性获取数据。</p>\n<p>在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><h5 id=\"序列化器字段验证\"><a href=\"#序列化器字段验证\" class=\"headerlink\" title=\"序列化器字段验证\"></a>序列化器字段验证</h5><p>通过构造序列化器对象，并将要反序列化的数据传递给data构造参数，进而进行验证</p>\n<p>data = {‘btitle’: ‘python’}<br>serializer = BookInfoSerializer(data=data)<br>serializer.is_valid(raise_exception=True)  # True<br>serializer.errors  # {}<br>serializer.validated_data  #  OrderedDict([(‘btitle’, ‘python’)])<br>is_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递raise_exception=True参数开启，REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。</p>\n<h5 id=\"自定义验证行为\"><a href=\"#自定义验证行为\" class=\"headerlink\" title=\"自定义验证行为\"></a>自定义验证行为</h5><h6 id=\"validate-lt-field-name-gt-单个字段验证\"><a href=\"#validate-lt-field-name-gt-单个字段验证\" class=\"headerlink\" title=\"validate_&lt;field_name&gt;  单个字段验证\"></a>validate_&lt;field_name&gt;  单个字段验证</h6><p>对&lt;field_name&gt;字段进行验证，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.Serializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate_btitle(self, value):</span><br><span class=\"line\">        if &apos;django&apos; not in value.lower():</span><br><span class=\"line\">            raise serializers.ValidationError(&quot;图书不是关于Django的&quot;)</span><br><span class=\"line\">        return value</span><br></pre></td></tr></table></figure>\n<h6 id=\"validate-多个字段进行验证\"><a href=\"#validate-多个字段进行验证\" class=\"headerlink\" title=\"validate  多个字段进行验证\"></a>validate  多个字段进行验证</h6><p>在序列化器中需要同时对多个字段进行比较验证时，可以定义validate方法来验证，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.Serializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate(self, attrs):</span><br><span class=\"line\">        bread = attrs[&apos;bread&apos;]</span><br><span class=\"line\">        bcomment = attrs[&apos;bcomment&apos;]</span><br><span class=\"line\">        if bread &lt; bcomment:</span><br><span class=\"line\">            raise serializers.ValidationError(&apos;阅读量小于评论量&apos;)</span><br><span class=\"line\">        return attrs</span><br></pre></td></tr></table></figure>\n<h6 id=\"validators-在序列化器的字段添加验证\"><a href=\"#validators-在序列化器的字段添加验证\" class=\"headerlink\" title=\"validators  在序列化器的字段添加验证\"></a>validators  在序列化器的字段添加验证</h6><p>在字段中添加validators选项参数，也可以补充验证行为</p>\n<p>validators = [func]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def about_django(value):</span><br><span class=\"line\">    if &apos;django&apos; not in value.lower():</span><br><span class=\"line\">        raise serializers.ValidationError(&quot;图书不是关于Django的&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">class BookInfoSerializer(serializers.Serializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    id = serializers.IntegerField(label=&apos;ID&apos;, read_only=True)</span><br><span class=\"line\">    btitle = serializers.CharField(label=&apos;名称&apos;, max_length=20, validators=[about_django])</span><br><span class=\"line\">    bpub_date = serializers.DateField(label=&apos;发布日期&apos;, required=False)</span><br><span class=\"line\">    bread = serializers.IntegerField(label=&apos;阅读量&apos;, required=False)</span><br><span class=\"line\">    bcomment = serializers.IntegerField(label=&apos;评论量&apos;, required=False)</span><br><span class=\"line\">    image = serializers.ImageField(label=&apos;图片&apos;, required=False)</span><br></pre></td></tr></table></figure>\n<h4 id=\"保存\"><a href=\"#保存\" class=\"headerlink\" title=\"保存\"></a>保存</h4><p>如果在验证成功后，想要基于validated_data完成数据对象的创建，可以通过在序列化器实现create()和update()两个方法来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.Serializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    def create(self, validated_data):</span><br><span class=\"line\">        &quot;&quot;&quot;新建&quot;&quot;&quot;</span><br><span class=\"line\">        return BookInfo.objects.create(**validated_data)</span><br><span class=\"line\"></span><br><span class=\"line\">    def update(self, instance, validated_data):</span><br><span class=\"line\">        &quot;&quot;&quot;更新，instance为要更新的对象实例&quot;&quot;&quot;</span><br><span class=\"line\">        instance.btitle = validated_data.get(&apos;btitle&apos;, instance.btitle)</span><br><span class=\"line\">        instance.bpub_date = validated_data.get(&apos;bpub_date&apos;, instance.bpub_date)</span><br><span class=\"line\">        instance.bread = validated_data.get(&apos;bread&apos;, instance.bread)</span><br><span class=\"line\">        instance.bcomment = validated_data.get(&apos;bcomment&apos;, instance.bcomment)</span><br><span class=\"line\">        instance.save()</span><br><span class=\"line\">        return instance</span><br></pre></td></tr></table></figure>\n<p>实现了上述两个方法后，在反序列化数据的时候，就可以通过save()方法返回一个数据对象实例了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book = serializer.save()</span><br></pre></td></tr></table></figure>\n<p>如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时候，create()被调用，相反，如果传递了instance实例，则调用save()方法的时候，update()被调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from db.serializers import BookInfoSerializer</span><br><span class=\"line\">data = &#123;&apos;btitle&apos;: &apos;封神演义&apos;&#125;</span><br><span class=\"line\">serializer = BookInfoSerializer(data=data)</span><br><span class=\"line\">serializer.is_valid()  # True</span><br><span class=\"line\">serializer.save()  # &lt;BookInfo: 封神演义&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">from db.models import BookInfo</span><br><span class=\"line\">book = BookInfo.objects.get(id=2)</span><br><span class=\"line\">data = &#123;&apos;btitle&apos;: &apos;倚天剑&apos;&#125;</span><br><span class=\"line\">serializer = BookInfoSerializer(book, data=data)</span><br><span class=\"line\">serializer.is_valid()  # True</span><br><span class=\"line\">serializer.save()  # &lt;BookInfo: 倚天剑&gt;</span><br><span class=\"line\">book.btitle  # &apos;倚天剑&apos;</span><br></pre></td></tr></table></figure>\n<p>两点说明：</p>\n<p>1） 在对序列化器进行save()保存时，可以额外传递数据，这些数据可以在create()和update()中的validated_data参数获取到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serializer.save(owner=request.user)</span><br></pre></td></tr></table></figure>\n<p>2）默认序列化器必须传递所有required的字段，否则会抛出验证异常。但是我们可以使用<strong>partial参数来允许部分字段更新</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Update `comment` with partial data</span><br><span class=\"line\">serializer = CommentSerializer(comment, data=&#123;&apos;content&apos;: u&apos;foo bar&apos;&#125;, partial=True)</span><br></pre></td></tr></table></figure>\n<h4 id=\"模型类序列化器ModelSerializer\"><a href=\"#模型类序列化器ModelSerializer\" class=\"headerlink\" title=\"模型类序列化器ModelSerializer\"></a>模型类序列化器ModelSerializer</h4><p>如果我们想要使用序列化器对应的是<strong>Django的模型类</strong>，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。</p>\n<p>ModelSerializer与常规的Serializer相同，但提供了：</p>\n<p>基于模型类自动生成一系列字段<br>基于模型类自动为Serializer生成validators，比如unique_together<br>包含默认的create()和update()的实现</p>\n<h5 id=\"定义模型类序列化器\"><a href=\"#定义模型类序列化器\" class=\"headerlink\" title=\"定义模型类序列化器\"></a>定义模型类序列化器</h5><p>比如我们创建一个BookInfoSerializer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = BookInfo</span><br><span class=\"line\">        fields = &apos;__all__&apos;   或者使用元组  (&apos;btitle&apos;, &apos;bpub_date&apos;)</span><br></pre></td></tr></table></figure>\n<p>model 指明参照哪个模型类<br>fields 指明为<strong>模型类的哪些字段生成</strong></p>\n<h5 id=\"指定字段\"><a href=\"#指定字段\" class=\"headerlink\" title=\"指定字段\"></a>指定字段</h5><p>1) 使用fields来明确字段，<strong>all</strong>表名包含所有字段，也可以写明具体哪些字段，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = BookInfo</span><br><span class=\"line\">        fields = (&apos;id&apos;, &apos;btitle&apos;, &apos;bpub_date&apos;)  元组类型</span><br></pre></td></tr></table></figure>\n<p>2) 使用exclude可以明确排除掉哪些字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = BookInfo</span><br><span class=\"line\">        exclude = (&apos;image&apos;,)  元组类型</span><br></pre></td></tr></table></figure>\n<p>3) 默认ModelSerializer使用主键作为关联字段，但是我们可以使用depth来简单的生成嵌套表示，depth应该是整数，表明嵌套的层级数量。如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HeroInfoSerializer2(serializers.ModelSerializer):</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = HeroInfo</span><br><span class=\"line\">        fields = &apos;__all__&apos;</span><br><span class=\"line\">        depth = 1</span><br></pre></td></tr></table></figure>\n<p>形成的序列化器如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HeroInfoSerializer():</span><br><span class=\"line\">    id = IntegerField(label=&apos;ID&apos;, read_only=True)</span><br><span class=\"line\">    hname = CharField(label=&apos;名称&apos;, max_length=20)</span><br><span class=\"line\">    hgender = ChoiceField(choices=((0, &apos;male&apos;), (1, &apos;female&apos;)), label=&apos;性别&apos;, required=False, validators=[&lt;django.core.valators.MinValueValidator object&gt;, &lt;django.core.validators.MaxValueValidator object&gt;])</span><br><span class=\"line\">    hcomment = CharField(allow_null=True, label=&apos;描述信息&apos;, max_length=200, required=False)</span><br><span class=\"line\">    hbook = NestedSerializer(read_only=True):</span><br><span class=\"line\">        id = IntegerField(label=&apos;ID&apos;, read_only=True)</span><br><span class=\"line\">        btitle = CharField(label=&apos;名称&apos;, max_length=20)</span><br><span class=\"line\">        bpub_date = DateField(allow_null=True, label=&apos;发布日期&apos;, required=False)</span><br><span class=\"line\">        bread = IntegerField(label=&apos;阅读量&apos;, max_value=2147483647, min_value=-2147483648, required=False)</span><br><span class=\"line\">        bcomment = IntegerField(label=&apos;评论量&apos;, max_value=2147483647, min_value=-2147483648, required=False)</span><br><span class=\"line\">        image = ImageField(allow_null=True, label=&apos;图片&apos;, max_length=100, required=False)</span><br></pre></td></tr></table></figure>\n<p>4) 指明显示字段，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HeroInfoSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    hbook = BookInfoSerializer()</span><br><span class=\"line\"></span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = HeroInfo</span><br><span class=\"line\">        fields = (&apos;id&apos;, &apos;hname&apos;, &apos;hgender&apos;, &apos;hcomment&apos;, &apos;hbook&apos;)</span><br></pre></td></tr></table></figure>\n<p>5) 指明只读字段</p>\n<p>可以通过read_only_fields指明只读字段，即仅用于序列化输出的字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = BookInfo</span><br><span class=\"line\">        fields = (&apos;id&apos;, &apos;btitle&apos;, &apos;bpub_date&apos;， &apos;bread&apos;, &apos;bcomment&apos;)</span><br><span class=\"line\">        read_only_fields = (&apos;id&apos;, &apos;bread&apos;, &apos;bcomment&apos;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"添加额外参数\"><a href=\"#添加额外参数\" class=\"headerlink\" title=\"添加额外参数\"></a>添加额外参数</h5><p>我们可以使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoSerializer(serializers.ModelSerializer):</span><br><span class=\"line\">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model = BookInfo</span><br><span class=\"line\">        fields = (&apos;id&apos;, &apos;btitle&apos;, &apos;bpub_date&apos;, &apos;bread&apos;, &apos;bcomment&apos;)</span><br><span class=\"line\">        extra_kwargs = &#123;</span><br><span class=\"line\">            &apos;bread&apos;: &#123;&apos;min_value&apos;: 0, &apos;required&apos;: True&#125;,</span><br><span class=\"line\">            &apos;bcomment&apos;: &#123;&apos;min_value&apos;: 0, &apos;required&apos;: True&#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">BookInfoSerializer():</span><br><span class=\"line\">id = IntegerField(label=&apos;ID&apos;, read_only=True)</span><br><span class=\"line\">btitle = CharField(label=&apos;名称&apos;, max_length=20)</span><br><span class=\"line\">bpub_date = DateField(allow_null=True, label=&apos;发布日期&apos;, required=False)</span><br><span class=\"line\">bread = IntegerField(label=&apos;阅读量&apos;, max_value=2147483647, min_value=0, required=True)</span><br><span class=\"line\">bcomment = IntegerField(label=&apos;评论量&apos;, max_value=2147483647, min_value=0, required=True)</span><br></pre></td></tr></table></figure>\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><h4 id=\"DRF的Request对象\"><a href=\"#DRF的Request对象\" class=\"headerlink\" title=\"DRF的Request对象\"></a>DRF的Request对象</h4><p>1）REST framework 提供了Parser解析器，在接收到请求后会自动根据Content-Type指明的请求数据类型（如JSON、表单等）将请求数据进行parse解析，解析为类字典对象保存到Request对象中。)</p>\n<p>2）Request对象的数据是自动根据前端发送数据的格式进行解析之后的结果。</p>\n<p>3）无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据。</p>\n<h5 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h5><p>1）.data  请求体</p>\n<p>request.data 返回解析之后的请求体数据。类似于Django中标准的request.POST和request.FILES属性，但提供如下特性：</p>\n<p>包含了解析之后的文件和非文件数据<br>包含了对POST、PUT、PATCH请求方式解析后的数据<br>利用了REST framework的parsers解析器，不仅支持表单类型数据，也支持JSON数据<br>2）.query_params  查询字符串</p>\n<p>request.query_params与Django标准的request.GET相同，只是更换了更正确的名称而已。</p>\n<h4 id=\"DRF的Response对象\"><a href=\"#DRF的Response对象\" class=\"headerlink\" title=\"DRF的Response对象\"></a>DRF的Response对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">rest_framework.response.Response</span><br></pre></td></tr></table></figure>\n<p>REST framework提供了一个响应类Response，使用该类构造响应对象时，响应的具体数据内容会被转换（render渲染）成符合前端需求的类型。</p>\n<p>REST framework提供了Renderer 渲染器，用来根据请求头中的Accept（接收数据类型声明）来自动转换响应数据到对应格式。如果前端请求中未进行Accept声明，则会采用默认方式处理响应数据，我们可以通过配置来修改默认响应格式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    &apos;DEFAULT_RENDERER_CLASSES&apos;: (  # 默认响应渲染类</span><br><span class=\"line\">        &apos;rest_framework.renderers.JSONRenderer&apos;,  # json渲染器</span><br><span class=\"line\">        &apos;rest_framework.renderers.BrowsableAPIRenderer&apos;,  # 浏览API渲染器</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"构造方式\"><a href=\"#构造方式\" class=\"headerlink\" title=\"构造方式\"></a>构造方式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Response(data, status=None, template_name=None, headers=None, content_type=None)</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<p>data: 为响应准备的序列化处理后的数据；<br>status: 状态码，默认200；<br>template_name: 模板名称，如果使用HTMLRenderer 时需指明；<br>headers: 用于存放响应头信息的字典；<br>content_type: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数。</p>\n<h5 id=\"常用属性-1\"><a href=\"#常用属性-1\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h5><p>1）.data</p>\n<p>传给response对象的序列化后，但尚未render处理的数据</p>\n<p>2）.status_code</p>\n<p>状态码的数字</p>\n<p>3）.content</p>\n<p>经过render处理后的响应数据</p>\n<h4 id=\"RDF状态码\"><a href=\"#RDF状态码\" class=\"headerlink\" title=\"RDF状态码\"></a>RDF状态码</h4><p>为了方便设置状态码，REST framewrok在rest_framework.status模块中提供了常用状态码常量。</p>\n<h4 id=\"两个基类视图\"><a href=\"#两个基类视图\" class=\"headerlink\" title=\"两个基类视图\"></a>两个基类视图</h4><h5 id=\"APIView\"><a href=\"#APIView\" class=\"headerlink\" title=\"APIView\"></a>APIView</h5><p>1）支持定义的属性：</p>\n<p>authentication_classes 列表或元组，身份认证类<br>permissoin_classes 列表或元组，权限检查类<br>throttle_classes 列表或元组，流量控制类</p>\n<h5 id=\"GenericAPIViewe\"><a href=\"#GenericAPIViewe\" class=\"headerlink\" title=\"GenericAPIViewe\"></a>GenericAPIViewe</h5><p>继承自APIVIew，增加了对于列表视图和详情视图可能用到的通用支持方法。通常使用时，可搭配一个或多个Mixin扩展类。</p>\n<p>1）支持定义的属性：</p>\n<ul>\n<li>列表视图与详情视图通用：<br>queryset 列表视图的查询集<br>serializer_class 视图使用的序列化器</li>\n<li>列表视图使用：<br>pagination_class 分页控制类<br>filter_backends 过滤控制后端</li>\n<li>详情页视图使用：<br>lookup_field <strong>查询单一数据库对象时使用的条件字段，默认为’pk’</strong><br>lookup_url_kwarg 查询单一数据时URL中的参数关键字名称，默认与look_field相同)</li>\n</ul>\n<p>2）提供的方法：</p>\n<ul>\n<li>列表视图与详情视图通用：</li>\n</ul>\n<p>get_queryset(self)</p>\n<p>返回视图使用的查询集，是列表视图与详情视图获取数据的基础，默认返回queryset属性，可以重写，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_queryset(self):</span><br><span class=\"line\">    user = self.request.user</span><br><span class=\"line\">    return user.accounts.all()</span><br></pre></td></tr></table></figure>\n<p>get_serializer_class(self)</p>\n<p>返回序列化器类，默认返回serializer_class，可以重写，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_serializer_class(self):</span><br><span class=\"line\">    if self.request.user.is_staff:</span><br><span class=\"line\">        return FullAccountSerializer</span><br><span class=\"line\">    return BasicAccountSerializer</span><br></pre></td></tr></table></figure>\n<p>get_serializer(self, args, *kwargs)</p>\n<p>返回序列化器对象，被其他视图或扩展类使用，如果我们在视图中想要获取序列化器对象，可以直接调用此方法。</p>\n<p>注意，在提供序列化器对象的时候，REST framework会向对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</p>\n<ul>\n<li>详情视图使用：</li>\n</ul>\n<p>get_object(self) 返回详情视图所需的模型类数据对象，默认使用<strong>lookup_field参数</strong>来过滤queryset。 在试图中可以调用该方法获取详情信息的模型类对象。</p>\n<p>若详情访问的模型类对象不存在，会返回404。</p>\n<p>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</p>\n<h4 id=\"5个扩展类视图-一般结合GenericAPIView\"><a href=\"#5个扩展类视图-一般结合GenericAPIView\" class=\"headerlink\" title=\"5个扩展类视图,一般结合GenericAPIView\"></a>5个扩展类视图,一般结合GenericAPIView</h4><p>1) ListModelMixin</p>\n<p>列表视图扩展类，提供list(request, *args, **kwargs)方法快速实现列表视图，返回200状态码。</p>\n<p>该Mixin的list方法会对数据进行过滤和分页</p>\n<p>2) CreateModelMixin</p>\n<p>创建视图扩展类，提供create(request, *args, **kwargs)方法快速实现创建资源的视图，成功返回201状态码。</p>\n<p>如果序列化器对前端发送的数据验证失败，返回400错误</p>\n<p>3） RetrieveModelMixin</p>\n<p>详情视图扩展类，提供retrieve(request, *args, **kwargs)方法，可以快速实现返回一个存在的数据对象。</p>\n<p>如果存在，返回200， 否则返回404。</p>\n<p>源代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RetrieveModelMixin(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Retrieve a model instance.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    def retrieve(self, request, *args, **kwargs):</span><br><span class=\"line\">        # 获取对象，会检查对象的权限</span><br><span class=\"line\">        instance = self.get_object()</span><br><span class=\"line\">        # 序列化</span><br><span class=\"line\">        serializer = self.get_serializer(instance)</span><br><span class=\"line\">        return Response(serializer.data)</span><br></pre></td></tr></table></figure>\n<p>举例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookDetailView(RetrieveModelMixin, GenericAPIView):</span><br><span class=\"line\">    queryset = BookInfo.objects.all()</span><br><span class=\"line\">    serializer_class = BookInfoSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">    def get(self, request, pk):</span><br><span class=\"line\">        return self.retrieve(request)</span><br></pre></td></tr></table></figure>\n<p>4）UpdateModelMixin</p>\n<p>更新视图扩展类，提供update(request, *args, **kwargs)方法，可以快速实现更新一个存在的数据对象。</p>\n<p>同时也提供partial_update(request, *args, **kwargs)方法，可以实现局部更新。</p>\n<p>成功返回200，序列化器校验数据失败时，返回400错误。</p>\n<p>源代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class UpdateModelMixin(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Update a model instance.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    def update(self, request, *args, **kwargs):</span><br><span class=\"line\">        partial = kwargs.pop(&apos;partial&apos;, False)</span><br><span class=\"line\">        instance = self.get_object()</span><br><span class=\"line\">        serializer = self.get_serializer(instance, data=request.data, partial=partial)</span><br><span class=\"line\">        serializer.is_valid(raise_exception=True)</span><br><span class=\"line\">        self.perform_update(serializer)</span><br><span class=\"line\"></span><br><span class=\"line\">        if getattr(instance, &apos;_prefetched_objects_cache&apos;, None):</span><br><span class=\"line\">            # If &apos;prefetch_related&apos; has been applied to a queryset, we need to</span><br><span class=\"line\">            # forcibly invalidate the prefetch cache on the instance.</span><br><span class=\"line\">            instance._prefetched_objects_cache = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return Response(serializer.data)</span><br><span class=\"line\"></span><br><span class=\"line\">    def perform_update(self, serializer):</span><br><span class=\"line\">        serializer.save()</span><br><span class=\"line\"></span><br><span class=\"line\">    def partial_update(self, request, *args, **kwargs):</span><br><span class=\"line\">        kwargs[&apos;partial&apos;] = True</span><br><span class=\"line\">        return self.update(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>\n<p>5）DestroyModelMixin</p>\n<p>删除视图扩展类，提供destroy(request, *args, **kwargs)方法，可以快速实现删除一个存在的数据对象。</p>\n<p>成功返回204，不存在返回404。</p>\n<p>源代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DestroyModelMixin(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Destroy a model instance.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    def destroy(self, request, *args, **kwargs):</span><br><span class=\"line\">        instance = self.get_object()</span><br><span class=\"line\">        self.perform_destroy(instance)</span><br><span class=\"line\">        return Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class=\"line\"></span><br><span class=\"line\">    def perform_destroy(self, instance):</span><br><span class=\"line\">        instance.delete()</span><br></pre></td></tr></table></figure>\n<h4 id=\"7个可用子类视图\"><a href=\"#7个可用子类视图\" class=\"headerlink\" title=\"7个可用子类视图\"></a>7个可用子类视图</h4><p>1） CreateAPIView</p>\n<p>提供 post 方法</p>\n<p>继承自： GenericAPIView、CreateModelMixin</p>\n<p>2）ListAPIView</p>\n<p>提供 get 方法</p>\n<p>继承自：GenericAPIView、ListModelMixin</p>\n<p>3）RetireveAPIView</p>\n<p>提供 get 方法</p>\n<p>继承自: GenericAPIView、RetrieveModelMixin</p>\n<p>4）DestoryAPIView</p>\n<p>提供 delete 方法</p>\n<p>继承自：GenericAPIView、DestoryModelMixin</p>\n<p>5）UpdateAPIView</p>\n<p>提供 put 和 patch 方法</p>\n<p>继承自：GenericAPIView、UpdateModelMixin</p>\n<p>6）RetrieveUpdateAPIView</p>\n<p>提供 get、put、patch方法</p>\n<p>继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin</p>\n<p>7）RetrieveUpdateDestoryAPIView</p>\n<p>提供 get、put、patch、delete方法</p>\n<p>继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin</p>\n<h4 id=\"视图集\"><a href=\"#视图集\" class=\"headerlink\" title=\"视图集\"></a>视图集</h4><p>视图集只在使用as_view()方法的时候，才会将action动作与具体请求方式对应上。如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoViewSet(viewsets.ViewSet):</span><br><span class=\"line\"></span><br><span class=\"line\">    def list(self, request):</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    def retrieve(self, request, pk=None):</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<p>在设置路由时，我们可以如下操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^books/$&apos;, BookInfoViewSet.as_view(&#123;&apos;get&apos;:&apos;list&apos;&#125;),</span><br><span class=\"line\">    url(r&apos;^books/(?P&lt;pk&gt;\\d+)/$&apos;, BookInfoViewSet.as_view(&#123;&apos;get&apos;: &apos;retrieve&apos;&#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"ViewSetMixin\"><a href=\"#ViewSetMixin\" class=\"headerlink\" title=\"ViewSetMixin\"></a>ViewSetMixin</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class ViewSetMixin(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    This is the magic.</span><br><span class=\"line\"></span><br><span class=\"line\">    Overrides `.as_view()` so that it takes an `actions` keyword that performs</span><br><span class=\"line\">    the binding of HTTP methods to actions on the Resource.</span><br><span class=\"line\"></span><br><span class=\"line\">    For example, to create a concrete view binding the &apos;GET&apos; and &apos;POST&apos; methods</span><br><span class=\"line\">    to the &apos;list&apos; and &apos;create&apos; actions...</span><br><span class=\"line\"></span><br><span class=\"line\">    view = MyViewSet.as_view(&#123;&apos;get&apos;: &apos;list&apos;, &apos;post&apos;: &apos;create&apos;&#125;)</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"rest-framework-viewsets-ViewSet\"><a href=\"#rest-framework-viewsets-ViewSet\" class=\"headerlink\" title=\"rest_framework.viewsets.ViewSet\"></a>rest_framework.viewsets.ViewSet</h5><p>继承自 rest_framework.views.APIView 和rest_framework.viewsets.ViewSetMixin</p>\n<h5 id=\"rest-framework-viewsets-GenericViewSet\"><a href=\"#rest-framework-viewsets-GenericViewSet\" class=\"headerlink\" title=\"rest_framework.viewsets.GenericViewSet\"></a>rest_framework.viewsets.GenericViewSet</h5><p>继承自rest_framework.generic.GenericAPIView和rest_framework.viewsets.ViewSetMixin</p>\n<h5 id=\"rest-framework-viewsets-ModelViewSet\"><a href=\"#rest-framework-viewsets-ModelViewSet\" class=\"headerlink\" title=\"rest_framework.viewsets.ModelViewSet\"></a>rest_framework.viewsets.ModelViewSet</h5><p>继承自GenericAPIVIew，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。</p>\n<h5 id=\"rest-framework-viewsets-ReadOnlyModelViewSet\"><a href=\"#rest-framework-viewsets-ReadOnlyModelViewSet\" class=\"headerlink\" title=\"rest_framework.viewsets.ReadOnlyModelViewSet\"></a>rest_framework.viewsets.ReadOnlyModelViewSet</h5><p>继承自GenericAPIVIew，同时包括了ListModelMixin、RetrieveModelMixin。</p>\n<h5 id=\"视图集中自定义action动作\"><a href=\"#视图集中自定义action动作\" class=\"headerlink\" title=\"视图集中自定义action动作\"></a>视图集中自定义action动作</h5><p>在视图集中，除了上述默认的方法动作外，还可以添加自定义动作。</p>\n<p>添加自定义动作需要使用rest_framework.decorators.action装饰器。</p>\n<p>以action装饰器装饰的方法名会作为action动作名，与list、retrieve等同。</p>\n<p>action装饰器可以接收两个参数：</p>\n<p>methods: 该action支持的请求方式，列表传递<br>detail: 表示是action中要处理的是否是视图资源的对象（即是否通过url路径获取主键）<br>True 表示使用通过URL获取的主键对应的数据对象<br>False 表示不使用URL获取主键<br>举例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from rest_framework import mixins</span><br><span class=\"line\">from rest_framework.viewsets import GenericViewSet</span><br><span class=\"line\">from rest_framework.decorators import action</span><br><span class=\"line\"></span><br><span class=\"line\">class BookInfoViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):</span><br><span class=\"line\">    queryset = BookInfo.objects.all()</span><br><span class=\"line\">    serializer_class = BookInfoSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">    detail为False 表示不需要处理具体的BookInfo对象</span><br><span class=\"line\">    @action(methods=[&apos;get&apos;], detail=False)</span><br><span class=\"line\">    def latest(self, request):</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        返回最新的图书信息</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        book = BookInfo.objects.latest(&apos;id&apos;)</span><br><span class=\"line\">        serializer = self.get_serializer(book)</span><br><span class=\"line\">        return Response(serializer.data)</span><br><span class=\"line\"></span><br><span class=\"line\">     detail为True，表示要处理具体与pk主键对应的BookInfo对象</span><br><span class=\"line\">    @action(methods=[&apos;put&apos;], detail=True)</span><br><span class=\"line\">    def read(self, request, pk):</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        修改图书的阅读量数据</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        book = self.get_object()</span><br><span class=\"line\">        book.bread = request.data.get(&apos;read&apos;)</span><br><span class=\"line\">        book.save()</span><br><span class=\"line\">        serializer = self.get_serializer(book)</span><br><span class=\"line\">        return Response(serializer.data)</span><br></pre></td></tr></table></figure>\n<p>url的定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^books/$&apos;, views.BookInfoViewSet.as_view(&#123;&apos;get&apos;: &apos;list&apos;&#125;)),</span><br><span class=\"line\">    url(r&apos;^books/latest/$&apos;, views.BookInfoViewSet.as_view(&#123;&apos;get&apos;: &apos;latest&apos;&#125;)),</span><br><span class=\"line\">    url(r&apos;^books/(?P&lt;pk&gt;\\d+)/$&apos;, views.BookInfoViewSet.as_view(&#123;&apos;get&apos;: &apos;retrieve&apos;&#125;)),</span><br><span class=\"line\">    url(r&apos;^books/(?P&lt;pk&gt;\\d+)/read/$&apos;, views.BookInfoViewSet.as_view(&#123;&apos;put&apos;: &apos;read&apos;&#125;)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p>对于视图集ViewSet，我们除了可以自己手动指明请求方式与动作action之间的对应关系外，还可以使用Routers来帮助我们快速实现路由信息。</p>\n<p>REST framework提供了两个router</p>\n<p>SimpleRouter<br>DefaultRouter</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><p>1） 创建router对象，并注册视图集，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from rest_framework import routers</span><br><span class=\"line\"></span><br><span class=\"line\">router = routers.SimpleRouter()</span><br><span class=\"line\">router.register(r&apos;books&apos;, BookInfoViewSet, base_name=&apos;book&apos;)</span><br></pre></td></tr></table></figure>\n<p>register(prefix, viewset, base_name)</p>\n<p>prefix 该视图集的路由前缀<br>viewset 视图集<br>base_name 路由名称的前缀<br>如上述代码会形成的路由如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^books/$    name: book-list</span><br><span class=\"line\">^books/&#123;pk&#125;/$   name: book-detail</span><br></pre></td></tr></table></figure>\n<p>2）添加路由数据</p>\n<p>可以有两种方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br><span class=\"line\">urlpatterns += router.urls</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    url(r&apos;^&apos;, include(router.urls))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"视图集中包含附加action的\"><a href=\"#视图集中包含附加action的\" class=\"headerlink\" title=\"视图集中包含附加action的\"></a>视图集中包含附加action的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BookInfoViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):</span><br><span class=\"line\">    queryset = BookInfo.objects.all()</span><br><span class=\"line\">    serializer_class = BookInfoSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">    @action(methods=[&apos;get&apos;], detail=False)</span><br><span class=\"line\">    def latest(self, request):</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    @action(methods=[&apos;put&apos;], detail=True)</span><br><span class=\"line\">    def read(self, request, pk):</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<p>此视图集会形成的路由：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^books/latest/$    name: book-latest</span><br><span class=\"line\">^books/&#123;pk&#125;/read/$  name: book-read</span><br></pre></td></tr></table></figure>"},{"title":"Docker常用命令","comments":1,"date":"2018-08-29T13:12:05.000Z","toc":true,"_content":"整理一下Docker常用的命令<!--more-->\n### 安装Docker\n```\ncurl -fsSL https://get.docker.com/ | sh\n\n# 检验是否安装成功,成功的话会看到server 和 client的相关信息\ndocker version\n```\n### 镜像相关操作\n#### 拉取镜像\n```\ndocker image pull 镜像名\n```\n#### 查看镜像列表\n```\ndocker images\n或者\ndocker image ls\n```\n#### 删除镜像\n```\ndocker irm image_id\n或者\ndocker image rm 镜像名或镜像id\n```\n#### 镜像备份\n```\ndocker save -o 保存的文件路径以及文件名 镜像名\n```\n#### 镜像迁移/加载到本地\n```\ndocker load -i 镜像路径\n```\n### 容器相关操作\n\n#### 创建容器\n```\ndocker run -itd --restart always --name 容器名 镜像名  执行的命令\n```\n其他参数含义：\n>--network=host 表示将主机的网络环境映射到容器中，容器的网络与主机相同\n-p 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射\n-v 表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可以使 用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。\n-i 表示以“交互模式”运行容器\n-t 表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即 分配一个伪终端。\n--name 为创建的容器命名\n-d 在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。\n-e 为容器设置环境变量\n-e username=\"ritchie\": 设置环境变量\n--net=\"bridge\": 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型\n--link=[]: 添加链接到另一个容器\n--expose=[]: 开放一个端口或一组端口\n-h \"RidingRoad\": 指定容器的hostname\n\n#### 启动容器\n```\ndocker container start container_name或container_id\n```\n#### 停止容器\n```\ndocker container stop container_name或container_id\n```\n#### kill容器\n```\ndocker container kill container_name或container_id\n```\n#### 查看容器列表\n```\n# 查看正在运行的容器\ndocker ps 或 docker container ls\n# 查看所有容器\ndocker ps -a 或 docker container ls --all\n```\n#### 向容器传入和执行命令\n```\ndocker container exec container_id 命令\n```\n#### 进入容器终端\n```\ndocker attach container_id\n或\ndocker container exec container_id /bin/bash\n```\n#### 容器转入后台运行\n```\nCtrl + p 然后 Ctrl + q\n\n```\n#### 删除容器\n```\ndocker rm container_id\n或\ndocker container rm container_id\n\n```\n#### 容器保存为镜像\n```\ndocker commit 容器名 镜像名\n\n```\n","source":"_posts/Docker常用命令.md","raw":"---\ntitle: Docker常用命令\ncomments: true\ndate: 2018-08-29 21:12:05\ntoc: true\ncategories:\n- Docker\ntags:\n- command\n---\n整理一下Docker常用的命令<!--more-->\n### 安装Docker\n```\ncurl -fsSL https://get.docker.com/ | sh\n\n# 检验是否安装成功,成功的话会看到server 和 client的相关信息\ndocker version\n```\n### 镜像相关操作\n#### 拉取镜像\n```\ndocker image pull 镜像名\n```\n#### 查看镜像列表\n```\ndocker images\n或者\ndocker image ls\n```\n#### 删除镜像\n```\ndocker irm image_id\n或者\ndocker image rm 镜像名或镜像id\n```\n#### 镜像备份\n```\ndocker save -o 保存的文件路径以及文件名 镜像名\n```\n#### 镜像迁移/加载到本地\n```\ndocker load -i 镜像路径\n```\n### 容器相关操作\n\n#### 创建容器\n```\ndocker run -itd --restart always --name 容器名 镜像名  执行的命令\n```\n其他参数含义：\n>--network=host 表示将主机的网络环境映射到容器中，容器的网络与主机相同\n-p 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射\n-v 表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可以使 用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。\n-i 表示以“交互模式”运行容器\n-t 表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即 分配一个伪终端。\n--name 为创建的容器命名\n-d 在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。\n-e 为容器设置环境变量\n-e username=\"ritchie\": 设置环境变量\n--net=\"bridge\": 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型\n--link=[]: 添加链接到另一个容器\n--expose=[]: 开放一个端口或一组端口\n-h \"RidingRoad\": 指定容器的hostname\n\n#### 启动容器\n```\ndocker container start container_name或container_id\n```\n#### 停止容器\n```\ndocker container stop container_name或container_id\n```\n#### kill容器\n```\ndocker container kill container_name或container_id\n```\n#### 查看容器列表\n```\n# 查看正在运行的容器\ndocker ps 或 docker container ls\n# 查看所有容器\ndocker ps -a 或 docker container ls --all\n```\n#### 向容器传入和执行命令\n```\ndocker container exec container_id 命令\n```\n#### 进入容器终端\n```\ndocker attach container_id\n或\ndocker container exec container_id /bin/bash\n```\n#### 容器转入后台运行\n```\nCtrl + p 然后 Ctrl + q\n\n```\n#### 删除容器\n```\ndocker rm container_id\n或\ndocker container rm container_id\n\n```\n#### 容器保存为镜像\n```\ndocker commit 容器名 镜像名\n\n```\n","slug":"Docker常用命令","published":1,"updated":"2019-05-25T09:32:43.096Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtc40005e5vxuai1luq7","content":"<p>整理一下Docker常用的命令<a id=\"more\"></a></p>\n<h3 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com/ | sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 检验是否安装成功,成功的话会看到server 和 client的相关信息</span><br><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<h3 id=\"镜像相关操作\"><a href=\"#镜像相关操作\" class=\"headerlink\" title=\"镜像相关操作\"></a>镜像相关操作</h3><h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image pull 镜像名</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看镜像列表\"><a href=\"#查看镜像列表\" class=\"headerlink\" title=\"查看镜像列表\"></a>查看镜像列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">或者</span><br><span class=\"line\">docker image ls</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker irm image_id</span><br><span class=\"line\">或者</span><br><span class=\"line\">docker image rm 镜像名或镜像id</span><br></pre></td></tr></table></figure>\n<h4 id=\"镜像备份\"><a href=\"#镜像备份\" class=\"headerlink\" title=\"镜像备份\"></a>镜像备份</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o 保存的文件路径以及文件名 镜像名</span><br></pre></td></tr></table></figure>\n<h4 id=\"镜像迁移-加载到本地\"><a href=\"#镜像迁移-加载到本地\" class=\"headerlink\" title=\"镜像迁移/加载到本地\"></a>镜像迁移/加载到本地</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i 镜像路径</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器相关操作\"><a href=\"#容器相关操作\" class=\"headerlink\" title=\"容器相关操作\"></a>容器相关操作</h3><h4 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --restart always --name 容器名 镜像名  执行的命令</span><br></pre></td></tr></table></figure>\n<p>其他参数含义：</p>\n<blockquote>\n<p>–network=host 表示将主机的网络环境映射到容器中，容器的网络与主机相同<br>-p 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射<br>-v 表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可以使 用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。<br>-i 表示以“交互模式”运行容器<br>-t 表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即 分配一个伪终端。<br>–name 为创建的容器命名<br>-d 在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。<br>-e 为容器设置环境变量<br>-e username=”ritchie”: 设置环境变量<br>–net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型<br>–link=[]: 添加链接到另一个容器<br>–expose=[]: 开放一个端口或一组端口<br>-h “RidingRoad”: 指定容器的hostname</p>\n</blockquote>\n<h4 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container start container_name或container_id</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container stop container_name或container_id</span><br></pre></td></tr></table></figure>\n<h4 id=\"kill容器\"><a href=\"#kill容器\" class=\"headerlink\" title=\"kill容器\"></a>kill容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container kill container_name或container_id</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看容器列表\"><a href=\"#查看容器列表\" class=\"headerlink\" title=\"查看容器列表\"></a>查看容器列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看正在运行的容器</span><br><span class=\"line\">docker ps 或 docker container ls</span><br><span class=\"line\"># 查看所有容器</span><br><span class=\"line\">docker ps -a 或 docker container ls --all</span><br></pre></td></tr></table></figure>\n<h4 id=\"向容器传入和执行命令\"><a href=\"#向容器传入和执行命令\" class=\"headerlink\" title=\"向容器传入和执行命令\"></a>向容器传入和执行命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container exec container_id 命令</span><br></pre></td></tr></table></figure>\n<h4 id=\"进入容器终端\"><a href=\"#进入容器终端\" class=\"headerlink\" title=\"进入容器终端\"></a>进入容器终端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach container_id</span><br><span class=\"line\">或</span><br><span class=\"line\">docker container exec container_id /bin/bash</span><br></pre></td></tr></table></figure>\n<h4 id=\"容器转入后台运行\"><a href=\"#容器转入后台运行\" class=\"headerlink\" title=\"容器转入后台运行\"></a>容器转入后台运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl + p 然后 Ctrl + q</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm container_id</span><br><span class=\"line\">或</span><br><span class=\"line\">docker container rm container_id</span><br></pre></td></tr></table></figure>\n<h4 id=\"容器保存为镜像\"><a href=\"#容器保存为镜像\" class=\"headerlink\" title=\"容器保存为镜像\"></a>容器保存为镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit 容器名 镜像名</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>整理一下Docker常用的命令","more":"</p>\n<h3 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com/ | sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 检验是否安装成功,成功的话会看到server 和 client的相关信息</span><br><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<h3 id=\"镜像相关操作\"><a href=\"#镜像相关操作\" class=\"headerlink\" title=\"镜像相关操作\"></a>镜像相关操作</h3><h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image pull 镜像名</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看镜像列表\"><a href=\"#查看镜像列表\" class=\"headerlink\" title=\"查看镜像列表\"></a>查看镜像列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">或者</span><br><span class=\"line\">docker image ls</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker irm image_id</span><br><span class=\"line\">或者</span><br><span class=\"line\">docker image rm 镜像名或镜像id</span><br></pre></td></tr></table></figure>\n<h4 id=\"镜像备份\"><a href=\"#镜像备份\" class=\"headerlink\" title=\"镜像备份\"></a>镜像备份</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o 保存的文件路径以及文件名 镜像名</span><br></pre></td></tr></table></figure>\n<h4 id=\"镜像迁移-加载到本地\"><a href=\"#镜像迁移-加载到本地\" class=\"headerlink\" title=\"镜像迁移/加载到本地\"></a>镜像迁移/加载到本地</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i 镜像路径</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器相关操作\"><a href=\"#容器相关操作\" class=\"headerlink\" title=\"容器相关操作\"></a>容器相关操作</h3><h4 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --restart always --name 容器名 镜像名  执行的命令</span><br></pre></td></tr></table></figure>\n<p>其他参数含义：</p>\n<blockquote>\n<p>–network=host 表示将主机的网络环境映射到容器中，容器的网络与主机相同<br>-p 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射<br>-v 表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可以使 用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。<br>-i 表示以“交互模式”运行容器<br>-t 表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即 分配一个伪终端。<br>–name 为创建的容器命名<br>-d 在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。<br>-e 为容器设置环境变量<br>-e username=”ritchie”: 设置环境变量<br>–net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型<br>–link=[]: 添加链接到另一个容器<br>–expose=[]: 开放一个端口或一组端口<br>-h “RidingRoad”: 指定容器的hostname</p>\n</blockquote>\n<h4 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container start container_name或container_id</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container stop container_name或container_id</span><br></pre></td></tr></table></figure>\n<h4 id=\"kill容器\"><a href=\"#kill容器\" class=\"headerlink\" title=\"kill容器\"></a>kill容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container kill container_name或container_id</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看容器列表\"><a href=\"#查看容器列表\" class=\"headerlink\" title=\"查看容器列表\"></a>查看容器列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看正在运行的容器</span><br><span class=\"line\">docker ps 或 docker container ls</span><br><span class=\"line\"># 查看所有容器</span><br><span class=\"line\">docker ps -a 或 docker container ls --all</span><br></pre></td></tr></table></figure>\n<h4 id=\"向容器传入和执行命令\"><a href=\"#向容器传入和执行命令\" class=\"headerlink\" title=\"向容器传入和执行命令\"></a>向容器传入和执行命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container exec container_id 命令</span><br></pre></td></tr></table></figure>\n<h4 id=\"进入容器终端\"><a href=\"#进入容器终端\" class=\"headerlink\" title=\"进入容器终端\"></a>进入容器终端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach container_id</span><br><span class=\"line\">或</span><br><span class=\"line\">docker container exec container_id /bin/bash</span><br></pre></td></tr></table></figure>\n<h4 id=\"容器转入后台运行\"><a href=\"#容器转入后台运行\" class=\"headerlink\" title=\"容器转入后台运行\"></a>容器转入后台运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl + p 然后 Ctrl + q</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm container_id</span><br><span class=\"line\">或</span><br><span class=\"line\">docker container rm container_id</span><br></pre></td></tr></table></figure>\n<h4 id=\"容器保存为镜像\"><a href=\"#容器保存为镜像\" class=\"headerlink\" title=\"容器保存为镜像\"></a>容器保存为镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit 容器名 镜像名</span><br></pre></td></tr></table></figure>"},{"title":"Elasticsearch待续","comments":1,"date":"2018-12-05T12:46:53.000Z","_content":"Elasticsearch待整理发布！\n","source":"_posts/Elasticsearch待续.md","raw":"---\ntitle: Elasticsearch待续\ncomments: true\ndate: 2018-12-05 20:46:53\ntags:\n- 待续\ncategories:\n- Elasticsearch\n---\nElasticsearch待整理发布！\n","slug":"Elasticsearch待续","published":1,"updated":"2019-05-25T09:32:43.097Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtc50006e5vx314v8ynz","content":"<p>Elasticsearch待整理发布！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Elasticsearch待整理发布！</p>\n"},{"title":"Django框架","comments":1,"date":"2018-07-24T13:43:07.000Z","toc":true,"_content":"\nDjango框架，一个重量级的Python Web框架。<!--more-->\n\n### 创建工程\n\n```\n\ndjango-admin startproject  工程名称\n\n```\n\n### 配置文件\n\n1. DEBUG\n\n2. 修改时区与语言\n\n### 创建子应用\n\n1. python manage.py startapp 子应用名称\n\n2. 注册子应用　到配置文件中INSTALLED_APPS的列表中添加注册\n\n### 创建模型\n\n* 修改配置文件\n\n```\nDATABASES = {\n           'default': {\n              'ENGINE': 'django.db.backends.mysql',\n              'NAME': 'books'  # 数据库名字\n              'HOST': '127.0.0.1',  # 数据库主机\n              'PORT': 3306,  # 数据库端口\n              'USER': 'root',  # 数据库用户名\n              'PASSWORD': 'mysql',  # 数据库用户密码\n           }\n       }\n```\n* 安装包\n\n pip install PyMySQL\n*  在Django的工程同名子目录的__init__.py文件中添加如下语句\n\n\n```\nfrom pymysql import install_as_MySQLdb\ninstall_as_MySQLdb()\n\n```\n*  到数据库软件里去创建数据库\n\n```\ncreate database 数据库名称 default charset=utf8;\n```\n*  创建模型类\n\n\n模型类被定义在\"应用/models.py\"文件中。\n模型类必须继承自Model类，位于包django.db.models中。\n\n\n\n```\n\nfrom django.db import models\n\n\nclass BookInfo(models.Model):\n    btitle = models.CharField(max_length=20, verbose_name='名称')\n    bpub_date = models.DateField(verbose_name='发布日期')\n    bread = models.IntegerField(default=0, verbose_name='阅读量')\n    bcomment = models.IntegerField(default=0, verbose_name='评论量')\n    is_delete = models.BooleanField(default=False, verbose_name='逻辑删除')\n\n    class Meta:\n        db_table = 'tb_books'  # 指明数据库表名\n        verbose_name = '图书'  # 在admin站点中显示的名称\n        verbose_name_plural = verbose_name  # 显示的复数名称\n\n    def __str__(self):\n        \"\"\"定义每个数据对象的显示信息\"\"\"\n        return self.btitle\n\n```\n\n*  数据库迁移\n\n```\n\npython manage.py makemigrations [某个子应用]\n\npython manage.py migrate [某个应用]\n\n```\n\n### 站点管理\n\n1. 创建超级管理员\n\n```\n\npython manage.py createsuperuser  按提示输入用户名密码等信息即可\n\n```\n\n2. 注册模型类到站点\n\n打开　子应用/admin.py文件，编写如下代码：\n\n```\nfrom django.contrib import admin\nfrom users.models import BookInfo\n\nadmin.site.register(BookInfo)\n```\n### 创建视图和路由\n\n1. 在子应用的urls.py 文件添加路由和对应的视图\n\nurlpatterns =  [url(正则, 对应的视图函数)]\n\n2. 在工程总路由urls.py文件中通过include添加子应用的路由数据\n\nurlpatterns = [url(正则, include('子应用.urls'))]\n\n### 数据库\n\n#### 定义模型类\n\n* 数据表名　db_name = 数据表名\n\n* 属性命名　字段名　＝　models.字段类型(选项)\n\n#### 数据库操作 增删改查\n\n#####  增加两种方式 create 和 save\n\ncreate :  模型类.objects.create()\n\nsave:   分两步\n\n a.创建模型类对象；\n\n b.执行对象的save()方法保存到数据库中\n\n##### 查询\n\n###### 基本查询\n\n\nget 查询单一结果，如果不存在会抛出模型类.DoesNotExist异常。\n\nall 查询多个结果。\n\ncount 查询结果数量。\n\n###### 过滤查询\n\n\nfilter 过滤出多个结果\n\nexclude 排除掉符合条件剩下的结果\n\n过滤条件的表达语法如下：\n\n```\n属性名称__比较运算符=值\n属性名称和比较运算符间使用两个下划线，所以属性名不能包括多个下划线\n```\n1） 相等 exact\n\n2） 模糊查询 contains  startswith endswith\n\n3）空查询 isnull\n\n4）范围查询 User.objects.filter(id__in=[1,2,3,4])\n\n5）比较查询  lt  gt lte gte\n\n6）日期查询 year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算。\n\n7）F对象 两个属性比较    F('属性名')\n\n8)  Q对象  Q对象可以使用&、|连接，&表示逻辑与，|表示逻辑或。～表示取反\n\n###### 聚合函数\n\n使用aggregate()过滤器调用聚合函数。聚合函数包括：Avg 平均，Count 数量，Max 最大，Min 最小，Sum 求和，被定义在django.db.models中。aggregate的返回值是一个字典类型\n\n###### 排序\n\n\n```\nBookInfo.objects.all().order_by('bread')  # 升序\nBookInfo.objects.all().order_by('-bread')  # 降序\n```\n###### 关联查询\n\n1由一到多的访问语法：\n\n一对应的模型类对象.多对应的模型类名小写_set 例：\n\n```\nb = BookInfo.objects.get(id=1)\nb.heroinfo_set.all()\n```\n2）由多到一的访问语法:\n\n多对应的模型类对象.多对应的模型类中的关系类属性名 例：\n\n```\nh = HeroInfo.objects.get(id=1)\nh.hbook\n```\n3）访问一对应的模型类关联对象的id语法:\n\n多对应的模型类对象.关联类属性_id\n\n例：\n\n```\nh = HeroInfo.objects.get(id=1)\nh.hbook_id\n```\n###### 关联过滤查询\n\n\n1由多模型类条件查询一模型类数据:\n\n语法如下：\n\n关联模型类名小写__属性名__条件运算符=值\n注意：如果没有\"__运算符\"部分，表示等于。\n\n例：\n\n查询图书，要求图书英雄为\"孙悟空\"\n\n```\nBookInfo.objects.filter(heroinfo__hname='孙悟空')\n```\n查询图书，要求图书中英雄的描述包含\"八\"\n\n```\nBookInfo.objects.filter(heroinfo__hcomment__contains='八')\n```\n2）由一模型类条件查询多模型类数据:\n\n语法如下：\n\n```\n一模型类关联属性名__一模型类属性名__条件运算符=值\n```\n注意：如果没有\"__运算符\"部分，表示等于。\n\n例：\n\n查询书名为“天龙八部”的所有英雄。\n\n```\nHeroInfo.objects.filter(hbook__btitle='天龙八部')\n```\n查询图书阅读量大于30的所有英雄\n\n```\nHeroInfo.objects.filter(hbook__bread__gt=30)\n```\n##### 修改\n\n\n修改更新有两种方法\n\n1）save\n\n修改模型类对象的属性，然后执行save()方法\n\n```\nhero = HeroInfo.objects.get(hname='猪八戒')\nhero.hname = '猪悟能'\nhero.save()\n```\n2）update\n\n使用模型类.objects.filter().update()，会返回受影响的行数\n\n```\nHeroInfo.objects.filter(hname='沙悟净').update(hname='沙僧')\n```\n##### 删除\n\n\n删除有两种方法\n\n1）模型类对象.delete()\n\n```\nhero = HeroInfo.objects.get(id=13)\nhero.delete()\n```\n2）模型类.objects.filter(条件).delete()\n\n```\nHeroInfo.objects.filter(id=14).delete()\n```\n#### 查询集\n\n\n当调用如下过滤器方法时，Django会返回查询集（而不是简单的列表）：\n\nall()：返回所有数据。\nfilter()：返回满足条件的数据。\nexclude()：返回满足条件之外的数据。\norder_by()：对结果进行排序。\n\nexists()：判断查询集中是否有数据，如果有则返回True，没有则返回False。\n\n##### 两大特性\n\n1）惰性执行\n\n2）缓存\n\n##### 限制查询集\n\n查询集进行取**下标或切片**操作\n\n#### 管理器 models.Manager类的对象\n\n 1）默认为objects )\n\n2）在模型类中自定义管理器\n\n```\n\nbooks = models.Manager()\n\n```\n\n### Request\n\n* 提取URL部分 ： 正则\n\n* 查询字符串(不区分请求方式)： request.GET.get/getlist(key, default_value)\n\n* 请求体：\n\n1）表单类型：request.POST.get/getlist(key)\n\n2） 非表单类型json等：request.body  返回的是bytes类型，需要**解码(Python3.6以上版本可以忽略解码)以及使用json.loads() **转换为字典类型\n\n* 请求头： request.META  字典类型\n\n### Response\n\n#### HttpResponse(content=相应体, content_type=xxxxx, status=xxxx)\n\n#### JsonResponse(字典类型数据)\n\n#### redirect(reverse(namespace:name))\n\n### Cookies\n\n#### 设置Cookies\n\nHttpResponse.set_cookies(key, value=xxxx,max_age=xxxx)\n\n单位为秒\n\n#### 获取cookies\n\nrequest.COOKIES.get(key)\n\n### Sessions\n\n#### 启用Sessions\n\nDjango项目默认启用Session。\n\n#### 存储方式\n\n##### 数据库\n\n\n存储在数据库中，如下设置可以写，也可以不写，这是默认存储方式。\n\nSESSION_ENGINE='django.contrib.sessions.backends.db'\n如果存储在数据库中，需要在项INSTALLED_APPS中安装Session应用。\n\n##### 本地缓存\n\n\n存储在本机内存中，如果丢失则不能找回，比数据库的方式读写更快。\n\nSESSION_ENGINE='django.contrib.sessions.backends.cache'\n#####  混合缓存\n\n\n优先从本机内存中存取，如果没有则从数据库中存取。\n\nSESSION_ENGINE='django.contrib.sessions.backends.cached_db'\n##### Redis\n\n\n在redis中保存session，需要引入第三方扩展，我们可以使用django-redis来解决。\n\n1） 安装扩展\n\n```\npip install django-redis\n```\n2）配置\n\n在settings.py文件中做如下设置\n\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379/1\",\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n        }\n    }\n}\nSESSION_ENGINE = \"django.contrib.sessions.backends.cache\"\nSESSION_CACHE_ALIAS = \"default\"\n```\n#### Session操作\n\n\n通过HttpRequest对象request的session属性进行会话的读写操作。\n\n1） 以键值对的格式写session。\n\n```\nrequest.session['键']=值\n```\n2）根据键读取值。\n\n```\nrequest.session.get('键',默认值)\n```\n3）清除所有session，在存储中删除值部分。\n\n```\nrequest.session.clear()\n```\n4）清除session数据，在存储中删除session的整条数据。\n\n```\nrequest.session.flush()\n```\n5）删除session中的指定键及值，在存储中只删除某个键及对应的值。\n\n```\ndel request.session['键']\n```\n6）设置session的有效期\n\n```\nrequest.session.set_expiry(value)\n```\n如果value是一个整数，session将在value秒没有活动后过期。\n如果value为0，那么用户session的Cookie将在用户的浏览器关闭时过期。\n如果value为None，那么session有效期将采用系统默认值，**默认为两周**，可以通过在settings.py中设置SESSION_COOKIE_AGE来设置全局默认值。\n### 类视图\n\n使用类视图可以将视图对应的不同请求方式以类中的不同方法来区别定义，配置路由时，使用类视图的as_view()方法来添加。\n\n\n```\nfrom django.views.generic import View\nView提供了as_view()方法,可以自动根据请求方式的不同返回对应的视图函数\n\n```\n#### 类视图使用装饰器\n\n##### 在URL中装饰\n\n```\nurlpatterns = [\n    url(r'^demo/$', my_decorate(DemoView.as_view()))\n]\n```\n##### 在类视图中装饰\n\n* 在类视图的上方装饰\n\n\n在类视图中使用为函数视图准备的装饰器时，不能直接添加装饰器，需要使用method_decorator将其转换为适用于类视图方法的装饰器。\n\nmethod_decorator装饰器支持使用name参数指明被装饰的方法\n\n\n```\n# 为全部请求方法添加装饰器\nfrom django.utils.decorators import method_decorator\n\n@method_decorator(my_decorator, name='dispatch')\nclass DemoView(View):\n    def get(self, request):\n        print('get方法')\n        return HttpResponse('ok')\n\n    def post(self, request):\n        print('post方法')\n        return HttpResponse('ok')\n\n\n# 为特定请求方法添加装饰器\n@method_decorator(my_decorator, name='get')\nclass DemoView(View):\n    def get(self, request):\n        print('get方法')\n        return HttpResponse('ok')\n\n    def post(self, request):\n        print('post方法')\n        return HttpResponse('ok')\n\n```\n\n如果要给类视图多个方法添加装饰器，但不是全部或者某一个方法，可以直接在需要添加装饰器的方法上直接使用method_decorator\n\n```\nclass DemoView(View):\n    @method_decorator(my_decorator)  # 给get添加装饰器\n    def get(self, request):\n        print('get方法')\n        return HttpResponse('ok')\n\n    @method_decorator(my_decorator) # 给post添加装饰器\n    def post(self, request):\n        print('post方法')\n        return HttpResponse('ok')\n\n    def put(self, request):\n        print('put 方法')\n        return HttpResponse('ok') # 没有给put增加装饰器\n```\n### 中间件\n\n在Django处理视图的不同阶段对输入或输出进行干预。\n\n1）中间件的定义方法\n\n\n定义一个中间件工厂函数，然后返回一个可以别调用的中间件。\n\n中间件工厂函数需要接收一个可以调用的get_response对象。\n\n返回的中间件也是一个可以被调用的对象，并且像视图一样需要接收一个request对象参数，返回一个response对象。\n\n```\n\n\ndef simple_middleware(get_response):\n    # 此处编写的代码仅在Django第一次配置和初始化的时候执行一次。\n\n    def middleware(request):\n        # 此处编写的代码会在每个请求处理视图前被调用。\n\n        response = get_response(request)\n\n        # 此处编写的代码会在每个请求处理视图之后被调用。\n\n        return response\n\n    return middleware\n\n```\n\n\n2）中间件的注册\n\n定义好中间件后，需要在settings.py 文件中添加注册中间件\n\n```\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    # 'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'users.middleware.my_middleware',  # 添加中间件\n]\n```\n\n\n\n3）多个中间件的执行顺序\n\n\n在请求视图被处理前，中间件由上至下依次执行\n在请求视图被处理后，中间件由下至上依次执行\n","source":"_posts/Django框架.md","raw":"---\ntitle: Django框架\ncomments: true\ndate: 2018-07-24 21:43:07\ntoc: true\ncategories:\n- Django\ntags:\n- Django\n---\n\nDjango框架，一个重量级的Python Web框架。<!--more-->\n\n### 创建工程\n\n```\n\ndjango-admin startproject  工程名称\n\n```\n\n### 配置文件\n\n1. DEBUG\n\n2. 修改时区与语言\n\n### 创建子应用\n\n1. python manage.py startapp 子应用名称\n\n2. 注册子应用　到配置文件中INSTALLED_APPS的列表中添加注册\n\n### 创建模型\n\n* 修改配置文件\n\n```\nDATABASES = {\n           'default': {\n              'ENGINE': 'django.db.backends.mysql',\n              'NAME': 'books'  # 数据库名字\n              'HOST': '127.0.0.1',  # 数据库主机\n              'PORT': 3306,  # 数据库端口\n              'USER': 'root',  # 数据库用户名\n              'PASSWORD': 'mysql',  # 数据库用户密码\n           }\n       }\n```\n* 安装包\n\n pip install PyMySQL\n*  在Django的工程同名子目录的__init__.py文件中添加如下语句\n\n\n```\nfrom pymysql import install_as_MySQLdb\ninstall_as_MySQLdb()\n\n```\n*  到数据库软件里去创建数据库\n\n```\ncreate database 数据库名称 default charset=utf8;\n```\n*  创建模型类\n\n\n模型类被定义在\"应用/models.py\"文件中。\n模型类必须继承自Model类，位于包django.db.models中。\n\n\n\n```\n\nfrom django.db import models\n\n\nclass BookInfo(models.Model):\n    btitle = models.CharField(max_length=20, verbose_name='名称')\n    bpub_date = models.DateField(verbose_name='发布日期')\n    bread = models.IntegerField(default=0, verbose_name='阅读量')\n    bcomment = models.IntegerField(default=0, verbose_name='评论量')\n    is_delete = models.BooleanField(default=False, verbose_name='逻辑删除')\n\n    class Meta:\n        db_table = 'tb_books'  # 指明数据库表名\n        verbose_name = '图书'  # 在admin站点中显示的名称\n        verbose_name_plural = verbose_name  # 显示的复数名称\n\n    def __str__(self):\n        \"\"\"定义每个数据对象的显示信息\"\"\"\n        return self.btitle\n\n```\n\n*  数据库迁移\n\n```\n\npython manage.py makemigrations [某个子应用]\n\npython manage.py migrate [某个应用]\n\n```\n\n### 站点管理\n\n1. 创建超级管理员\n\n```\n\npython manage.py createsuperuser  按提示输入用户名密码等信息即可\n\n```\n\n2. 注册模型类到站点\n\n打开　子应用/admin.py文件，编写如下代码：\n\n```\nfrom django.contrib import admin\nfrom users.models import BookInfo\n\nadmin.site.register(BookInfo)\n```\n### 创建视图和路由\n\n1. 在子应用的urls.py 文件添加路由和对应的视图\n\nurlpatterns =  [url(正则, 对应的视图函数)]\n\n2. 在工程总路由urls.py文件中通过include添加子应用的路由数据\n\nurlpatterns = [url(正则, include('子应用.urls'))]\n\n### 数据库\n\n#### 定义模型类\n\n* 数据表名　db_name = 数据表名\n\n* 属性命名　字段名　＝　models.字段类型(选项)\n\n#### 数据库操作 增删改查\n\n#####  增加两种方式 create 和 save\n\ncreate :  模型类.objects.create()\n\nsave:   分两步\n\n a.创建模型类对象；\n\n b.执行对象的save()方法保存到数据库中\n\n##### 查询\n\n###### 基本查询\n\n\nget 查询单一结果，如果不存在会抛出模型类.DoesNotExist异常。\n\nall 查询多个结果。\n\ncount 查询结果数量。\n\n###### 过滤查询\n\n\nfilter 过滤出多个结果\n\nexclude 排除掉符合条件剩下的结果\n\n过滤条件的表达语法如下：\n\n```\n属性名称__比较运算符=值\n属性名称和比较运算符间使用两个下划线，所以属性名不能包括多个下划线\n```\n1） 相等 exact\n\n2） 模糊查询 contains  startswith endswith\n\n3）空查询 isnull\n\n4）范围查询 User.objects.filter(id__in=[1,2,3,4])\n\n5）比较查询  lt  gt lte gte\n\n6）日期查询 year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算。\n\n7）F对象 两个属性比较    F('属性名')\n\n8)  Q对象  Q对象可以使用&、|连接，&表示逻辑与，|表示逻辑或。～表示取反\n\n###### 聚合函数\n\n使用aggregate()过滤器调用聚合函数。聚合函数包括：Avg 平均，Count 数量，Max 最大，Min 最小，Sum 求和，被定义在django.db.models中。aggregate的返回值是一个字典类型\n\n###### 排序\n\n\n```\nBookInfo.objects.all().order_by('bread')  # 升序\nBookInfo.objects.all().order_by('-bread')  # 降序\n```\n###### 关联查询\n\n1由一到多的访问语法：\n\n一对应的模型类对象.多对应的模型类名小写_set 例：\n\n```\nb = BookInfo.objects.get(id=1)\nb.heroinfo_set.all()\n```\n2）由多到一的访问语法:\n\n多对应的模型类对象.多对应的模型类中的关系类属性名 例：\n\n```\nh = HeroInfo.objects.get(id=1)\nh.hbook\n```\n3）访问一对应的模型类关联对象的id语法:\n\n多对应的模型类对象.关联类属性_id\n\n例：\n\n```\nh = HeroInfo.objects.get(id=1)\nh.hbook_id\n```\n###### 关联过滤查询\n\n\n1由多模型类条件查询一模型类数据:\n\n语法如下：\n\n关联模型类名小写__属性名__条件运算符=值\n注意：如果没有\"__运算符\"部分，表示等于。\n\n例：\n\n查询图书，要求图书英雄为\"孙悟空\"\n\n```\nBookInfo.objects.filter(heroinfo__hname='孙悟空')\n```\n查询图书，要求图书中英雄的描述包含\"八\"\n\n```\nBookInfo.objects.filter(heroinfo__hcomment__contains='八')\n```\n2）由一模型类条件查询多模型类数据:\n\n语法如下：\n\n```\n一模型类关联属性名__一模型类属性名__条件运算符=值\n```\n注意：如果没有\"__运算符\"部分，表示等于。\n\n例：\n\n查询书名为“天龙八部”的所有英雄。\n\n```\nHeroInfo.objects.filter(hbook__btitle='天龙八部')\n```\n查询图书阅读量大于30的所有英雄\n\n```\nHeroInfo.objects.filter(hbook__bread__gt=30)\n```\n##### 修改\n\n\n修改更新有两种方法\n\n1）save\n\n修改模型类对象的属性，然后执行save()方法\n\n```\nhero = HeroInfo.objects.get(hname='猪八戒')\nhero.hname = '猪悟能'\nhero.save()\n```\n2）update\n\n使用模型类.objects.filter().update()，会返回受影响的行数\n\n```\nHeroInfo.objects.filter(hname='沙悟净').update(hname='沙僧')\n```\n##### 删除\n\n\n删除有两种方法\n\n1）模型类对象.delete()\n\n```\nhero = HeroInfo.objects.get(id=13)\nhero.delete()\n```\n2）模型类.objects.filter(条件).delete()\n\n```\nHeroInfo.objects.filter(id=14).delete()\n```\n#### 查询集\n\n\n当调用如下过滤器方法时，Django会返回查询集（而不是简单的列表）：\n\nall()：返回所有数据。\nfilter()：返回满足条件的数据。\nexclude()：返回满足条件之外的数据。\norder_by()：对结果进行排序。\n\nexists()：判断查询集中是否有数据，如果有则返回True，没有则返回False。\n\n##### 两大特性\n\n1）惰性执行\n\n2）缓存\n\n##### 限制查询集\n\n查询集进行取**下标或切片**操作\n\n#### 管理器 models.Manager类的对象\n\n 1）默认为objects )\n\n2）在模型类中自定义管理器\n\n```\n\nbooks = models.Manager()\n\n```\n\n### Request\n\n* 提取URL部分 ： 正则\n\n* 查询字符串(不区分请求方式)： request.GET.get/getlist(key, default_value)\n\n* 请求体：\n\n1）表单类型：request.POST.get/getlist(key)\n\n2） 非表单类型json等：request.body  返回的是bytes类型，需要**解码(Python3.6以上版本可以忽略解码)以及使用json.loads() **转换为字典类型\n\n* 请求头： request.META  字典类型\n\n### Response\n\n#### HttpResponse(content=相应体, content_type=xxxxx, status=xxxx)\n\n#### JsonResponse(字典类型数据)\n\n#### redirect(reverse(namespace:name))\n\n### Cookies\n\n#### 设置Cookies\n\nHttpResponse.set_cookies(key, value=xxxx,max_age=xxxx)\n\n单位为秒\n\n#### 获取cookies\n\nrequest.COOKIES.get(key)\n\n### Sessions\n\n#### 启用Sessions\n\nDjango项目默认启用Session。\n\n#### 存储方式\n\n##### 数据库\n\n\n存储在数据库中，如下设置可以写，也可以不写，这是默认存储方式。\n\nSESSION_ENGINE='django.contrib.sessions.backends.db'\n如果存储在数据库中，需要在项INSTALLED_APPS中安装Session应用。\n\n##### 本地缓存\n\n\n存储在本机内存中，如果丢失则不能找回，比数据库的方式读写更快。\n\nSESSION_ENGINE='django.contrib.sessions.backends.cache'\n#####  混合缓存\n\n\n优先从本机内存中存取，如果没有则从数据库中存取。\n\nSESSION_ENGINE='django.contrib.sessions.backends.cached_db'\n##### Redis\n\n\n在redis中保存session，需要引入第三方扩展，我们可以使用django-redis来解决。\n\n1） 安装扩展\n\n```\npip install django-redis\n```\n2）配置\n\n在settings.py文件中做如下设置\n\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379/1\",\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n        }\n    }\n}\nSESSION_ENGINE = \"django.contrib.sessions.backends.cache\"\nSESSION_CACHE_ALIAS = \"default\"\n```\n#### Session操作\n\n\n通过HttpRequest对象request的session属性进行会话的读写操作。\n\n1） 以键值对的格式写session。\n\n```\nrequest.session['键']=值\n```\n2）根据键读取值。\n\n```\nrequest.session.get('键',默认值)\n```\n3）清除所有session，在存储中删除值部分。\n\n```\nrequest.session.clear()\n```\n4）清除session数据，在存储中删除session的整条数据。\n\n```\nrequest.session.flush()\n```\n5）删除session中的指定键及值，在存储中只删除某个键及对应的值。\n\n```\ndel request.session['键']\n```\n6）设置session的有效期\n\n```\nrequest.session.set_expiry(value)\n```\n如果value是一个整数，session将在value秒没有活动后过期。\n如果value为0，那么用户session的Cookie将在用户的浏览器关闭时过期。\n如果value为None，那么session有效期将采用系统默认值，**默认为两周**，可以通过在settings.py中设置SESSION_COOKIE_AGE来设置全局默认值。\n### 类视图\n\n使用类视图可以将视图对应的不同请求方式以类中的不同方法来区别定义，配置路由时，使用类视图的as_view()方法来添加。\n\n\n```\nfrom django.views.generic import View\nView提供了as_view()方法,可以自动根据请求方式的不同返回对应的视图函数\n\n```\n#### 类视图使用装饰器\n\n##### 在URL中装饰\n\n```\nurlpatterns = [\n    url(r'^demo/$', my_decorate(DemoView.as_view()))\n]\n```\n##### 在类视图中装饰\n\n* 在类视图的上方装饰\n\n\n在类视图中使用为函数视图准备的装饰器时，不能直接添加装饰器，需要使用method_decorator将其转换为适用于类视图方法的装饰器。\n\nmethod_decorator装饰器支持使用name参数指明被装饰的方法\n\n\n```\n# 为全部请求方法添加装饰器\nfrom django.utils.decorators import method_decorator\n\n@method_decorator(my_decorator, name='dispatch')\nclass DemoView(View):\n    def get(self, request):\n        print('get方法')\n        return HttpResponse('ok')\n\n    def post(self, request):\n        print('post方法')\n        return HttpResponse('ok')\n\n\n# 为特定请求方法添加装饰器\n@method_decorator(my_decorator, name='get')\nclass DemoView(View):\n    def get(self, request):\n        print('get方法')\n        return HttpResponse('ok')\n\n    def post(self, request):\n        print('post方法')\n        return HttpResponse('ok')\n\n```\n\n如果要给类视图多个方法添加装饰器，但不是全部或者某一个方法，可以直接在需要添加装饰器的方法上直接使用method_decorator\n\n```\nclass DemoView(View):\n    @method_decorator(my_decorator)  # 给get添加装饰器\n    def get(self, request):\n        print('get方法')\n        return HttpResponse('ok')\n\n    @method_decorator(my_decorator) # 给post添加装饰器\n    def post(self, request):\n        print('post方法')\n        return HttpResponse('ok')\n\n    def put(self, request):\n        print('put 方法')\n        return HttpResponse('ok') # 没有给put增加装饰器\n```\n### 中间件\n\n在Django处理视图的不同阶段对输入或输出进行干预。\n\n1）中间件的定义方法\n\n\n定义一个中间件工厂函数，然后返回一个可以别调用的中间件。\n\n中间件工厂函数需要接收一个可以调用的get_response对象。\n\n返回的中间件也是一个可以被调用的对象，并且像视图一样需要接收一个request对象参数，返回一个response对象。\n\n```\n\n\ndef simple_middleware(get_response):\n    # 此处编写的代码仅在Django第一次配置和初始化的时候执行一次。\n\n    def middleware(request):\n        # 此处编写的代码会在每个请求处理视图前被调用。\n\n        response = get_response(request)\n\n        # 此处编写的代码会在每个请求处理视图之后被调用。\n\n        return response\n\n    return middleware\n\n```\n\n\n2）中间件的注册\n\n定义好中间件后，需要在settings.py 文件中添加注册中间件\n\n```\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    # 'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'users.middleware.my_middleware',  # 添加中间件\n]\n```\n\n\n\n3）多个中间件的执行顺序\n\n\n在请求视图被处理前，中间件由上至下依次执行\n在请求视图被处理后，中间件由下至上依次执行\n","slug":"Django框架","published":1,"updated":"2019-05-25T09:32:43.096Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtc8000ae5vxt3pt671c","content":"<p>Django框架，一个重量级的Python Web框架。<a id=\"more\"></a></p>\n<h3 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">django-admin startproject  工程名称</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><ol>\n<li><p>DEBUG</p>\n</li>\n<li><p>修改时区与语言</p>\n</li>\n</ol>\n<h3 id=\"创建子应用\"><a href=\"#创建子应用\" class=\"headerlink\" title=\"创建子应用\"></a>创建子应用</h3><ol>\n<li><p>python manage.py startapp 子应用名称</p>\n</li>\n<li><p>注册子应用　到配置文件中INSTALLED_APPS的列表中添加注册</p>\n</li>\n</ol>\n<h3 id=\"创建模型\"><a href=\"#创建模型\" class=\"headerlink\" title=\"创建模型\"></a>创建模型</h3><ul>\n<li>修改配置文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">           &apos;default&apos;: &#123;</span><br><span class=\"line\">              &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class=\"line\">              &apos;NAME&apos;: &apos;books&apos;  # 数据库名字</span><br><span class=\"line\">              &apos;HOST&apos;: &apos;127.0.0.1&apos;,  # 数据库主机</span><br><span class=\"line\">              &apos;PORT&apos;: 3306,  # 数据库端口</span><br><span class=\"line\">              &apos;USER&apos;: &apos;root&apos;,  # 数据库用户名</span><br><span class=\"line\">              &apos;PASSWORD&apos;: &apos;mysql&apos;,  # 数据库用户密码</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>安装包</p>\n<p>pip install PyMySQL</p>\n</li>\n<li>在Django的工程同名子目录的<strong>init</strong>.py文件中添加如下语句</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pymysql import install_as_MySQLdb</span><br><span class=\"line\">install_as_MySQLdb()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>到数据库软件里去创建数据库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database 数据库名称 default charset=utf8;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建模型类</li>\n</ul>\n<p>模型类被定义在”应用/models.py”文件中。<br>模型类必须继承自Model类，位于包django.db.models中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from django.db import models</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class BookInfo(models.Model):</span><br><span class=\"line\">    btitle = models.CharField(max_length=20, verbose_name=&apos;名称&apos;)</span><br><span class=\"line\">    bpub_date = models.DateField(verbose_name=&apos;发布日期&apos;)</span><br><span class=\"line\">    bread = models.IntegerField(default=0, verbose_name=&apos;阅读量&apos;)</span><br><span class=\"line\">    bcomment = models.IntegerField(default=0, verbose_name=&apos;评论量&apos;)</span><br><span class=\"line\">    is_delete = models.BooleanField(default=False, verbose_name=&apos;逻辑删除&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &apos;tb_books&apos;  # 指明数据库表名</span><br><span class=\"line\">        verbose_name = &apos;图书&apos;  # 在admin站点中显示的名称</span><br><span class=\"line\">        verbose_name_plural = verbose_name  # 显示的复数名称</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        &quot;&quot;&quot;定义每个数据对象的显示信息&quot;&quot;&quot;</span><br><span class=\"line\">        return self.btitle</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数据库迁移</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">python manage.py makemigrations [某个子应用]</span><br><span class=\"line\"></span><br><span class=\"line\">python manage.py migrate [某个应用]</span><br></pre></td></tr></table></figure>\n<h3 id=\"站点管理\"><a href=\"#站点管理\" class=\"headerlink\" title=\"站点管理\"></a>站点管理</h3><ol>\n<li>创建超级管理员</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">python manage.py createsuperuser  按提示输入用户名密码等信息即可</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>注册模型类到站点</li>\n</ol>\n<p>打开　子应用/admin.py文件，编写如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from users.models import BookInfo</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(BookInfo)</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建视图和路由\"><a href=\"#创建视图和路由\" class=\"headerlink\" title=\"创建视图和路由\"></a>创建视图和路由</h3><ol>\n<li>在子应用的urls.py 文件添加路由和对应的视图</li>\n</ol>\n<p>urlpatterns =  [url(正则, 对应的视图函数)]</p>\n<ol start=\"2\">\n<li>在工程总路由urls.py文件中通过include添加子应用的路由数据</li>\n</ol>\n<p>urlpatterns = [url(正则, include(‘子应用.urls’))]</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><h4 id=\"定义模型类\"><a href=\"#定义模型类\" class=\"headerlink\" title=\"定义模型类\"></a>定义模型类</h4><ul>\n<li><p>数据表名　db_name = 数据表名</p>\n</li>\n<li><p>属性命名　字段名　＝　models.字段类型(选项)</p>\n</li>\n</ul>\n<h4 id=\"数据库操作-增删改查\"><a href=\"#数据库操作-增删改查\" class=\"headerlink\" title=\"数据库操作 增删改查\"></a>数据库操作 增删改查</h4><h5 id=\"增加两种方式-create-和-save\"><a href=\"#增加两种方式-create-和-save\" class=\"headerlink\" title=\"增加两种方式 create 和 save\"></a>增加两种方式 create 和 save</h5><p>create :  模型类.objects.create()</p>\n<p>save:   分两步</p>\n<p> a.创建模型类对象；</p>\n<p> b.执行对象的save()方法保存到数据库中</p>\n<h5 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h5><h6 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h6><p>get 查询单一结果，如果不存在会抛出模型类.DoesNotExist异常。</p>\n<p>all 查询多个结果。</p>\n<p>count 查询结果数量。</p>\n<h6 id=\"过滤查询\"><a href=\"#过滤查询\" class=\"headerlink\" title=\"过滤查询\"></a>过滤查询</h6><p>filter 过滤出多个结果</p>\n<p>exclude 排除掉符合条件剩下的结果</p>\n<p>过滤条件的表达语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">属性名称__比较运算符=值</span><br><span class=\"line\">属性名称和比较运算符间使用两个下划线，所以属性名不能包括多个下划线</span><br></pre></td></tr></table></figure>\n<p>1） 相等 exact</p>\n<p>2） 模糊查询 contains  startswith endswith</p>\n<p>3）空查询 isnull</p>\n<p>4）范围查询 User.objects.filter(id__in=[1,2,3,4])</p>\n<p>5）比较查询  lt  gt lte gte</p>\n<p>6）日期查询 year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算。</p>\n<p>7）F对象 两个属性比较    F(‘属性名’)</p>\n<p>8)  Q对象  Q对象可以使用&amp;、|连接，&amp;表示逻辑与，|表示逻辑或。～表示取反</p>\n<h6 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h6><p>使用aggregate()过滤器调用聚合函数。聚合函数包括：Avg 平均，Count 数量，Max 最大，Min 最小，Sum 求和，被定义在django.db.models中。aggregate的返回值是一个字典类型</p>\n<h6 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.all().order_by(&apos;bread&apos;)  # 升序</span><br><span class=\"line\">BookInfo.objects.all().order_by(&apos;-bread&apos;)  # 降序</span><br></pre></td></tr></table></figure>\n<h6 id=\"关联查询\"><a href=\"#关联查询\" class=\"headerlink\" title=\"关联查询\"></a>关联查询</h6><p>1由一到多的访问语法：</p>\n<p>一对应的模型类对象.多对应的模型类名小写_set 例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = BookInfo.objects.get(id=1)</span><br><span class=\"line\">b.heroinfo_set.all()</span><br></pre></td></tr></table></figure>\n<p>2）由多到一的访问语法:</p>\n<p>多对应的模型类对象.多对应的模型类中的关系类属性名 例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h = HeroInfo.objects.get(id=1)</span><br><span class=\"line\">h.hbook</span><br></pre></td></tr></table></figure>\n<p>3）访问一对应的模型类关联对象的id语法:</p>\n<p>多对应的模型类对象.关联类属性_id</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h = HeroInfo.objects.get(id=1)</span><br><span class=\"line\">h.hbook_id</span><br></pre></td></tr></table></figure>\n<h6 id=\"关联过滤查询\"><a href=\"#关联过滤查询\" class=\"headerlink\" title=\"关联过滤查询\"></a>关联过滤查询</h6><p>1由多模型类条件查询一模型类数据:</p>\n<p>语法如下：</p>\n<p>关联模型类名小写<strong>属性名</strong>条件运算符=值<br>注意：如果没有”__运算符”部分，表示等于。</p>\n<p>例：</p>\n<p>查询图书，要求图书英雄为”孙悟空”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.filter(heroinfo__hname=&apos;孙悟空&apos;)</span><br></pre></td></tr></table></figure>\n<p>查询图书，要求图书中英雄的描述包含”八”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.filter(heroinfo__hcomment__contains=&apos;八&apos;)</span><br></pre></td></tr></table></figure>\n<p>2）由一模型类条件查询多模型类数据:</p>\n<p>语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一模型类关联属性名__一模型类属性名__条件运算符=值</span><br></pre></td></tr></table></figure>\n<p>注意：如果没有”__运算符”部分，表示等于。</p>\n<p>例：</p>\n<p>查询书名为“天龙八部”的所有英雄。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HeroInfo.objects.filter(hbook__btitle=&apos;天龙八部&apos;)</span><br></pre></td></tr></table></figure>\n<p>查询图书阅读量大于30的所有英雄</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HeroInfo.objects.filter(hbook__bread__gt=30)</span><br></pre></td></tr></table></figure>\n<h5 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h5><p>修改更新有两种方法</p>\n<p>1）save</p>\n<p>修改模型类对象的属性，然后执行save()方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hero = HeroInfo.objects.get(hname=&apos;猪八戒&apos;)</span><br><span class=\"line\">hero.hname = &apos;猪悟能&apos;</span><br><span class=\"line\">hero.save()</span><br></pre></td></tr></table></figure>\n<p>2）update</p>\n<p>使用模型类.objects.filter().update()，会返回受影响的行数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HeroInfo.objects.filter(hname=&apos;沙悟净&apos;).update(hname=&apos;沙僧&apos;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h5><p>删除有两种方法</p>\n<p>1）模型类对象.delete()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hero = HeroInfo.objects.get(id=13)</span><br><span class=\"line\">hero.delete()</span><br></pre></td></tr></table></figure>\n<p>2）模型类.objects.filter(条件).delete()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HeroInfo.objects.filter(id=14).delete()</span><br></pre></td></tr></table></figure>\n<h4 id=\"查询集\"><a href=\"#查询集\" class=\"headerlink\" title=\"查询集\"></a>查询集</h4><p>当调用如下过滤器方法时，Django会返回查询集（而不是简单的列表）：</p>\n<p>all()：返回所有数据。<br>filter()：返回满足条件的数据。<br>exclude()：返回满足条件之外的数据。<br>order_by()：对结果进行排序。</p>\n<p>exists()：判断查询集中是否有数据，如果有则返回True，没有则返回False。</p>\n<h5 id=\"两大特性\"><a href=\"#两大特性\" class=\"headerlink\" title=\"两大特性\"></a>两大特性</h5><p>1）惰性执行</p>\n<p>2）缓存</p>\n<h5 id=\"限制查询集\"><a href=\"#限制查询集\" class=\"headerlink\" title=\"限制查询集\"></a>限制查询集</h5><p>查询集进行取<strong>下标或切片</strong>操作</p>\n<h4 id=\"管理器-models-Manager类的对象\"><a href=\"#管理器-models-Manager类的对象\" class=\"headerlink\" title=\"管理器 models.Manager类的对象\"></a>管理器 models.Manager类的对象</h4><p> 1）默认为objects )</p>\n<p>2）在模型类中自定义管理器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">books = models.Manager()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Request\"><a href=\"#Request\" class=\"headerlink\" title=\"Request\"></a>Request</h3><ul>\n<li><p>提取URL部分 ： 正则</p>\n</li>\n<li><p>查询字符串(不区分请求方式)： request.GET.get/getlist(key, default_value)</p>\n</li>\n<li><p>请求体：</p>\n</li>\n</ul>\n<p>1）表单类型：request.POST.get/getlist(key)</p>\n<p>2） 非表单类型json等：request.body  返回的是bytes类型，需要<strong>解码(Python3.6以上版本可以忽略解码)以及使用json.loads() </strong>转换为字典类型</p>\n<ul>\n<li>请求头： request.META  字典类型</li>\n</ul>\n<h3 id=\"Response\"><a href=\"#Response\" class=\"headerlink\" title=\"Response\"></a>Response</h3><h4 id=\"HttpResponse-content-相应体-content-type-xxxxx-status-xxxx\"><a href=\"#HttpResponse-content-相应体-content-type-xxxxx-status-xxxx\" class=\"headerlink\" title=\"HttpResponse(content=相应体, content_type=xxxxx, status=xxxx)\"></a>HttpResponse(content=相应体, content_type=xxxxx, status=xxxx)</h4><h4 id=\"JsonResponse-字典类型数据\"><a href=\"#JsonResponse-字典类型数据\" class=\"headerlink\" title=\"JsonResponse(字典类型数据)\"></a>JsonResponse(字典类型数据)</h4><h4 id=\"redirect-reverse-namespace-name\"><a href=\"#redirect-reverse-namespace-name\" class=\"headerlink\" title=\"redirect(reverse(namespace:name))\"></a>redirect(reverse(namespace:name))</h4><h3 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h3><h4 id=\"设置Cookies\"><a href=\"#设置Cookies\" class=\"headerlink\" title=\"设置Cookies\"></a>设置Cookies</h4><p>HttpResponse.set_cookies(key, value=xxxx,max_age=xxxx)</p>\n<p>单位为秒</p>\n<h4 id=\"获取cookies\"><a href=\"#获取cookies\" class=\"headerlink\" title=\"获取cookies\"></a>获取cookies</h4><p>request.COOKIES.get(key)</p>\n<h3 id=\"Sessions\"><a href=\"#Sessions\" class=\"headerlink\" title=\"Sessions\"></a>Sessions</h3><h4 id=\"启用Sessions\"><a href=\"#启用Sessions\" class=\"headerlink\" title=\"启用Sessions\"></a>启用Sessions</h4><p>Django项目默认启用Session。</p>\n<h4 id=\"存储方式\"><a href=\"#存储方式\" class=\"headerlink\" title=\"存储方式\"></a>存储方式</h4><h5 id=\"数据库-1\"><a href=\"#数据库-1\" class=\"headerlink\" title=\"数据库\"></a>数据库</h5><p>存储在数据库中，如下设置可以写，也可以不写，这是默认存储方式。</p>\n<p>SESSION_ENGINE=’django.contrib.sessions.backends.db’<br>如果存储在数据库中，需要在项INSTALLED_APPS中安装Session应用。</p>\n<h5 id=\"本地缓存\"><a href=\"#本地缓存\" class=\"headerlink\" title=\"本地缓存\"></a>本地缓存</h5><p>存储在本机内存中，如果丢失则不能找回，比数据库的方式读写更快。</p>\n<p>SESSION_ENGINE=’django.contrib.sessions.backends.cache’</p>\n<h5 id=\"混合缓存\"><a href=\"#混合缓存\" class=\"headerlink\" title=\"混合缓存\"></a>混合缓存</h5><p>优先从本机内存中存取，如果没有则从数据库中存取。</p>\n<p>SESSION_ENGINE=’django.contrib.sessions.backends.cached_db’</p>\n<h5 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h5><p>在redis中保存session，需要引入第三方扩展，我们可以使用django-redis来解决。</p>\n<p>1） 安装扩展</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install django-redis</span><br></pre></td></tr></table></figure>\n<p>2）配置</p>\n<p>在settings.py文件中做如下设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,</span><br><span class=\"line\">        &quot;OPTIONS&quot;: &#123;</span><br><span class=\"line\">            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SESSION_ENGINE = &quot;django.contrib.sessions.backends.cache&quot;</span><br><span class=\"line\">SESSION_CACHE_ALIAS = &quot;default&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Session操作\"><a href=\"#Session操作\" class=\"headerlink\" title=\"Session操作\"></a>Session操作</h4><p>通过HttpRequest对象request的session属性进行会话的读写操作。</p>\n<p>1） 以键值对的格式写session。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.session[&apos;键&apos;]=值</span><br></pre></td></tr></table></figure>\n<p>2）根据键读取值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.session.get(&apos;键&apos;,默认值)</span><br></pre></td></tr></table></figure>\n<p>3）清除所有session，在存储中删除值部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.session.clear()</span><br></pre></td></tr></table></figure>\n<p>4）清除session数据，在存储中删除session的整条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.session.flush()</span><br></pre></td></tr></table></figure>\n<p>5）删除session中的指定键及值，在存储中只删除某个键及对应的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del request.session[&apos;键&apos;]</span><br></pre></td></tr></table></figure>\n<p>6）设置session的有效期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.session.set_expiry(value)</span><br></pre></td></tr></table></figure>\n<p>如果value是一个整数，session将在value秒没有活动后过期。<br>如果value为0，那么用户session的Cookie将在用户的浏览器关闭时过期。<br>如果value为None，那么session有效期将采用系统默认值，<strong>默认为两周</strong>，可以通过在settings.py中设置SESSION_COOKIE_AGE来设置全局默认值。</p>\n<h3 id=\"类视图\"><a href=\"#类视图\" class=\"headerlink\" title=\"类视图\"></a>类视图</h3><p>使用类视图可以将视图对应的不同请求方式以类中的不同方法来区别定义，配置路由时，使用类视图的as_view()方法来添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.views.generic import View</span><br><span class=\"line\">View提供了as_view()方法,可以自动根据请求方式的不同返回对应的视图函数</span><br></pre></td></tr></table></figure>\n<h4 id=\"类视图使用装饰器\"><a href=\"#类视图使用装饰器\" class=\"headerlink\" title=\"类视图使用装饰器\"></a>类视图使用装饰器</h4><h5 id=\"在URL中装饰\"><a href=\"#在URL中装饰\" class=\"headerlink\" title=\"在URL中装饰\"></a>在URL中装饰</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^demo/$&apos;, my_decorate(DemoView.as_view()))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"在类视图中装饰\"><a href=\"#在类视图中装饰\" class=\"headerlink\" title=\"在类视图中装饰\"></a>在类视图中装饰</h5><ul>\n<li>在类视图的上方装饰</li>\n</ul>\n<p>在类视图中使用为函数视图准备的装饰器时，不能直接添加装饰器，需要使用method_decorator将其转换为适用于类视图方法的装饰器。</p>\n<p>method_decorator装饰器支持使用name参数指明被装饰的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 为全部请求方法添加装饰器</span><br><span class=\"line\">from django.utils.decorators import method_decorator</span><br><span class=\"line\"></span><br><span class=\"line\">@method_decorator(my_decorator, name=&apos;dispatch&apos;)</span><br><span class=\"line\">class DemoView(View):</span><br><span class=\"line\">    def get(self, request):</span><br><span class=\"line\">        print(&apos;get方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def post(self, request):</span><br><span class=\"line\">        print(&apos;post方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 为特定请求方法添加装饰器</span><br><span class=\"line\">@method_decorator(my_decorator, name=&apos;get&apos;)</span><br><span class=\"line\">class DemoView(View):</span><br><span class=\"line\">    def get(self, request):</span><br><span class=\"line\">        print(&apos;get方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def post(self, request):</span><br><span class=\"line\">        print(&apos;post方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;)</span><br></pre></td></tr></table></figure>\n<p>如果要给类视图多个方法添加装饰器，但不是全部或者某一个方法，可以直接在需要添加装饰器的方法上直接使用method_decorator</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DemoView(View):</span><br><span class=\"line\">    @method_decorator(my_decorator)  # 给get添加装饰器</span><br><span class=\"line\">    def get(self, request):</span><br><span class=\"line\">        print(&apos;get方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    @method_decorator(my_decorator) # 给post添加装饰器</span><br><span class=\"line\">    def post(self, request):</span><br><span class=\"line\">        print(&apos;post方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def put(self, request):</span><br><span class=\"line\">        print(&apos;put 方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;) # 没有给put增加装饰器</span><br></pre></td></tr></table></figure>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><p>在Django处理视图的不同阶段对输入或输出进行干预。</p>\n<p>1）中间件的定义方法</p>\n<p>定义一个中间件工厂函数，然后返回一个可以别调用的中间件。</p>\n<p>中间件工厂函数需要接收一个可以调用的get_response对象。</p>\n<p>返回的中间件也是一个可以被调用的对象，并且像视图一样需要接收一个request对象参数，返回一个response对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def simple_middleware(get_response):</span><br><span class=\"line\">    # 此处编写的代码仅在Django第一次配置和初始化的时候执行一次。</span><br><span class=\"line\"></span><br><span class=\"line\">    def middleware(request):</span><br><span class=\"line\">        # 此处编写的代码会在每个请求处理视图前被调用。</span><br><span class=\"line\"></span><br><span class=\"line\">        response = get_response(request)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 此处编写的代码会在每个请求处理视图之后被调用。</span><br><span class=\"line\"></span><br><span class=\"line\">        return response</span><br><span class=\"line\"></span><br><span class=\"line\">    return middleware</span><br></pre></td></tr></table></figure>\n<p>2）中间件的注册</p>\n<p>定义好中间件后，需要在settings.py 文件中添加注册中间件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">MIDDLEWARE = [</span><br><span class=\"line\">    &apos;django.middleware.security.SecurityMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.common.CommonMiddleware&apos;,</span><br><span class=\"line\">    # &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,</span><br><span class=\"line\">    &apos;users.middleware.my_middleware&apos;,  # 添加中间件</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>3）多个中间件的执行顺序</p>\n<p>在请求视图被处理前，中间件由上至下依次执行<br>在请求视图被处理后，中间件由下至上依次执行</p>\n","site":{"data":{}},"excerpt":"<p>Django框架，一个重量级的Python Web框架。","more":"</p>\n<h3 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">django-admin startproject  工程名称</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><ol>\n<li><p>DEBUG</p>\n</li>\n<li><p>修改时区与语言</p>\n</li>\n</ol>\n<h3 id=\"创建子应用\"><a href=\"#创建子应用\" class=\"headerlink\" title=\"创建子应用\"></a>创建子应用</h3><ol>\n<li><p>python manage.py startapp 子应用名称</p>\n</li>\n<li><p>注册子应用　到配置文件中INSTALLED_APPS的列表中添加注册</p>\n</li>\n</ol>\n<h3 id=\"创建模型\"><a href=\"#创建模型\" class=\"headerlink\" title=\"创建模型\"></a>创建模型</h3><ul>\n<li>修改配置文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">           &apos;default&apos;: &#123;</span><br><span class=\"line\">              &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class=\"line\">              &apos;NAME&apos;: &apos;books&apos;  # 数据库名字</span><br><span class=\"line\">              &apos;HOST&apos;: &apos;127.0.0.1&apos;,  # 数据库主机</span><br><span class=\"line\">              &apos;PORT&apos;: 3306,  # 数据库端口</span><br><span class=\"line\">              &apos;USER&apos;: &apos;root&apos;,  # 数据库用户名</span><br><span class=\"line\">              &apos;PASSWORD&apos;: &apos;mysql&apos;,  # 数据库用户密码</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>安装包</p>\n<p>pip install PyMySQL</p>\n</li>\n<li>在Django的工程同名子目录的<strong>init</strong>.py文件中添加如下语句</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pymysql import install_as_MySQLdb</span><br><span class=\"line\">install_as_MySQLdb()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>到数据库软件里去创建数据库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database 数据库名称 default charset=utf8;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建模型类</li>\n</ul>\n<p>模型类被定义在”应用/models.py”文件中。<br>模型类必须继承自Model类，位于包django.db.models中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from django.db import models</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class BookInfo(models.Model):</span><br><span class=\"line\">    btitle = models.CharField(max_length=20, verbose_name=&apos;名称&apos;)</span><br><span class=\"line\">    bpub_date = models.DateField(verbose_name=&apos;发布日期&apos;)</span><br><span class=\"line\">    bread = models.IntegerField(default=0, verbose_name=&apos;阅读量&apos;)</span><br><span class=\"line\">    bcomment = models.IntegerField(default=0, verbose_name=&apos;评论量&apos;)</span><br><span class=\"line\">    is_delete = models.BooleanField(default=False, verbose_name=&apos;逻辑删除&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &apos;tb_books&apos;  # 指明数据库表名</span><br><span class=\"line\">        verbose_name = &apos;图书&apos;  # 在admin站点中显示的名称</span><br><span class=\"line\">        verbose_name_plural = verbose_name  # 显示的复数名称</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        &quot;&quot;&quot;定义每个数据对象的显示信息&quot;&quot;&quot;</span><br><span class=\"line\">        return self.btitle</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数据库迁移</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">python manage.py makemigrations [某个子应用]</span><br><span class=\"line\"></span><br><span class=\"line\">python manage.py migrate [某个应用]</span><br></pre></td></tr></table></figure>\n<h3 id=\"站点管理\"><a href=\"#站点管理\" class=\"headerlink\" title=\"站点管理\"></a>站点管理</h3><ol>\n<li>创建超级管理员</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">python manage.py createsuperuser  按提示输入用户名密码等信息即可</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>注册模型类到站点</li>\n</ol>\n<p>打开　子应用/admin.py文件，编写如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from users.models import BookInfo</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(BookInfo)</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建视图和路由\"><a href=\"#创建视图和路由\" class=\"headerlink\" title=\"创建视图和路由\"></a>创建视图和路由</h3><ol>\n<li>在子应用的urls.py 文件添加路由和对应的视图</li>\n</ol>\n<p>urlpatterns =  [url(正则, 对应的视图函数)]</p>\n<ol start=\"2\">\n<li>在工程总路由urls.py文件中通过include添加子应用的路由数据</li>\n</ol>\n<p>urlpatterns = [url(正则, include(‘子应用.urls’))]</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><h4 id=\"定义模型类\"><a href=\"#定义模型类\" class=\"headerlink\" title=\"定义模型类\"></a>定义模型类</h4><ul>\n<li><p>数据表名　db_name = 数据表名</p>\n</li>\n<li><p>属性命名　字段名　＝　models.字段类型(选项)</p>\n</li>\n</ul>\n<h4 id=\"数据库操作-增删改查\"><a href=\"#数据库操作-增删改查\" class=\"headerlink\" title=\"数据库操作 增删改查\"></a>数据库操作 增删改查</h4><h5 id=\"增加两种方式-create-和-save\"><a href=\"#增加两种方式-create-和-save\" class=\"headerlink\" title=\"增加两种方式 create 和 save\"></a>增加两种方式 create 和 save</h5><p>create :  模型类.objects.create()</p>\n<p>save:   分两步</p>\n<p> a.创建模型类对象；</p>\n<p> b.执行对象的save()方法保存到数据库中</p>\n<h5 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h5><h6 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h6><p>get 查询单一结果，如果不存在会抛出模型类.DoesNotExist异常。</p>\n<p>all 查询多个结果。</p>\n<p>count 查询结果数量。</p>\n<h6 id=\"过滤查询\"><a href=\"#过滤查询\" class=\"headerlink\" title=\"过滤查询\"></a>过滤查询</h6><p>filter 过滤出多个结果</p>\n<p>exclude 排除掉符合条件剩下的结果</p>\n<p>过滤条件的表达语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">属性名称__比较运算符=值</span><br><span class=\"line\">属性名称和比较运算符间使用两个下划线，所以属性名不能包括多个下划线</span><br></pre></td></tr></table></figure>\n<p>1） 相等 exact</p>\n<p>2） 模糊查询 contains  startswith endswith</p>\n<p>3）空查询 isnull</p>\n<p>4）范围查询 User.objects.filter(id__in=[1,2,3,4])</p>\n<p>5）比较查询  lt  gt lte gte</p>\n<p>6）日期查询 year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算。</p>\n<p>7）F对象 两个属性比较    F(‘属性名’)</p>\n<p>8)  Q对象  Q对象可以使用&amp;、|连接，&amp;表示逻辑与，|表示逻辑或。～表示取反</p>\n<h6 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h6><p>使用aggregate()过滤器调用聚合函数。聚合函数包括：Avg 平均，Count 数量，Max 最大，Min 最小，Sum 求和，被定义在django.db.models中。aggregate的返回值是一个字典类型</p>\n<h6 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.all().order_by(&apos;bread&apos;)  # 升序</span><br><span class=\"line\">BookInfo.objects.all().order_by(&apos;-bread&apos;)  # 降序</span><br></pre></td></tr></table></figure>\n<h6 id=\"关联查询\"><a href=\"#关联查询\" class=\"headerlink\" title=\"关联查询\"></a>关联查询</h6><p>1由一到多的访问语法：</p>\n<p>一对应的模型类对象.多对应的模型类名小写_set 例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = BookInfo.objects.get(id=1)</span><br><span class=\"line\">b.heroinfo_set.all()</span><br></pre></td></tr></table></figure>\n<p>2）由多到一的访问语法:</p>\n<p>多对应的模型类对象.多对应的模型类中的关系类属性名 例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h = HeroInfo.objects.get(id=1)</span><br><span class=\"line\">h.hbook</span><br></pre></td></tr></table></figure>\n<p>3）访问一对应的模型类关联对象的id语法:</p>\n<p>多对应的模型类对象.关联类属性_id</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h = HeroInfo.objects.get(id=1)</span><br><span class=\"line\">h.hbook_id</span><br></pre></td></tr></table></figure>\n<h6 id=\"关联过滤查询\"><a href=\"#关联过滤查询\" class=\"headerlink\" title=\"关联过滤查询\"></a>关联过滤查询</h6><p>1由多模型类条件查询一模型类数据:</p>\n<p>语法如下：</p>\n<p>关联模型类名小写<strong>属性名</strong>条件运算符=值<br>注意：如果没有”__运算符”部分，表示等于。</p>\n<p>例：</p>\n<p>查询图书，要求图书英雄为”孙悟空”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.filter(heroinfo__hname=&apos;孙悟空&apos;)</span><br></pre></td></tr></table></figure>\n<p>查询图书，要求图书中英雄的描述包含”八”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.filter(heroinfo__hcomment__contains=&apos;八&apos;)</span><br></pre></td></tr></table></figure>\n<p>2）由一模型类条件查询多模型类数据:</p>\n<p>语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一模型类关联属性名__一模型类属性名__条件运算符=值</span><br></pre></td></tr></table></figure>\n<p>注意：如果没有”__运算符”部分，表示等于。</p>\n<p>例：</p>\n<p>查询书名为“天龙八部”的所有英雄。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HeroInfo.objects.filter(hbook__btitle=&apos;天龙八部&apos;)</span><br></pre></td></tr></table></figure>\n<p>查询图书阅读量大于30的所有英雄</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HeroInfo.objects.filter(hbook__bread__gt=30)</span><br></pre></td></tr></table></figure>\n<h5 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h5><p>修改更新有两种方法</p>\n<p>1）save</p>\n<p>修改模型类对象的属性，然后执行save()方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hero = HeroInfo.objects.get(hname=&apos;猪八戒&apos;)</span><br><span class=\"line\">hero.hname = &apos;猪悟能&apos;</span><br><span class=\"line\">hero.save()</span><br></pre></td></tr></table></figure>\n<p>2）update</p>\n<p>使用模型类.objects.filter().update()，会返回受影响的行数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HeroInfo.objects.filter(hname=&apos;沙悟净&apos;).update(hname=&apos;沙僧&apos;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h5><p>删除有两种方法</p>\n<p>1）模型类对象.delete()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hero = HeroInfo.objects.get(id=13)</span><br><span class=\"line\">hero.delete()</span><br></pre></td></tr></table></figure>\n<p>2）模型类.objects.filter(条件).delete()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HeroInfo.objects.filter(id=14).delete()</span><br></pre></td></tr></table></figure>\n<h4 id=\"查询集\"><a href=\"#查询集\" class=\"headerlink\" title=\"查询集\"></a>查询集</h4><p>当调用如下过滤器方法时，Django会返回查询集（而不是简单的列表）：</p>\n<p>all()：返回所有数据。<br>filter()：返回满足条件的数据。<br>exclude()：返回满足条件之外的数据。<br>order_by()：对结果进行排序。</p>\n<p>exists()：判断查询集中是否有数据，如果有则返回True，没有则返回False。</p>\n<h5 id=\"两大特性\"><a href=\"#两大特性\" class=\"headerlink\" title=\"两大特性\"></a>两大特性</h5><p>1）惰性执行</p>\n<p>2）缓存</p>\n<h5 id=\"限制查询集\"><a href=\"#限制查询集\" class=\"headerlink\" title=\"限制查询集\"></a>限制查询集</h5><p>查询集进行取<strong>下标或切片</strong>操作</p>\n<h4 id=\"管理器-models-Manager类的对象\"><a href=\"#管理器-models-Manager类的对象\" class=\"headerlink\" title=\"管理器 models.Manager类的对象\"></a>管理器 models.Manager类的对象</h4><p> 1）默认为objects )</p>\n<p>2）在模型类中自定义管理器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">books = models.Manager()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Request\"><a href=\"#Request\" class=\"headerlink\" title=\"Request\"></a>Request</h3><ul>\n<li><p>提取URL部分 ： 正则</p>\n</li>\n<li><p>查询字符串(不区分请求方式)： request.GET.get/getlist(key, default_value)</p>\n</li>\n<li><p>请求体：</p>\n</li>\n</ul>\n<p>1）表单类型：request.POST.get/getlist(key)</p>\n<p>2） 非表单类型json等：request.body  返回的是bytes类型，需要<strong>解码(Python3.6以上版本可以忽略解码)以及使用json.loads() </strong>转换为字典类型</p>\n<ul>\n<li>请求头： request.META  字典类型</li>\n</ul>\n<h3 id=\"Response\"><a href=\"#Response\" class=\"headerlink\" title=\"Response\"></a>Response</h3><h4 id=\"HttpResponse-content-相应体-content-type-xxxxx-status-xxxx\"><a href=\"#HttpResponse-content-相应体-content-type-xxxxx-status-xxxx\" class=\"headerlink\" title=\"HttpResponse(content=相应体, content_type=xxxxx, status=xxxx)\"></a>HttpResponse(content=相应体, content_type=xxxxx, status=xxxx)</h4><h4 id=\"JsonResponse-字典类型数据\"><a href=\"#JsonResponse-字典类型数据\" class=\"headerlink\" title=\"JsonResponse(字典类型数据)\"></a>JsonResponse(字典类型数据)</h4><h4 id=\"redirect-reverse-namespace-name\"><a href=\"#redirect-reverse-namespace-name\" class=\"headerlink\" title=\"redirect(reverse(namespace:name))\"></a>redirect(reverse(namespace:name))</h4><h3 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h3><h4 id=\"设置Cookies\"><a href=\"#设置Cookies\" class=\"headerlink\" title=\"设置Cookies\"></a>设置Cookies</h4><p>HttpResponse.set_cookies(key, value=xxxx,max_age=xxxx)</p>\n<p>单位为秒</p>\n<h4 id=\"获取cookies\"><a href=\"#获取cookies\" class=\"headerlink\" title=\"获取cookies\"></a>获取cookies</h4><p>request.COOKIES.get(key)</p>\n<h3 id=\"Sessions\"><a href=\"#Sessions\" class=\"headerlink\" title=\"Sessions\"></a>Sessions</h3><h4 id=\"启用Sessions\"><a href=\"#启用Sessions\" class=\"headerlink\" title=\"启用Sessions\"></a>启用Sessions</h4><p>Django项目默认启用Session。</p>\n<h4 id=\"存储方式\"><a href=\"#存储方式\" class=\"headerlink\" title=\"存储方式\"></a>存储方式</h4><h5 id=\"数据库-1\"><a href=\"#数据库-1\" class=\"headerlink\" title=\"数据库\"></a>数据库</h5><p>存储在数据库中，如下设置可以写，也可以不写，这是默认存储方式。</p>\n<p>SESSION_ENGINE=’django.contrib.sessions.backends.db’<br>如果存储在数据库中，需要在项INSTALLED_APPS中安装Session应用。</p>\n<h5 id=\"本地缓存\"><a href=\"#本地缓存\" class=\"headerlink\" title=\"本地缓存\"></a>本地缓存</h5><p>存储在本机内存中，如果丢失则不能找回，比数据库的方式读写更快。</p>\n<p>SESSION_ENGINE=’django.contrib.sessions.backends.cache’</p>\n<h5 id=\"混合缓存\"><a href=\"#混合缓存\" class=\"headerlink\" title=\"混合缓存\"></a>混合缓存</h5><p>优先从本机内存中存取，如果没有则从数据库中存取。</p>\n<p>SESSION_ENGINE=’django.contrib.sessions.backends.cached_db’</p>\n<h5 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h5><p>在redis中保存session，需要引入第三方扩展，我们可以使用django-redis来解决。</p>\n<p>1） 安装扩展</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install django-redis</span><br></pre></td></tr></table></figure>\n<p>2）配置</p>\n<p>在settings.py文件中做如下设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,</span><br><span class=\"line\">        &quot;OPTIONS&quot;: &#123;</span><br><span class=\"line\">            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SESSION_ENGINE = &quot;django.contrib.sessions.backends.cache&quot;</span><br><span class=\"line\">SESSION_CACHE_ALIAS = &quot;default&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Session操作\"><a href=\"#Session操作\" class=\"headerlink\" title=\"Session操作\"></a>Session操作</h4><p>通过HttpRequest对象request的session属性进行会话的读写操作。</p>\n<p>1） 以键值对的格式写session。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.session[&apos;键&apos;]=值</span><br></pre></td></tr></table></figure>\n<p>2）根据键读取值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.session.get(&apos;键&apos;,默认值)</span><br></pre></td></tr></table></figure>\n<p>3）清除所有session，在存储中删除值部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.session.clear()</span><br></pre></td></tr></table></figure>\n<p>4）清除session数据，在存储中删除session的整条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.session.flush()</span><br></pre></td></tr></table></figure>\n<p>5）删除session中的指定键及值，在存储中只删除某个键及对应的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del request.session[&apos;键&apos;]</span><br></pre></td></tr></table></figure>\n<p>6）设置session的有效期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.session.set_expiry(value)</span><br></pre></td></tr></table></figure>\n<p>如果value是一个整数，session将在value秒没有活动后过期。<br>如果value为0，那么用户session的Cookie将在用户的浏览器关闭时过期。<br>如果value为None，那么session有效期将采用系统默认值，<strong>默认为两周</strong>，可以通过在settings.py中设置SESSION_COOKIE_AGE来设置全局默认值。</p>\n<h3 id=\"类视图\"><a href=\"#类视图\" class=\"headerlink\" title=\"类视图\"></a>类视图</h3><p>使用类视图可以将视图对应的不同请求方式以类中的不同方法来区别定义，配置路由时，使用类视图的as_view()方法来添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.views.generic import View</span><br><span class=\"line\">View提供了as_view()方法,可以自动根据请求方式的不同返回对应的视图函数</span><br></pre></td></tr></table></figure>\n<h4 id=\"类视图使用装饰器\"><a href=\"#类视图使用装饰器\" class=\"headerlink\" title=\"类视图使用装饰器\"></a>类视图使用装饰器</h4><h5 id=\"在URL中装饰\"><a href=\"#在URL中装饰\" class=\"headerlink\" title=\"在URL中装饰\"></a>在URL中装饰</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^demo/$&apos;, my_decorate(DemoView.as_view()))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"在类视图中装饰\"><a href=\"#在类视图中装饰\" class=\"headerlink\" title=\"在类视图中装饰\"></a>在类视图中装饰</h5><ul>\n<li>在类视图的上方装饰</li>\n</ul>\n<p>在类视图中使用为函数视图准备的装饰器时，不能直接添加装饰器，需要使用method_decorator将其转换为适用于类视图方法的装饰器。</p>\n<p>method_decorator装饰器支持使用name参数指明被装饰的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 为全部请求方法添加装饰器</span><br><span class=\"line\">from django.utils.decorators import method_decorator</span><br><span class=\"line\"></span><br><span class=\"line\">@method_decorator(my_decorator, name=&apos;dispatch&apos;)</span><br><span class=\"line\">class DemoView(View):</span><br><span class=\"line\">    def get(self, request):</span><br><span class=\"line\">        print(&apos;get方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def post(self, request):</span><br><span class=\"line\">        print(&apos;post方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 为特定请求方法添加装饰器</span><br><span class=\"line\">@method_decorator(my_decorator, name=&apos;get&apos;)</span><br><span class=\"line\">class DemoView(View):</span><br><span class=\"line\">    def get(self, request):</span><br><span class=\"line\">        print(&apos;get方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def post(self, request):</span><br><span class=\"line\">        print(&apos;post方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;)</span><br></pre></td></tr></table></figure>\n<p>如果要给类视图多个方法添加装饰器，但不是全部或者某一个方法，可以直接在需要添加装饰器的方法上直接使用method_decorator</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DemoView(View):</span><br><span class=\"line\">    @method_decorator(my_decorator)  # 给get添加装饰器</span><br><span class=\"line\">    def get(self, request):</span><br><span class=\"line\">        print(&apos;get方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    @method_decorator(my_decorator) # 给post添加装饰器</span><br><span class=\"line\">    def post(self, request):</span><br><span class=\"line\">        print(&apos;post方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def put(self, request):</span><br><span class=\"line\">        print(&apos;put 方法&apos;)</span><br><span class=\"line\">        return HttpResponse(&apos;ok&apos;) # 没有给put增加装饰器</span><br></pre></td></tr></table></figure>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><p>在Django处理视图的不同阶段对输入或输出进行干预。</p>\n<p>1）中间件的定义方法</p>\n<p>定义一个中间件工厂函数，然后返回一个可以别调用的中间件。</p>\n<p>中间件工厂函数需要接收一个可以调用的get_response对象。</p>\n<p>返回的中间件也是一个可以被调用的对象，并且像视图一样需要接收一个request对象参数，返回一个response对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def simple_middleware(get_response):</span><br><span class=\"line\">    # 此处编写的代码仅在Django第一次配置和初始化的时候执行一次。</span><br><span class=\"line\"></span><br><span class=\"line\">    def middleware(request):</span><br><span class=\"line\">        # 此处编写的代码会在每个请求处理视图前被调用。</span><br><span class=\"line\"></span><br><span class=\"line\">        response = get_response(request)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 此处编写的代码会在每个请求处理视图之后被调用。</span><br><span class=\"line\"></span><br><span class=\"line\">        return response</span><br><span class=\"line\"></span><br><span class=\"line\">    return middleware</span><br></pre></td></tr></table></figure>\n<p>2）中间件的注册</p>\n<p>定义好中间件后，需要在settings.py 文件中添加注册中间件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">MIDDLEWARE = [</span><br><span class=\"line\">    &apos;django.middleware.security.SecurityMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.common.CommonMiddleware&apos;,</span><br><span class=\"line\">    # &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,</span><br><span class=\"line\">    &apos;users.middleware.my_middleware&apos;,  # 添加中间件</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>3）多个中间件的执行顺序</p>\n<p>在请求视图被处理前，中间件由上至下依次执行<br>在请求视图被处理后，中间件由下至上依次执行</p>"},{"title":"Flask Web 框架网站的一丁点修修改改","comments":1,"toc":true,"date":"2018-07-20T12:22:19.000Z","_content":"基于之前开发的Web项目网站，发现一些不太合理的地方，就自己动手修修补补了一下下。\n<!--more-->\n\n## 添加的功能\n\n### 添加分类删除\n#### 分类现状\n目前的后台管理的分类管理只有添加功能，却没有删除功能。\n每次测试添加后，分类一多，前端页面显示的分类布局就很不美观。\n那么，我们需要方便的删除这些多余的分类，而不是跑去数据库用SQL语句删记录。\n#### 实现删除分类\n路由：/admin/delete_category\n\n##### 前端页面的处理\n\n* 基于“添加”的前端样式和布局，在上面添加“删除”的样式和布局就好\n```\n<table class=\"common_table\">\n\t\t<tr>\n\t\t\t<th width=\"10%\">id</th>\n\t\t\t<th width=\"80%\">类别名称</th>\n\t\t\t<th width=\"10%\">管理操作</th>\n\t\t</tr>\n\t\t{% for category in data.categories %}\n                <tr>\n                    <td>{{ category.id }}</td>\n                    <td>{{ category.name }}</td>\n                    <td>\n                        <a href=\"javascript:;\" class=\"edit\" >编辑</a>\n                        <br>\n                        <a href=\"javascript:;\" class=\"delete\" style=\"background:#25c192;display:block;width:40px;line-height:20px;margin:-5px auto;border-radius:4px;color:#fff;\">删除</a>\n                    </td>\n                </tr>\n            {% endfor %}\n\t\t<tr>\n\t\t\t<td colspan=\"3\"><a href=\"javascript:;\" class=\"addtype\">增加分类</a>\n                </td>\n\t\t</tr>\n</table>\n```\n* 前端根据点击事件并向后端提供分类的ID以删除\n字段        说明\n\ndelete_id  所删除的分类id\n```\n//删除分类\n   $delete.click(function () {\n       delete_id = $(this).parent().siblings().eq(0).html()\n       console.log(delete_id)\n       if(delete_id==\"\"){\n           $error.html('获取分类id失败').show();\n           return;\n\n       }else{\n           params={\"id\":delete_id}\n       }\n\n       $.ajax({\n           url:\"/admin/delete_category\",\n           method: \"post\",\n           headers: {\n               \"X-CSRFToken\": getCookie(\"csrf_token\")\n           },\n           data: JSON.stringify(params),\n           contentType: \"application/json\",\n           success: function (resp) {\n               if (resp.errno == \"0\") {\n                   // 刷新当前界面\n                   location.reload();\n               }else {\n                   $error.html(resp.errmsg).show();\n               }\n           }\n       })\n\n   })\n```\n##### 后端实现\n后端获取到前段提供的**分类id**就可以进行数据库的删除操作了\n```\n@admin_blue.route(\"/delete_category\", methods=[\"POST\"])\ndef delete_category():\n    category_id = request.json.get(\"id\")\n    category = None\n    try:\n        category = Category.query.get(category_id)\n    except Exception as e:\n        current_app.logger.error(e)\n        return jsonify(errno=RET.DBERR, errmsg=\"查询数据失败\")\n    try:\n        db.session.delete(category)\n        db.session.commit()\n    except Exception as e:\n        current_app.logger.error(e)\n        db.session.rollback()\n        return jsonify(errno=RET.DBERR, errmsg=\"删除分类失败\")\n    return jsonify(errno=RET.OK, errmsg=\"删除分类成功\")\n```\n\n### 添加审核状态筛选\n#### 审核现状\n目前的审核的视图只是返回未审核的数据，但是有很多**合情合理**的场合需要我们把那些已审核通过的文章给撤回来。\n所以我们需要实现审核页面处实现可以提供已通过和未通过的数据，以方便我们一站式处理。\n不用跑去数据库去修改新闻的审核状态码，还要记状态码，想想多可怕。\n##### 前端页面的处理\n###### 前端展示和事件触发\n* 在审核状态的地方插入下拉框：未审核；以通过；未通过\n\n```\n<th width=\"5%\">\n\n      <label>审核状态</label>\n      <select class=\"status_opt\"  name=\"status_id\">\n\n          <option value=\"wait\" {% if data.status == 1 %}selected {% endif %} style=\"font-size: 12px\">未审核</option>\n          <option value=\"pass\" {% if data.status == 0 %}selected {% endif %} style=\"font-size: 12px\">已通过</option>\n          <option value=\"not_pass\" {% if data.status == -1 %}selected {% endif %} style=\"font-size: 12px\">未通过</option>\n      </select>\n</th>\n```\n* 事件触发通过监听js的option 的change属性而进行ajax局部刷新\n```\n$(\".status_opt\").change(function () {\n                    option = $(\".status_opt option:selected\").val();\n                    console.log('在筛选状态下的option:'+option);\n                    window.location = '/admin/news_review?p=' + \"\" + '&status=' + option\n\n                })\n\n```\n\n##### 后端实现\n\n通过获取前端传过来的**status**进行返回过滤后的数据\n```\n@admin_blue.route(\"/news_review\", methods=[\"GET\", \"POST\"])\ndef news_review():\n    page = request.args.get(\"p\", 1)\n    keywords = request.args.get(\"keywords\")\n    status = request.args.get(\"status\", \"wait\")\n    if status:\n        if status == \"wait\":\n            status = 1\n        elif status == \"pass\":\n            status = 0\n        else:\n            status = -1\n    try:\n        page = int(page)\n    except Exception as e:\n        current_app.logger.error(e)\n        page = 1\n\n    filters = [News.status == status]\n\n```\n\n## 改进的小地方\n### 分页点击数据错乱\n发现目前的后台搜索返回的分页的数据，一旦点击下一页或者指定页数的时候，返回来的数据就是基于整个数据库的分页的数据，\n而不是预期的关键字下的分页的数据。\n#### 实现逻辑\n这里主要是因为之前的代码是通过点击页数触发了分页的查询（传递了page参数），但此时传过去的关键字是空了，所以只要我们在搜索前和搜索返回结果后，搜索栏里都有关键字就可以了。\n具体实现：后端把前端传过来的关键字放到response的数据里，前端取出关键字放回搜索栏里，当下一次点击第几页的时候，前端同时把关键字传输到后端。\n##### 前端实现\n```\n$(\"#pagination\").pagination({\n                    currentPage: {{ data.current_page }},\n                    totalPage: {{ data.total_page }},\n                    callback: function(current) {\n                        window.location.href = '/admin/news_review?p=' + current + '&keywords=' + input_text + \"&status=\" + option\n                    }\n\n                });\n```\n##### 后端实现\n```\ndata = {\n       \"news_list\": news_list,\n       \"current_page\": current_page,\n       \"total_page\": total_page,\n       \"status\": status,\n       \"keywords\": keywords\n   }\n```\n### 阻止自恋\n目前用户关注这块，发现可以自己玩自己，咦，还可以这样玩？\n其实，**就是一个bug**，好的，就修复一下吧，这个很简单。\n#### 实现逻辑\n只需判断用户的id和被关注的id是否相同即可\n```\nif action == \"follow\":\n    if int(user_id) == g.user.id:\n        return jsonify(errno=RET.DATAEXIST, errmsg=\"自恋,在这是不被许可的\")\n```\n","source":"_posts/Flask-Web-框架网站的一丁点修修改改.md","raw":"---\ntitle: Flask Web 框架网站的一丁点修修改改\ncomments: true\ntoc: true\ndate: 2018-07-20 20:22:19\ntags:\n- Flask\ncategories:\n- Web框架网站\n---\n基于之前开发的Web项目网站，发现一些不太合理的地方，就自己动手修修补补了一下下。\n<!--more-->\n\n## 添加的功能\n\n### 添加分类删除\n#### 分类现状\n目前的后台管理的分类管理只有添加功能，却没有删除功能。\n每次测试添加后，分类一多，前端页面显示的分类布局就很不美观。\n那么，我们需要方便的删除这些多余的分类，而不是跑去数据库用SQL语句删记录。\n#### 实现删除分类\n路由：/admin/delete_category\n\n##### 前端页面的处理\n\n* 基于“添加”的前端样式和布局，在上面添加“删除”的样式和布局就好\n```\n<table class=\"common_table\">\n\t\t<tr>\n\t\t\t<th width=\"10%\">id</th>\n\t\t\t<th width=\"80%\">类别名称</th>\n\t\t\t<th width=\"10%\">管理操作</th>\n\t\t</tr>\n\t\t{% for category in data.categories %}\n                <tr>\n                    <td>{{ category.id }}</td>\n                    <td>{{ category.name }}</td>\n                    <td>\n                        <a href=\"javascript:;\" class=\"edit\" >编辑</a>\n                        <br>\n                        <a href=\"javascript:;\" class=\"delete\" style=\"background:#25c192;display:block;width:40px;line-height:20px;margin:-5px auto;border-radius:4px;color:#fff;\">删除</a>\n                    </td>\n                </tr>\n            {% endfor %}\n\t\t<tr>\n\t\t\t<td colspan=\"3\"><a href=\"javascript:;\" class=\"addtype\">增加分类</a>\n                </td>\n\t\t</tr>\n</table>\n```\n* 前端根据点击事件并向后端提供分类的ID以删除\n字段        说明\n\ndelete_id  所删除的分类id\n```\n//删除分类\n   $delete.click(function () {\n       delete_id = $(this).parent().siblings().eq(0).html()\n       console.log(delete_id)\n       if(delete_id==\"\"){\n           $error.html('获取分类id失败').show();\n           return;\n\n       }else{\n           params={\"id\":delete_id}\n       }\n\n       $.ajax({\n           url:\"/admin/delete_category\",\n           method: \"post\",\n           headers: {\n               \"X-CSRFToken\": getCookie(\"csrf_token\")\n           },\n           data: JSON.stringify(params),\n           contentType: \"application/json\",\n           success: function (resp) {\n               if (resp.errno == \"0\") {\n                   // 刷新当前界面\n                   location.reload();\n               }else {\n                   $error.html(resp.errmsg).show();\n               }\n           }\n       })\n\n   })\n```\n##### 后端实现\n后端获取到前段提供的**分类id**就可以进行数据库的删除操作了\n```\n@admin_blue.route(\"/delete_category\", methods=[\"POST\"])\ndef delete_category():\n    category_id = request.json.get(\"id\")\n    category = None\n    try:\n        category = Category.query.get(category_id)\n    except Exception as e:\n        current_app.logger.error(e)\n        return jsonify(errno=RET.DBERR, errmsg=\"查询数据失败\")\n    try:\n        db.session.delete(category)\n        db.session.commit()\n    except Exception as e:\n        current_app.logger.error(e)\n        db.session.rollback()\n        return jsonify(errno=RET.DBERR, errmsg=\"删除分类失败\")\n    return jsonify(errno=RET.OK, errmsg=\"删除分类成功\")\n```\n\n### 添加审核状态筛选\n#### 审核现状\n目前的审核的视图只是返回未审核的数据，但是有很多**合情合理**的场合需要我们把那些已审核通过的文章给撤回来。\n所以我们需要实现审核页面处实现可以提供已通过和未通过的数据，以方便我们一站式处理。\n不用跑去数据库去修改新闻的审核状态码，还要记状态码，想想多可怕。\n##### 前端页面的处理\n###### 前端展示和事件触发\n* 在审核状态的地方插入下拉框：未审核；以通过；未通过\n\n```\n<th width=\"5%\">\n\n      <label>审核状态</label>\n      <select class=\"status_opt\"  name=\"status_id\">\n\n          <option value=\"wait\" {% if data.status == 1 %}selected {% endif %} style=\"font-size: 12px\">未审核</option>\n          <option value=\"pass\" {% if data.status == 0 %}selected {% endif %} style=\"font-size: 12px\">已通过</option>\n          <option value=\"not_pass\" {% if data.status == -1 %}selected {% endif %} style=\"font-size: 12px\">未通过</option>\n      </select>\n</th>\n```\n* 事件触发通过监听js的option 的change属性而进行ajax局部刷新\n```\n$(\".status_opt\").change(function () {\n                    option = $(\".status_opt option:selected\").val();\n                    console.log('在筛选状态下的option:'+option);\n                    window.location = '/admin/news_review?p=' + \"\" + '&status=' + option\n\n                })\n\n```\n\n##### 后端实现\n\n通过获取前端传过来的**status**进行返回过滤后的数据\n```\n@admin_blue.route(\"/news_review\", methods=[\"GET\", \"POST\"])\ndef news_review():\n    page = request.args.get(\"p\", 1)\n    keywords = request.args.get(\"keywords\")\n    status = request.args.get(\"status\", \"wait\")\n    if status:\n        if status == \"wait\":\n            status = 1\n        elif status == \"pass\":\n            status = 0\n        else:\n            status = -1\n    try:\n        page = int(page)\n    except Exception as e:\n        current_app.logger.error(e)\n        page = 1\n\n    filters = [News.status == status]\n\n```\n\n## 改进的小地方\n### 分页点击数据错乱\n发现目前的后台搜索返回的分页的数据，一旦点击下一页或者指定页数的时候，返回来的数据就是基于整个数据库的分页的数据，\n而不是预期的关键字下的分页的数据。\n#### 实现逻辑\n这里主要是因为之前的代码是通过点击页数触发了分页的查询（传递了page参数），但此时传过去的关键字是空了，所以只要我们在搜索前和搜索返回结果后，搜索栏里都有关键字就可以了。\n具体实现：后端把前端传过来的关键字放到response的数据里，前端取出关键字放回搜索栏里，当下一次点击第几页的时候，前端同时把关键字传输到后端。\n##### 前端实现\n```\n$(\"#pagination\").pagination({\n                    currentPage: {{ data.current_page }},\n                    totalPage: {{ data.total_page }},\n                    callback: function(current) {\n                        window.location.href = '/admin/news_review?p=' + current + '&keywords=' + input_text + \"&status=\" + option\n                    }\n\n                });\n```\n##### 后端实现\n```\ndata = {\n       \"news_list\": news_list,\n       \"current_page\": current_page,\n       \"total_page\": total_page,\n       \"status\": status,\n       \"keywords\": keywords\n   }\n```\n### 阻止自恋\n目前用户关注这块，发现可以自己玩自己，咦，还可以这样玩？\n其实，**就是一个bug**，好的，就修复一下吧，这个很简单。\n#### 实现逻辑\n只需判断用户的id和被关注的id是否相同即可\n```\nif action == \"follow\":\n    if int(user_id) == g.user.id:\n        return jsonify(errno=RET.DATAEXIST, errmsg=\"自恋,在这是不被许可的\")\n```\n","slug":"Flask-Web-框架网站的一丁点修修改改","published":1,"updated":"2019-05-25T09:32:43.097Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtca000be5vxmovsu80s","content":"<p>基于之前开发的Web项目网站，发现一些不太合理的地方，就自己动手修修补补了一下下。<br><a id=\"more\"></a></p>\n<h2 id=\"添加的功能\"><a href=\"#添加的功能\" class=\"headerlink\" title=\"添加的功能\"></a>添加的功能</h2><h3 id=\"添加分类删除\"><a href=\"#添加分类删除\" class=\"headerlink\" title=\"添加分类删除\"></a>添加分类删除</h3><h4 id=\"分类现状\"><a href=\"#分类现状\" class=\"headerlink\" title=\"分类现状\"></a>分类现状</h4><p>目前的后台管理的分类管理只有添加功能，却没有删除功能。<br>每次测试添加后，分类一多，前端页面显示的分类布局就很不美观。<br>那么，我们需要方便的删除这些多余的分类，而不是跑去数据库用SQL语句删记录。</p>\n<h4 id=\"实现删除分类\"><a href=\"#实现删除分类\" class=\"headerlink\" title=\"实现删除分类\"></a>实现删除分类</h4><p>路由：/admin/delete_category</p>\n<h5 id=\"前端页面的处理\"><a href=\"#前端页面的处理\" class=\"headerlink\" title=\"前端页面的处理\"></a>前端页面的处理</h5><ul>\n<li><p>基于“添加”的前端样式和布局，在上面添加“删除”的样式和布局就好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table class=&quot;common_table&quot;&gt;</span><br><span class=\"line\">\t\t&lt;tr&gt;</span><br><span class=\"line\">\t\t\t&lt;th width=&quot;10%&quot;&gt;id&lt;/th&gt;</span><br><span class=\"line\">\t\t\t&lt;th width=&quot;80%&quot;&gt;类别名称&lt;/th&gt;</span><br><span class=\"line\">\t\t\t&lt;th width=&quot;10%&quot;&gt;管理操作&lt;/th&gt;</span><br><span class=\"line\">\t\t&lt;/tr&gt;</span><br><span class=\"line\">\t\t&#123;% for category in data.categories %&#125;</span><br><span class=\"line\">                &lt;tr&gt;</span><br><span class=\"line\">                    &lt;td&gt;&#123;&#123; category.id &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                    &lt;td&gt;&#123;&#123; category.name &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                    &lt;td&gt;</span><br><span class=\"line\">                        &lt;a href=&quot;javascript:;&quot; class=&quot;edit&quot; &gt;编辑&lt;/a&gt;</span><br><span class=\"line\">                        &lt;br&gt;</span><br><span class=\"line\">                        &lt;a href=&quot;javascript:;&quot; class=&quot;delete&quot; style=&quot;background:#25c192;display:block;width:40px;line-height:20px;margin:-5px auto;border-radius:4px;color:#fff;&quot;&gt;删除&lt;/a&gt;</span><br><span class=\"line\">                    &lt;/td&gt;</span><br><span class=\"line\">                &lt;/tr&gt;</span><br><span class=\"line\">            &#123;% endfor %&#125;</span><br><span class=\"line\">\t\t&lt;tr&gt;</span><br><span class=\"line\">\t\t\t&lt;td colspan=&quot;3&quot;&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;addtype&quot;&gt;增加分类&lt;/a&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>前端根据点击事件并向后端提供分类的ID以删除<br>字段        说明</p>\n</li>\n</ul>\n<p>delete_id  所删除的分类id<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除分类</span><br><span class=\"line\">   $delete.click(function () &#123;</span><br><span class=\"line\">       delete_id = $(this).parent().siblings().eq(0).html()</span><br><span class=\"line\">       console.log(delete_id)</span><br><span class=\"line\">       if(delete_id==&quot;&quot;)&#123;</span><br><span class=\"line\">           $error.html(&apos;获取分类id失败&apos;).show();</span><br><span class=\"line\">           return;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;else&#123;</span><br><span class=\"line\">           params=&#123;&quot;id&quot;:delete_id&#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       $.ajax(&#123;</span><br><span class=\"line\">           url:&quot;/admin/delete_category&quot;,</span><br><span class=\"line\">           method: &quot;post&quot;,</span><br><span class=\"line\">           headers: &#123;</span><br><span class=\"line\">               &quot;X-CSRFToken&quot;: getCookie(&quot;csrf_token&quot;)</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           data: JSON.stringify(params),</span><br><span class=\"line\">           contentType: &quot;application/json&quot;,</span><br><span class=\"line\">           success: function (resp) &#123;</span><br><span class=\"line\">               if (resp.errno == &quot;0&quot;) &#123;</span><br><span class=\"line\">                   // 刷新当前界面</span><br><span class=\"line\">                   location.reload();</span><br><span class=\"line\">               &#125;else &#123;</span><br><span class=\"line\">                   $error.html(resp.errmsg).show();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"后端实现\"><a href=\"#后端实现\" class=\"headerlink\" title=\"后端实现\"></a>后端实现</h5><p>后端获取到前段提供的<strong>分类id</strong>就可以进行数据库的删除操作了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@admin_blue.route(&quot;/delete_category&quot;, methods=[&quot;POST&quot;])</span><br><span class=\"line\">def delete_category():</span><br><span class=\"line\">    category_id = request.json.get(&quot;id&quot;)</span><br><span class=\"line\">    category = None</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        category = Category.query.get(category_id)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        current_app.logger.error(e)</span><br><span class=\"line\">        return jsonify(errno=RET.DBERR, errmsg=&quot;查询数据失败&quot;)</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        db.session.delete(category)</span><br><span class=\"line\">        db.session.commit()</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        current_app.logger.error(e)</span><br><span class=\"line\">        db.session.rollback()</span><br><span class=\"line\">        return jsonify(errno=RET.DBERR, errmsg=&quot;删除分类失败&quot;)</span><br><span class=\"line\">    return jsonify(errno=RET.OK, errmsg=&quot;删除分类成功&quot;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加审核状态筛选\"><a href=\"#添加审核状态筛选\" class=\"headerlink\" title=\"添加审核状态筛选\"></a>添加审核状态筛选</h3><h4 id=\"审核现状\"><a href=\"#审核现状\" class=\"headerlink\" title=\"审核现状\"></a>审核现状</h4><p>目前的审核的视图只是返回未审核的数据，但是有很多<strong>合情合理</strong>的场合需要我们把那些已审核通过的文章给撤回来。<br>所以我们需要实现审核页面处实现可以提供已通过和未通过的数据，以方便我们一站式处理。<br>不用跑去数据库去修改新闻的审核状态码，还要记状态码，想想多可怕。</p>\n<h5 id=\"前端页面的处理-1\"><a href=\"#前端页面的处理-1\" class=\"headerlink\" title=\"前端页面的处理\"></a>前端页面的处理</h5><h6 id=\"前端展示和事件触发\"><a href=\"#前端展示和事件触发\" class=\"headerlink\" title=\"前端展示和事件触发\"></a>前端展示和事件触发</h6><ul>\n<li>在审核状态的地方插入下拉框：未审核；以通过；未通过</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;th width=&quot;5%&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;label&gt;审核状态&lt;/label&gt;</span><br><span class=\"line\">      &lt;select class=&quot;status_opt&quot;  name=&quot;status_id&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;option value=&quot;wait&quot; &#123;% if data.status == 1 %&#125;selected &#123;% endif %&#125; style=&quot;font-size: 12px&quot;&gt;未审核&lt;/option&gt;</span><br><span class=\"line\">          &lt;option value=&quot;pass&quot; &#123;% if data.status == 0 %&#125;selected &#123;% endif %&#125; style=&quot;font-size: 12px&quot;&gt;已通过&lt;/option&gt;</span><br><span class=\"line\">          &lt;option value=&quot;not_pass&quot; &#123;% if data.status == -1 %&#125;selected &#123;% endif %&#125; style=&quot;font-size: 12px&quot;&gt;未通过&lt;/option&gt;</span><br><span class=\"line\">      &lt;/select&gt;</span><br><span class=\"line\">&lt;/th&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>事件触发通过监听js的option 的change属性而进行ajax局部刷新<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;.status_opt&quot;).change(function () &#123;</span><br><span class=\"line\">                    option = $(&quot;.status_opt option:selected&quot;).val();</span><br><span class=\"line\">                    console.log(&apos;在筛选状态下的option:&apos;+option);</span><br><span class=\"line\">                    window.location = &apos;/admin/news_review?p=&apos; + &quot;&quot; + &apos;&amp;status=&apos; + option</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"后端实现-1\"><a href=\"#后端实现-1\" class=\"headerlink\" title=\"后端实现\"></a>后端实现</h5><p>通过获取前端传过来的<strong>status</strong>进行返回过滤后的数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@admin_blue.route(&quot;/news_review&quot;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class=\"line\">def news_review():</span><br><span class=\"line\">    page = request.args.get(&quot;p&quot;, 1)</span><br><span class=\"line\">    keywords = request.args.get(&quot;keywords&quot;)</span><br><span class=\"line\">    status = request.args.get(&quot;status&quot;, &quot;wait&quot;)</span><br><span class=\"line\">    if status:</span><br><span class=\"line\">        if status == &quot;wait&quot;:</span><br><span class=\"line\">            status = 1</span><br><span class=\"line\">        elif status == &quot;pass&quot;:</span><br><span class=\"line\">            status = 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            status = -1</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        page = int(page)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        current_app.logger.error(e)</span><br><span class=\"line\">        page = 1</span><br><span class=\"line\"></span><br><span class=\"line\">    filters = [News.status == status]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"改进的小地方\"><a href=\"#改进的小地方\" class=\"headerlink\" title=\"改进的小地方\"></a>改进的小地方</h2><h3 id=\"分页点击数据错乱\"><a href=\"#分页点击数据错乱\" class=\"headerlink\" title=\"分页点击数据错乱\"></a>分页点击数据错乱</h3><p>发现目前的后台搜索返回的分页的数据，一旦点击下一页或者指定页数的时候，返回来的数据就是基于整个数据库的分页的数据，<br>而不是预期的关键字下的分页的数据。</p>\n<h4 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h4><p>这里主要是因为之前的代码是通过点击页数触发了分页的查询（传递了page参数），但此时传过去的关键字是空了，所以只要我们在搜索前和搜索返回结果后，搜索栏里都有关键字就可以了。<br>具体实现：后端把前端传过来的关键字放到response的数据里，前端取出关键字放回搜索栏里，当下一次点击第几页的时候，前端同时把关键字传输到后端。</p>\n<h5 id=\"前端实现\"><a href=\"#前端实现\" class=\"headerlink\" title=\"前端实现\"></a>前端实现</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#pagination&quot;).pagination(&#123;</span><br><span class=\"line\">                    currentPage: &#123;&#123; data.current_page &#125;&#125;,</span><br><span class=\"line\">                    totalPage: &#123;&#123; data.total_page &#125;&#125;,</span><br><span class=\"line\">                    callback: function(current) &#123;</span><br><span class=\"line\">                        window.location.href = &apos;/admin/news_review?p=&apos; + current + &apos;&amp;keywords=&apos; + input_text + &quot;&amp;status=&quot; + option</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"后端实现-2\"><a href=\"#后端实现-2\" class=\"headerlink\" title=\"后端实现\"></a>后端实现</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;</span><br><span class=\"line\">       &quot;news_list&quot;: news_list,</span><br><span class=\"line\">       &quot;current_page&quot;: current_page,</span><br><span class=\"line\">       &quot;total_page&quot;: total_page,</span><br><span class=\"line\">       &quot;status&quot;: status,</span><br><span class=\"line\">       &quot;keywords&quot;: keywords</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"阻止自恋\"><a href=\"#阻止自恋\" class=\"headerlink\" title=\"阻止自恋\"></a>阻止自恋</h3><p>目前用户关注这块，发现可以自己玩自己，咦，还可以这样玩？<br>其实，<strong>就是一个bug</strong>，好的，就修复一下吧，这个很简单。</p>\n<h4 id=\"实现逻辑-1\"><a href=\"#实现逻辑-1\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h4><p>只需判断用户的id和被关注的id是否相同即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if action == &quot;follow&quot;:</span><br><span class=\"line\">    if int(user_id) == g.user.id:</span><br><span class=\"line\">        return jsonify(errno=RET.DATAEXIST, errmsg=&quot;自恋,在这是不被许可的&quot;)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>基于之前开发的Web项目网站，发现一些不太合理的地方，就自己动手修修补补了一下下。<br>","more":"</p>\n<h2 id=\"添加的功能\"><a href=\"#添加的功能\" class=\"headerlink\" title=\"添加的功能\"></a>添加的功能</h2><h3 id=\"添加分类删除\"><a href=\"#添加分类删除\" class=\"headerlink\" title=\"添加分类删除\"></a>添加分类删除</h3><h4 id=\"分类现状\"><a href=\"#分类现状\" class=\"headerlink\" title=\"分类现状\"></a>分类现状</h4><p>目前的后台管理的分类管理只有添加功能，却没有删除功能。<br>每次测试添加后，分类一多，前端页面显示的分类布局就很不美观。<br>那么，我们需要方便的删除这些多余的分类，而不是跑去数据库用SQL语句删记录。</p>\n<h4 id=\"实现删除分类\"><a href=\"#实现删除分类\" class=\"headerlink\" title=\"实现删除分类\"></a>实现删除分类</h4><p>路由：/admin/delete_category</p>\n<h5 id=\"前端页面的处理\"><a href=\"#前端页面的处理\" class=\"headerlink\" title=\"前端页面的处理\"></a>前端页面的处理</h5><ul>\n<li><p>基于“添加”的前端样式和布局，在上面添加“删除”的样式和布局就好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table class=&quot;common_table&quot;&gt;</span><br><span class=\"line\">\t\t&lt;tr&gt;</span><br><span class=\"line\">\t\t\t&lt;th width=&quot;10%&quot;&gt;id&lt;/th&gt;</span><br><span class=\"line\">\t\t\t&lt;th width=&quot;80%&quot;&gt;类别名称&lt;/th&gt;</span><br><span class=\"line\">\t\t\t&lt;th width=&quot;10%&quot;&gt;管理操作&lt;/th&gt;</span><br><span class=\"line\">\t\t&lt;/tr&gt;</span><br><span class=\"line\">\t\t&#123;% for category in data.categories %&#125;</span><br><span class=\"line\">                &lt;tr&gt;</span><br><span class=\"line\">                    &lt;td&gt;&#123;&#123; category.id &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                    &lt;td&gt;&#123;&#123; category.name &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                    &lt;td&gt;</span><br><span class=\"line\">                        &lt;a href=&quot;javascript:;&quot; class=&quot;edit&quot; &gt;编辑&lt;/a&gt;</span><br><span class=\"line\">                        &lt;br&gt;</span><br><span class=\"line\">                        &lt;a href=&quot;javascript:;&quot; class=&quot;delete&quot; style=&quot;background:#25c192;display:block;width:40px;line-height:20px;margin:-5px auto;border-radius:4px;color:#fff;&quot;&gt;删除&lt;/a&gt;</span><br><span class=\"line\">                    &lt;/td&gt;</span><br><span class=\"line\">                &lt;/tr&gt;</span><br><span class=\"line\">            &#123;% endfor %&#125;</span><br><span class=\"line\">\t\t&lt;tr&gt;</span><br><span class=\"line\">\t\t\t&lt;td colspan=&quot;3&quot;&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;addtype&quot;&gt;增加分类&lt;/a&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>前端根据点击事件并向后端提供分类的ID以删除<br>字段        说明</p>\n</li>\n</ul>\n<p>delete_id  所删除的分类id<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除分类</span><br><span class=\"line\">   $delete.click(function () &#123;</span><br><span class=\"line\">       delete_id = $(this).parent().siblings().eq(0).html()</span><br><span class=\"line\">       console.log(delete_id)</span><br><span class=\"line\">       if(delete_id==&quot;&quot;)&#123;</span><br><span class=\"line\">           $error.html(&apos;获取分类id失败&apos;).show();</span><br><span class=\"line\">           return;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;else&#123;</span><br><span class=\"line\">           params=&#123;&quot;id&quot;:delete_id&#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       $.ajax(&#123;</span><br><span class=\"line\">           url:&quot;/admin/delete_category&quot;,</span><br><span class=\"line\">           method: &quot;post&quot;,</span><br><span class=\"line\">           headers: &#123;</span><br><span class=\"line\">               &quot;X-CSRFToken&quot;: getCookie(&quot;csrf_token&quot;)</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           data: JSON.stringify(params),</span><br><span class=\"line\">           contentType: &quot;application/json&quot;,</span><br><span class=\"line\">           success: function (resp) &#123;</span><br><span class=\"line\">               if (resp.errno == &quot;0&quot;) &#123;</span><br><span class=\"line\">                   // 刷新当前界面</span><br><span class=\"line\">                   location.reload();</span><br><span class=\"line\">               &#125;else &#123;</span><br><span class=\"line\">                   $error.html(resp.errmsg).show();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"后端实现\"><a href=\"#后端实现\" class=\"headerlink\" title=\"后端实现\"></a>后端实现</h5><p>后端获取到前段提供的<strong>分类id</strong>就可以进行数据库的删除操作了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@admin_blue.route(&quot;/delete_category&quot;, methods=[&quot;POST&quot;])</span><br><span class=\"line\">def delete_category():</span><br><span class=\"line\">    category_id = request.json.get(&quot;id&quot;)</span><br><span class=\"line\">    category = None</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        category = Category.query.get(category_id)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        current_app.logger.error(e)</span><br><span class=\"line\">        return jsonify(errno=RET.DBERR, errmsg=&quot;查询数据失败&quot;)</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        db.session.delete(category)</span><br><span class=\"line\">        db.session.commit()</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        current_app.logger.error(e)</span><br><span class=\"line\">        db.session.rollback()</span><br><span class=\"line\">        return jsonify(errno=RET.DBERR, errmsg=&quot;删除分类失败&quot;)</span><br><span class=\"line\">    return jsonify(errno=RET.OK, errmsg=&quot;删除分类成功&quot;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加审核状态筛选\"><a href=\"#添加审核状态筛选\" class=\"headerlink\" title=\"添加审核状态筛选\"></a>添加审核状态筛选</h3><h4 id=\"审核现状\"><a href=\"#审核现状\" class=\"headerlink\" title=\"审核现状\"></a>审核现状</h4><p>目前的审核的视图只是返回未审核的数据，但是有很多<strong>合情合理</strong>的场合需要我们把那些已审核通过的文章给撤回来。<br>所以我们需要实现审核页面处实现可以提供已通过和未通过的数据，以方便我们一站式处理。<br>不用跑去数据库去修改新闻的审核状态码，还要记状态码，想想多可怕。</p>\n<h5 id=\"前端页面的处理-1\"><a href=\"#前端页面的处理-1\" class=\"headerlink\" title=\"前端页面的处理\"></a>前端页面的处理</h5><h6 id=\"前端展示和事件触发\"><a href=\"#前端展示和事件触发\" class=\"headerlink\" title=\"前端展示和事件触发\"></a>前端展示和事件触发</h6><ul>\n<li>在审核状态的地方插入下拉框：未审核；以通过；未通过</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;th width=&quot;5%&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;label&gt;审核状态&lt;/label&gt;</span><br><span class=\"line\">      &lt;select class=&quot;status_opt&quot;  name=&quot;status_id&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;option value=&quot;wait&quot; &#123;% if data.status == 1 %&#125;selected &#123;% endif %&#125; style=&quot;font-size: 12px&quot;&gt;未审核&lt;/option&gt;</span><br><span class=\"line\">          &lt;option value=&quot;pass&quot; &#123;% if data.status == 0 %&#125;selected &#123;% endif %&#125; style=&quot;font-size: 12px&quot;&gt;已通过&lt;/option&gt;</span><br><span class=\"line\">          &lt;option value=&quot;not_pass&quot; &#123;% if data.status == -1 %&#125;selected &#123;% endif %&#125; style=&quot;font-size: 12px&quot;&gt;未通过&lt;/option&gt;</span><br><span class=\"line\">      &lt;/select&gt;</span><br><span class=\"line\">&lt;/th&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>事件触发通过监听js的option 的change属性而进行ajax局部刷新<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;.status_opt&quot;).change(function () &#123;</span><br><span class=\"line\">                    option = $(&quot;.status_opt option:selected&quot;).val();</span><br><span class=\"line\">                    console.log(&apos;在筛选状态下的option:&apos;+option);</span><br><span class=\"line\">                    window.location = &apos;/admin/news_review?p=&apos; + &quot;&quot; + &apos;&amp;status=&apos; + option</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"后端实现-1\"><a href=\"#后端实现-1\" class=\"headerlink\" title=\"后端实现\"></a>后端实现</h5><p>通过获取前端传过来的<strong>status</strong>进行返回过滤后的数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@admin_blue.route(&quot;/news_review&quot;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class=\"line\">def news_review():</span><br><span class=\"line\">    page = request.args.get(&quot;p&quot;, 1)</span><br><span class=\"line\">    keywords = request.args.get(&quot;keywords&quot;)</span><br><span class=\"line\">    status = request.args.get(&quot;status&quot;, &quot;wait&quot;)</span><br><span class=\"line\">    if status:</span><br><span class=\"line\">        if status == &quot;wait&quot;:</span><br><span class=\"line\">            status = 1</span><br><span class=\"line\">        elif status == &quot;pass&quot;:</span><br><span class=\"line\">            status = 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            status = -1</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        page = int(page)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        current_app.logger.error(e)</span><br><span class=\"line\">        page = 1</span><br><span class=\"line\"></span><br><span class=\"line\">    filters = [News.status == status]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"改进的小地方\"><a href=\"#改进的小地方\" class=\"headerlink\" title=\"改进的小地方\"></a>改进的小地方</h2><h3 id=\"分页点击数据错乱\"><a href=\"#分页点击数据错乱\" class=\"headerlink\" title=\"分页点击数据错乱\"></a>分页点击数据错乱</h3><p>发现目前的后台搜索返回的分页的数据，一旦点击下一页或者指定页数的时候，返回来的数据就是基于整个数据库的分页的数据，<br>而不是预期的关键字下的分页的数据。</p>\n<h4 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h4><p>这里主要是因为之前的代码是通过点击页数触发了分页的查询（传递了page参数），但此时传过去的关键字是空了，所以只要我们在搜索前和搜索返回结果后，搜索栏里都有关键字就可以了。<br>具体实现：后端把前端传过来的关键字放到response的数据里，前端取出关键字放回搜索栏里，当下一次点击第几页的时候，前端同时把关键字传输到后端。</p>\n<h5 id=\"前端实现\"><a href=\"#前端实现\" class=\"headerlink\" title=\"前端实现\"></a>前端实现</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#pagination&quot;).pagination(&#123;</span><br><span class=\"line\">                    currentPage: &#123;&#123; data.current_page &#125;&#125;,</span><br><span class=\"line\">                    totalPage: &#123;&#123; data.total_page &#125;&#125;,</span><br><span class=\"line\">                    callback: function(current) &#123;</span><br><span class=\"line\">                        window.location.href = &apos;/admin/news_review?p=&apos; + current + &apos;&amp;keywords=&apos; + input_text + &quot;&amp;status=&quot; + option</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"后端实现-2\"><a href=\"#后端实现-2\" class=\"headerlink\" title=\"后端实现\"></a>后端实现</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;</span><br><span class=\"line\">       &quot;news_list&quot;: news_list,</span><br><span class=\"line\">       &quot;current_page&quot;: current_page,</span><br><span class=\"line\">       &quot;total_page&quot;: total_page,</span><br><span class=\"line\">       &quot;status&quot;: status,</span><br><span class=\"line\">       &quot;keywords&quot;: keywords</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"阻止自恋\"><a href=\"#阻止自恋\" class=\"headerlink\" title=\"阻止自恋\"></a>阻止自恋</h3><p>目前用户关注这块，发现可以自己玩自己，咦，还可以这样玩？<br>其实，<strong>就是一个bug</strong>，好的，就修复一下吧，这个很简单。</p>\n<h4 id=\"实现逻辑-1\"><a href=\"#实现逻辑-1\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h4><p>只需判断用户的id和被关注的id是否相同即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if action == &quot;follow&quot;:</span><br><span class=\"line\">    if int(user_id) == g.user.id:</span><br><span class=\"line\">        return jsonify(errno=RET.DATAEXIST, errmsg=&quot;自恋,在这是不被许可的&quot;)</span><br></pre></td></tr></table></figure></p>"},{"title":"Flask的一对多多对多以及自关联","comments":1,"toc":true,"date":"2018-08-06T13:49:36.000Z","_content":"Flask的一对多多对多以及自关联的总结<!--more-->\n在Flask中创建数据模型类，需要继续自flask_sqlalchemy.SQLAchemy().models.Model\n```\nfrom flask_sqlalchemy import SQLAchemy\ndb = SQLAchemy(flask_app).models.Model\n```\n\n### 一对多\n#### 一对多模型的实现\n一对多的模型类实现可以通过db.relationship（在一的一方）和db.ForeignKey（在多的一方）.比如一个作者可以有多篇文章\n```\nclass Author(db.Model):\n    __tablename__ = 'info_author'\n    id = db.Column(db.Integer,primary_key=True)\n    name = db.Column(db.String(20), nullable=False)\n    # 一的一方，relationship为Author 添加article属性，Author_obj.article内容是以Author_obj.id == Article.author_id的一组Article对象\n    # backref（反向引用） 则为Article添加author属性，Article_obj.author内容是以Article.author_id == Author_obj.id 的Author_obj\n    article = db.relationship(\"Article\",backref='author',lazy='dynamic')\n    \"\"\"\n    lazy: 指定sqlalchemy数据库什么时候加载数据\n        select: 就是访问到属性的时候，就会全部加载该属性的数据\n        joined: 对关联的两个表使用联接\n        subquery: 与joined类似，但使用子子查询\n        dynamic: 不加载记录，但提供加载记录的查询，也就是生成query对象\n    \"\"\"\n\n\nclass Article(db.Model):\n    __tablename__ = \"info_article\"\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(20),nullable=False)\n    # 多的一方，author_id 的取值范围只能在info_author.id的范围内\n    author_id = db.Column(db.Integer,db.ForeignKey('info_author.id'))\n\n```\n#### 一对多和多对一的关联查询使用\n在flask_sqlalchemy中，插入、修改、删除操作，均由数据库会话管理。\n会话用 db.session 表示。在准备把数据写入数据库前，要先将数据添加到会话中然后调用 commit() 方法提交会话。\n在 flask_sqlalchemy中，查询操作是通过 query 对象操作数据。\n最基本的查询是返回表中所有数据，可以通过过滤器进行更精确的数据库查询。\n#### 数据库迁移\n```\nfrom flask_migrate import Migrate, MigrateCommand\nfrom flask_script import Manager\napp = Flask(__name__)\nmanager = Manager(app) # 脚本命令\nmigrate = Migrate(app,db) # 数据库迁移绑定\nmanager.add_command('mysql',MigrateCommand) # 添加数据库迁移的脚本命令\n```\n迁移三部曲：\n1. pyhton manage.py **migrate_command** **init** # 这里的migrate_command即是上面的‘mysql’\n2. python manage.py **migrate_command** **migrate** -m \"database_migrate\"\n3. python manage.py **migrate_command** **upgrade**\n#### 查找一个作者的所有文章\n```\nAuthor.query.filter(Author.id==1).first().article.all()\n# 返回一个查询集列表\n```\n#### 查找某篇文章的作者\n```\nauthor = Article.query.filter(Article.title=='Python孙行者').first().author\n# 返回的是一个作者查询集对象，可以author.name进行查询具体的名字\n```\n### 多对多\n多对多一般使用一张中间表和两个一对多进而降低难度和更容易理解。下面以用户收藏新闻为例，一个用户可以收藏多条新闻，一条新闻可以被多个用户收藏，那么这个就是一个多对多的关系。\n我们可以通过一张用户表（用户id，姓名，用户收藏的新闻的一个关联属性），一张新闻表（新闻id，新闻标题）以及一张中间表（用户id，新闻id）。\n用户表：\n\n|id|name|\n|-----|----|\n|1|张三|\n|2|李四|\n|3|王五|\n\n新闻表：\n\n|id|title|\n|-----|----|\n|1|六一|\n|2|七一|\n|3|十一|\n\n中间表：\n\n|user_id|news_id|\n|-----|----|\n|1|1|\n|1|2|\n|3|1|\n\n比如说，需要查找张三收藏了哪些新闻，那么我们就可以根据张三的用户id到中间表查询user_id为1的所有的news_id的数据，然后再回到新闻表，去根据news_id就可以查到对应的标题了。\n代码：\n```\n# 中间表\ntb_user_collections = db.Table(\"info_user_collections\",\n                                                 db.Cloumn(\"user_id\", db.Integer, db.ForeignKey(\"info_user.id\")),\n                                                 db.Cloumn(\"news_id\", db.Integer, db.ForgignKey(\"info_news.id\")))\n# 用户模型\nclass User(db.Model):\n    __tablename__ = \"info_user\"\n\n    id = db.Column(db.Integer, primary_key=True)  # 用户编号\n    name = db.Column(db.String(32), unique=True, nullable=False)  # 用户昵称\n    collection_news = db.relationship(\"News\", secondary=tb_user_collections, backref=\"user\", lazy=\"dynamic\")   \n# 新闻模型\nclass News(db.Model):\n        __tablename__ = \"info_news\"       \n    id = db.Column(db.Integer, primary_key=True)  # 新闻id   \n    title = db.Column(db.String(32), nullable=False) # 新闻标题\n```\n\n### 自关联\n自关联最常见就是评论盖楼和地址的三级联动了，下面一评论盖楼为例：\n一个评论下面有很多追加的评论，这是可以通过记录父评论的id就可以一环扣一环形成完整了评论楼层\n\n|id|content|parent_id|\n|-----|----|----|\n|1|哈哈|NULL|\n|2|6666|1|\n|3|88888|1|\n\n\n```\nclass Comment(db.Model):\n    \"\"\"评论\"\"\"\n    __tablename__ = \"info_comment\"\n    id = db.Column(db.Integer, primary_key=True)  # 评论编号\n    content = db.Column(db.Text, nullable=False)  # 评论内容\n    parent_id = db.Column(db.Integer, db.ForeignKey(\"info_comment.id\"))  # 父评论id\n    parent = db.relationship(\"Comment\", remote_side=[id])  # 自关联\n```\n","source":"_posts/Flask的一对多多对多以及自关联.md","raw":"---\ntitle: Flask的一对多多对多以及自关联\ncomments: true\ntoc: true\ndate: 2018-08-06 21:49:36\ncategories:\n- Python\ntags:\n- Flask\n---\nFlask的一对多多对多以及自关联的总结<!--more-->\n在Flask中创建数据模型类，需要继续自flask_sqlalchemy.SQLAchemy().models.Model\n```\nfrom flask_sqlalchemy import SQLAchemy\ndb = SQLAchemy(flask_app).models.Model\n```\n\n### 一对多\n#### 一对多模型的实现\n一对多的模型类实现可以通过db.relationship（在一的一方）和db.ForeignKey（在多的一方）.比如一个作者可以有多篇文章\n```\nclass Author(db.Model):\n    __tablename__ = 'info_author'\n    id = db.Column(db.Integer,primary_key=True)\n    name = db.Column(db.String(20), nullable=False)\n    # 一的一方，relationship为Author 添加article属性，Author_obj.article内容是以Author_obj.id == Article.author_id的一组Article对象\n    # backref（反向引用） 则为Article添加author属性，Article_obj.author内容是以Article.author_id == Author_obj.id 的Author_obj\n    article = db.relationship(\"Article\",backref='author',lazy='dynamic')\n    \"\"\"\n    lazy: 指定sqlalchemy数据库什么时候加载数据\n        select: 就是访问到属性的时候，就会全部加载该属性的数据\n        joined: 对关联的两个表使用联接\n        subquery: 与joined类似，但使用子子查询\n        dynamic: 不加载记录，但提供加载记录的查询，也就是生成query对象\n    \"\"\"\n\n\nclass Article(db.Model):\n    __tablename__ = \"info_article\"\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(20),nullable=False)\n    # 多的一方，author_id 的取值范围只能在info_author.id的范围内\n    author_id = db.Column(db.Integer,db.ForeignKey('info_author.id'))\n\n```\n#### 一对多和多对一的关联查询使用\n在flask_sqlalchemy中，插入、修改、删除操作，均由数据库会话管理。\n会话用 db.session 表示。在准备把数据写入数据库前，要先将数据添加到会话中然后调用 commit() 方法提交会话。\n在 flask_sqlalchemy中，查询操作是通过 query 对象操作数据。\n最基本的查询是返回表中所有数据，可以通过过滤器进行更精确的数据库查询。\n#### 数据库迁移\n```\nfrom flask_migrate import Migrate, MigrateCommand\nfrom flask_script import Manager\napp = Flask(__name__)\nmanager = Manager(app) # 脚本命令\nmigrate = Migrate(app,db) # 数据库迁移绑定\nmanager.add_command('mysql',MigrateCommand) # 添加数据库迁移的脚本命令\n```\n迁移三部曲：\n1. pyhton manage.py **migrate_command** **init** # 这里的migrate_command即是上面的‘mysql’\n2. python manage.py **migrate_command** **migrate** -m \"database_migrate\"\n3. python manage.py **migrate_command** **upgrade**\n#### 查找一个作者的所有文章\n```\nAuthor.query.filter(Author.id==1).first().article.all()\n# 返回一个查询集列表\n```\n#### 查找某篇文章的作者\n```\nauthor = Article.query.filter(Article.title=='Python孙行者').first().author\n# 返回的是一个作者查询集对象，可以author.name进行查询具体的名字\n```\n### 多对多\n多对多一般使用一张中间表和两个一对多进而降低难度和更容易理解。下面以用户收藏新闻为例，一个用户可以收藏多条新闻，一条新闻可以被多个用户收藏，那么这个就是一个多对多的关系。\n我们可以通过一张用户表（用户id，姓名，用户收藏的新闻的一个关联属性），一张新闻表（新闻id，新闻标题）以及一张中间表（用户id，新闻id）。\n用户表：\n\n|id|name|\n|-----|----|\n|1|张三|\n|2|李四|\n|3|王五|\n\n新闻表：\n\n|id|title|\n|-----|----|\n|1|六一|\n|2|七一|\n|3|十一|\n\n中间表：\n\n|user_id|news_id|\n|-----|----|\n|1|1|\n|1|2|\n|3|1|\n\n比如说，需要查找张三收藏了哪些新闻，那么我们就可以根据张三的用户id到中间表查询user_id为1的所有的news_id的数据，然后再回到新闻表，去根据news_id就可以查到对应的标题了。\n代码：\n```\n# 中间表\ntb_user_collections = db.Table(\"info_user_collections\",\n                                                 db.Cloumn(\"user_id\", db.Integer, db.ForeignKey(\"info_user.id\")),\n                                                 db.Cloumn(\"news_id\", db.Integer, db.ForgignKey(\"info_news.id\")))\n# 用户模型\nclass User(db.Model):\n    __tablename__ = \"info_user\"\n\n    id = db.Column(db.Integer, primary_key=True)  # 用户编号\n    name = db.Column(db.String(32), unique=True, nullable=False)  # 用户昵称\n    collection_news = db.relationship(\"News\", secondary=tb_user_collections, backref=\"user\", lazy=\"dynamic\")   \n# 新闻模型\nclass News(db.Model):\n        __tablename__ = \"info_news\"       \n    id = db.Column(db.Integer, primary_key=True)  # 新闻id   \n    title = db.Column(db.String(32), nullable=False) # 新闻标题\n```\n\n### 自关联\n自关联最常见就是评论盖楼和地址的三级联动了，下面一评论盖楼为例：\n一个评论下面有很多追加的评论，这是可以通过记录父评论的id就可以一环扣一环形成完整了评论楼层\n\n|id|content|parent_id|\n|-----|----|----|\n|1|哈哈|NULL|\n|2|6666|1|\n|3|88888|1|\n\n\n```\nclass Comment(db.Model):\n    \"\"\"评论\"\"\"\n    __tablename__ = \"info_comment\"\n    id = db.Column(db.Integer, primary_key=True)  # 评论编号\n    content = db.Column(db.Text, nullable=False)  # 评论内容\n    parent_id = db.Column(db.Integer, db.ForeignKey(\"info_comment.id\"))  # 父评论id\n    parent = db.relationship(\"Comment\", remote_side=[id])  # 自关联\n```\n","slug":"Flask的一对多多对多以及自关联","published":1,"updated":"2019-05-25T09:32:43.098Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtcb000fe5vxpeaezllx","content":"<p>Flask的一对多多对多以及自关联的总结<a id=\"more\"></a><br>在Flask中创建数据模型类，需要继续自flask_sqlalchemy.SQLAchemy().models.Model<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_sqlalchemy import SQLAchemy</span><br><span class=\"line\">db = SQLAchemy(flask_app).models.Model</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一对多\"><a href=\"#一对多\" class=\"headerlink\" title=\"一对多\"></a>一对多</h3><h4 id=\"一对多模型的实现\"><a href=\"#一对多模型的实现\" class=\"headerlink\" title=\"一对多模型的实现\"></a>一对多模型的实现</h4><p>一对多的模型类实现可以通过db.relationship（在一的一方）和db.ForeignKey（在多的一方）.比如一个作者可以有多篇文章<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Author(db.Model):</span><br><span class=\"line\">    __tablename__ = &apos;info_author&apos;</span><br><span class=\"line\">    id = db.Column(db.Integer,primary_key=True)</span><br><span class=\"line\">    name = db.Column(db.String(20), nullable=False)</span><br><span class=\"line\">    # 一的一方，relationship为Author 添加article属性，Author_obj.article内容是以Author_obj.id == Article.author_id的一组Article对象</span><br><span class=\"line\">    # backref（反向引用） 则为Article添加author属性，Article_obj.author内容是以Article.author_id == Author_obj.id 的Author_obj</span><br><span class=\"line\">    article = db.relationship(&quot;Article&quot;,backref=&apos;author&apos;,lazy=&apos;dynamic&apos;)</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    lazy: 指定sqlalchemy数据库什么时候加载数据</span><br><span class=\"line\">        select: 就是访问到属性的时候，就会全部加载该属性的数据</span><br><span class=\"line\">        joined: 对关联的两个表使用联接</span><br><span class=\"line\">        subquery: 与joined类似，但使用子子查询</span><br><span class=\"line\">        dynamic: 不加载记录，但提供加载记录的查询，也就是生成query对象</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Article(db.Model):</span><br><span class=\"line\">    __tablename__ = &quot;info_article&quot;</span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True)</span><br><span class=\"line\">    title = db.Column(db.String(20),nullable=False)</span><br><span class=\"line\">    # 多的一方，author_id 的取值范围只能在info_author.id的范围内</span><br><span class=\"line\">    author_id = db.Column(db.Integer,db.ForeignKey(&apos;info_author.id&apos;))</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"一对多和多对一的关联查询使用\"><a href=\"#一对多和多对一的关联查询使用\" class=\"headerlink\" title=\"一对多和多对一的关联查询使用\"></a>一对多和多对一的关联查询使用</h4><p>在flask_sqlalchemy中，插入、修改、删除操作，均由数据库会话管理。<br>会话用 db.session 表示。在准备把数据写入数据库前，要先将数据添加到会话中然后调用 commit() 方法提交会话。<br>在 flask_sqlalchemy中，查询操作是通过 query 对象操作数据。<br>最基本的查询是返回表中所有数据，可以通过过滤器进行更精确的数据库查询。</p>\n<h4 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_migrate import Migrate, MigrateCommand</span><br><span class=\"line\">from flask_script import Manager</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">manager = Manager(app) # 脚本命令</span><br><span class=\"line\">migrate = Migrate(app,db) # 数据库迁移绑定</span><br><span class=\"line\">manager.add_command(&apos;mysql&apos;,MigrateCommand) # 添加数据库迁移的脚本命令</span><br></pre></td></tr></table></figure>\n<p>迁移三部曲：</p>\n<ol>\n<li>pyhton manage.py <strong>migrate_command</strong> <strong>init</strong> # 这里的migrate_command即是上面的‘mysql’</li>\n<li>python manage.py <strong>migrate_command</strong> <strong>migrate</strong> -m “database_migrate”</li>\n<li>python manage.py <strong>migrate_command</strong> <strong>upgrade</strong><h4 id=\"查找一个作者的所有文章\"><a href=\"#查找一个作者的所有文章\" class=\"headerlink\" title=\"查找一个作者的所有文章\"></a>查找一个作者的所有文章</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Author.query.filter(Author.id==1).first().article.all()</span><br><span class=\"line\"># 返回一个查询集列表</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"查找某篇文章的作者\"><a href=\"#查找某篇文章的作者\" class=\"headerlink\" title=\"查找某篇文章的作者\"></a>查找某篇文章的作者</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author = Article.query.filter(Article.title==&apos;Python孙行者&apos;).first().author</span><br><span class=\"line\"># 返回的是一个作者查询集对象，可以author.name进行查询具体的名字</span><br></pre></td></tr></table></figure>\n<h3 id=\"多对多\"><a href=\"#多对多\" class=\"headerlink\" title=\"多对多\"></a>多对多</h3><p>多对多一般使用一张中间表和两个一对多进而降低难度和更容易理解。下面以用户收藏新闻为例，一个用户可以收藏多条新闻，一条新闻可以被多个用户收藏，那么这个就是一个多对多的关系。<br>我们可以通过一张用户表（用户id，姓名，用户收藏的新闻的一个关联属性），一张新闻表（新闻id，新闻标题）以及一张中间表（用户id，新闻id）。<br>用户表：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>张三</td>\n</tr>\n<tr>\n<td>2</td>\n<td>李四</td>\n</tr>\n<tr>\n<td>3</td>\n<td>王五</td>\n</tr>\n</tbody>\n</table>\n<p>新闻表：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>title</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>六一</td>\n</tr>\n<tr>\n<td>2</td>\n<td>七一</td>\n</tr>\n<tr>\n<td>3</td>\n<td>十一</td>\n</tr>\n</tbody>\n</table>\n<p>中间表：</p>\n<table>\n<thead>\n<tr>\n<th>user_id</th>\n<th>news_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>比如说，需要查找张三收藏了哪些新闻，那么我们就可以根据张三的用户id到中间表查询user_id为1的所有的news_id的数据，然后再回到新闻表，去根据news_id就可以查到对应的标题了。<br>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 中间表</span><br><span class=\"line\">tb_user_collections = db.Table(&quot;info_user_collections&quot;,</span><br><span class=\"line\">                                                 db.Cloumn(&quot;user_id&quot;, db.Integer, db.ForeignKey(&quot;info_user.id&quot;)),</span><br><span class=\"line\">                                                 db.Cloumn(&quot;news_id&quot;, db.Integer, db.ForgignKey(&quot;info_news.id&quot;)))</span><br><span class=\"line\"># 用户模型</span><br><span class=\"line\">class User(db.Model):</span><br><span class=\"line\">    __tablename__ = &quot;info_user&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True)  # 用户编号</span><br><span class=\"line\">    name = db.Column(db.String(32), unique=True, nullable=False)  # 用户昵称</span><br><span class=\"line\">    collection_news = db.relationship(&quot;News&quot;, secondary=tb_user_collections, backref=&quot;user&quot;, lazy=&quot;dynamic&quot;)   </span><br><span class=\"line\"># 新闻模型</span><br><span class=\"line\">class News(db.Model):</span><br><span class=\"line\">        __tablename__ = &quot;info_news&quot;       </span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True)  # 新闻id   </span><br><span class=\"line\">    title = db.Column(db.String(32), nullable=False) # 新闻标题</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自关联\"><a href=\"#自关联\" class=\"headerlink\" title=\"自关联\"></a>自关联</h3><p>自关联最常见就是评论盖楼和地址的三级联动了，下面一评论盖楼为例：<br>一个评论下面有很多追加的评论，这是可以通过记录父评论的id就可以一环扣一环形成完整了评论楼层</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>content</th>\n<th>parent_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>哈哈</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>2</td>\n<td>6666</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>88888</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Comment(db.Model):</span><br><span class=\"line\">    &quot;&quot;&quot;评论&quot;&quot;&quot;</span><br><span class=\"line\">    __tablename__ = &quot;info_comment&quot;</span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True)  # 评论编号</span><br><span class=\"line\">    content = db.Column(db.Text, nullable=False)  # 评论内容</span><br><span class=\"line\">    parent_id = db.Column(db.Integer, db.ForeignKey(&quot;info_comment.id&quot;))  # 父评论id</span><br><span class=\"line\">    parent = db.relationship(&quot;Comment&quot;, remote_side=[id])  # 自关联</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Flask的一对多多对多以及自关联的总结","more":"<br>在Flask中创建数据模型类，需要继续自flask_sqlalchemy.SQLAchemy().models.Model<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_sqlalchemy import SQLAchemy</span><br><span class=\"line\">db = SQLAchemy(flask_app).models.Model</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一对多\"><a href=\"#一对多\" class=\"headerlink\" title=\"一对多\"></a>一对多</h3><h4 id=\"一对多模型的实现\"><a href=\"#一对多模型的实现\" class=\"headerlink\" title=\"一对多模型的实现\"></a>一对多模型的实现</h4><p>一对多的模型类实现可以通过db.relationship（在一的一方）和db.ForeignKey（在多的一方）.比如一个作者可以有多篇文章<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Author(db.Model):</span><br><span class=\"line\">    __tablename__ = &apos;info_author&apos;</span><br><span class=\"line\">    id = db.Column(db.Integer,primary_key=True)</span><br><span class=\"line\">    name = db.Column(db.String(20), nullable=False)</span><br><span class=\"line\">    # 一的一方，relationship为Author 添加article属性，Author_obj.article内容是以Author_obj.id == Article.author_id的一组Article对象</span><br><span class=\"line\">    # backref（反向引用） 则为Article添加author属性，Article_obj.author内容是以Article.author_id == Author_obj.id 的Author_obj</span><br><span class=\"line\">    article = db.relationship(&quot;Article&quot;,backref=&apos;author&apos;,lazy=&apos;dynamic&apos;)</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    lazy: 指定sqlalchemy数据库什么时候加载数据</span><br><span class=\"line\">        select: 就是访问到属性的时候，就会全部加载该属性的数据</span><br><span class=\"line\">        joined: 对关联的两个表使用联接</span><br><span class=\"line\">        subquery: 与joined类似，但使用子子查询</span><br><span class=\"line\">        dynamic: 不加载记录，但提供加载记录的查询，也就是生成query对象</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Article(db.Model):</span><br><span class=\"line\">    __tablename__ = &quot;info_article&quot;</span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True)</span><br><span class=\"line\">    title = db.Column(db.String(20),nullable=False)</span><br><span class=\"line\">    # 多的一方，author_id 的取值范围只能在info_author.id的范围内</span><br><span class=\"line\">    author_id = db.Column(db.Integer,db.ForeignKey(&apos;info_author.id&apos;))</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"一对多和多对一的关联查询使用\"><a href=\"#一对多和多对一的关联查询使用\" class=\"headerlink\" title=\"一对多和多对一的关联查询使用\"></a>一对多和多对一的关联查询使用</h4><p>在flask_sqlalchemy中，插入、修改、删除操作，均由数据库会话管理。<br>会话用 db.session 表示。在准备把数据写入数据库前，要先将数据添加到会话中然后调用 commit() 方法提交会话。<br>在 flask_sqlalchemy中，查询操作是通过 query 对象操作数据。<br>最基本的查询是返回表中所有数据，可以通过过滤器进行更精确的数据库查询。</p>\n<h4 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_migrate import Migrate, MigrateCommand</span><br><span class=\"line\">from flask_script import Manager</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">manager = Manager(app) # 脚本命令</span><br><span class=\"line\">migrate = Migrate(app,db) # 数据库迁移绑定</span><br><span class=\"line\">manager.add_command(&apos;mysql&apos;,MigrateCommand) # 添加数据库迁移的脚本命令</span><br></pre></td></tr></table></figure>\n<p>迁移三部曲：</p>\n<ol>\n<li>pyhton manage.py <strong>migrate_command</strong> <strong>init</strong> # 这里的migrate_command即是上面的‘mysql’</li>\n<li>python manage.py <strong>migrate_command</strong> <strong>migrate</strong> -m “database_migrate”</li>\n<li>python manage.py <strong>migrate_command</strong> <strong>upgrade</strong><h4 id=\"查找一个作者的所有文章\"><a href=\"#查找一个作者的所有文章\" class=\"headerlink\" title=\"查找一个作者的所有文章\"></a>查找一个作者的所有文章</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Author.query.filter(Author.id==1).first().article.all()</span><br><span class=\"line\"># 返回一个查询集列表</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"查找某篇文章的作者\"><a href=\"#查找某篇文章的作者\" class=\"headerlink\" title=\"查找某篇文章的作者\"></a>查找某篇文章的作者</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author = Article.query.filter(Article.title==&apos;Python孙行者&apos;).first().author</span><br><span class=\"line\"># 返回的是一个作者查询集对象，可以author.name进行查询具体的名字</span><br></pre></td></tr></table></figure>\n<h3 id=\"多对多\"><a href=\"#多对多\" class=\"headerlink\" title=\"多对多\"></a>多对多</h3><p>多对多一般使用一张中间表和两个一对多进而降低难度和更容易理解。下面以用户收藏新闻为例，一个用户可以收藏多条新闻，一条新闻可以被多个用户收藏，那么这个就是一个多对多的关系。<br>我们可以通过一张用户表（用户id，姓名，用户收藏的新闻的一个关联属性），一张新闻表（新闻id，新闻标题）以及一张中间表（用户id，新闻id）。<br>用户表：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>张三</td>\n</tr>\n<tr>\n<td>2</td>\n<td>李四</td>\n</tr>\n<tr>\n<td>3</td>\n<td>王五</td>\n</tr>\n</tbody>\n</table>\n<p>新闻表：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>title</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>六一</td>\n</tr>\n<tr>\n<td>2</td>\n<td>七一</td>\n</tr>\n<tr>\n<td>3</td>\n<td>十一</td>\n</tr>\n</tbody>\n</table>\n<p>中间表：</p>\n<table>\n<thead>\n<tr>\n<th>user_id</th>\n<th>news_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>比如说，需要查找张三收藏了哪些新闻，那么我们就可以根据张三的用户id到中间表查询user_id为1的所有的news_id的数据，然后再回到新闻表，去根据news_id就可以查到对应的标题了。<br>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 中间表</span><br><span class=\"line\">tb_user_collections = db.Table(&quot;info_user_collections&quot;,</span><br><span class=\"line\">                                                 db.Cloumn(&quot;user_id&quot;, db.Integer, db.ForeignKey(&quot;info_user.id&quot;)),</span><br><span class=\"line\">                                                 db.Cloumn(&quot;news_id&quot;, db.Integer, db.ForgignKey(&quot;info_news.id&quot;)))</span><br><span class=\"line\"># 用户模型</span><br><span class=\"line\">class User(db.Model):</span><br><span class=\"line\">    __tablename__ = &quot;info_user&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True)  # 用户编号</span><br><span class=\"line\">    name = db.Column(db.String(32), unique=True, nullable=False)  # 用户昵称</span><br><span class=\"line\">    collection_news = db.relationship(&quot;News&quot;, secondary=tb_user_collections, backref=&quot;user&quot;, lazy=&quot;dynamic&quot;)   </span><br><span class=\"line\"># 新闻模型</span><br><span class=\"line\">class News(db.Model):</span><br><span class=\"line\">        __tablename__ = &quot;info_news&quot;       </span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True)  # 新闻id   </span><br><span class=\"line\">    title = db.Column(db.String(32), nullable=False) # 新闻标题</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自关联\"><a href=\"#自关联\" class=\"headerlink\" title=\"自关联\"></a>自关联</h3><p>自关联最常见就是评论盖楼和地址的三级联动了，下面一评论盖楼为例：<br>一个评论下面有很多追加的评论，这是可以通过记录父评论的id就可以一环扣一环形成完整了评论楼层</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>content</th>\n<th>parent_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>哈哈</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>2</td>\n<td>6666</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>88888</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Comment(db.Model):</span><br><span class=\"line\">    &quot;&quot;&quot;评论&quot;&quot;&quot;</span><br><span class=\"line\">    __tablename__ = &quot;info_comment&quot;</span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True)  # 评论编号</span><br><span class=\"line\">    content = db.Column(db.Text, nullable=False)  # 评论内容</span><br><span class=\"line\">    parent_id = db.Column(db.Integer, db.ForeignKey(&quot;info_comment.id&quot;))  # 父评论id</span><br><span class=\"line\">    parent = db.relationship(&quot;Comment&quot;, remote_side=[id])  # 自关联</span><br></pre></td></tr></table></figure>"},{"title":"Golang待续","comments":1,"date":"2018-12-05T12:45:31.000Z","_content":"Golang 待整理发布！\n","source":"_posts/Golang待续.md","raw":"---\ntitle: Golang待续\ncomments: true\ndate: 2018-12-05 20:45:31\ntags:\n- 待续\ncategories:\n- golang\n---\nGolang 待整理发布！\n","slug":"Golang待续","published":1,"updated":"2019-05-25T09:32:43.099Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtcd000he5vxc2ry9ebs","content":"<p>Golang 待整理发布！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Golang 待整理发布！</p>\n"},{"title":"Linux中su/su -/sudo的区别","toc":true,"comments":1,"date":"2018-08-01T03:12:35.000Z","_content":"在linux中会经常使用到su/su -/sudo这三个命令，总结一下这三个命令的区别。<!--more-->\n### su\n使用root密码，切换到root用户，但是并没有转到root用户家目录下。\n![](http://paresur4s.bkt.clouddn.com/FiL041JlBlIjm3-4OBKBrcx3B-Tt)\n### su -\n使用root密码，切换到root用户，并转到root用户的家目录下。\n![](http://paresur4s.bkt.clouddn.com/FsQytdVVK0BiT0qRS7XeQdifOzKh)\n### sudo\n使用**当前用户密码**，把某些超级权限有针对性的下放，sudo 也可以称为受限制的su。\n![](http://paresur4s.bkt.clouddn.com/FtkIjNHA8lCrQtzYtbaXxbrT7j6b)\n### 总结\n* su 使用的是root密码，但不会切换到root家目录\n* su - 使用的也是root密码，切换到root家目录\n* sudo 使用的是当前用户的密码\n","source":"_posts/Linux中su-su-sudo的区别.md","raw":"---\ntitle: Linux中su/su -/sudo的区别\ntoc: true\ncomments: true\ndate: 2018-08-01 11:12:35\ncategories:\n- Linux\ntags:\n- su\n---\n在linux中会经常使用到su/su -/sudo这三个命令，总结一下这三个命令的区别。<!--more-->\n### su\n使用root密码，切换到root用户，但是并没有转到root用户家目录下。\n![](http://paresur4s.bkt.clouddn.com/FiL041JlBlIjm3-4OBKBrcx3B-Tt)\n### su -\n使用root密码，切换到root用户，并转到root用户的家目录下。\n![](http://paresur4s.bkt.clouddn.com/FsQytdVVK0BiT0qRS7XeQdifOzKh)\n### sudo\n使用**当前用户密码**，把某些超级权限有针对性的下放，sudo 也可以称为受限制的su。\n![](http://paresur4s.bkt.clouddn.com/FtkIjNHA8lCrQtzYtbaXxbrT7j6b)\n### 总结\n* su 使用的是root密码，但不会切换到root家目录\n* su - 使用的也是root密码，切换到root家目录\n* sudo 使用的是当前用户的密码\n","slug":"Linux中su-su-sudo的区别","published":1,"updated":"2019-05-25T09:32:43.099Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtck000le5vxo25vt3u4","content":"<p>在linux中会经常使用到su/su -/sudo这三个命令，总结一下这三个命令的区别。<a id=\"more\"></a></p>\n<h3 id=\"su\"><a href=\"#su\" class=\"headerlink\" title=\"su\"></a>su</h3><p>使用root密码，切换到root用户，但是并没有转到root用户家目录下。<br><img src=\"http://paresur4s.bkt.clouddn.com/FiL041JlBlIjm3-4OBKBrcx3B-Tt\" alt=\"\"></p>\n<h3 id=\"su-1\"><a href=\"#su-1\" class=\"headerlink\" title=\"su -\"></a>su -</h3><p>使用root密码，切换到root用户，并转到root用户的家目录下。<br><img src=\"http://paresur4s.bkt.clouddn.com/FsQytdVVK0BiT0qRS7XeQdifOzKh\" alt=\"\"></p>\n<h3 id=\"sudo\"><a href=\"#sudo\" class=\"headerlink\" title=\"sudo\"></a>sudo</h3><p>使用<strong>当前用户密码</strong>，把某些超级权限有针对性的下放，sudo 也可以称为受限制的su。<br><img src=\"http://paresur4s.bkt.clouddn.com/FtkIjNHA8lCrQtzYtbaXxbrT7j6b\" alt=\"\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>su 使用的是root密码，但不会切换到root家目录</li>\n<li>su - 使用的也是root密码，切换到root家目录</li>\n<li>sudo 使用的是当前用户的密码</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在linux中会经常使用到su/su -/sudo这三个命令，总结一下这三个命令的区别。","more":"</p>\n<h3 id=\"su\"><a href=\"#su\" class=\"headerlink\" title=\"su\"></a>su</h3><p>使用root密码，切换到root用户，但是并没有转到root用户家目录下。<br><img src=\"http://paresur4s.bkt.clouddn.com/FiL041JlBlIjm3-4OBKBrcx3B-Tt\" alt=\"\"></p>\n<h3 id=\"su-1\"><a href=\"#su-1\" class=\"headerlink\" title=\"su -\"></a>su -</h3><p>使用root密码，切换到root用户，并转到root用户的家目录下。<br><img src=\"http://paresur4s.bkt.clouddn.com/FsQytdVVK0BiT0qRS7XeQdifOzKh\" alt=\"\"></p>\n<h3 id=\"sudo\"><a href=\"#sudo\" class=\"headerlink\" title=\"sudo\"></a>sudo</h3><p>使用<strong>当前用户密码</strong>，把某些超级权限有针对性的下放，sudo 也可以称为受限制的su。<br><img src=\"http://paresur4s.bkt.clouddn.com/FtkIjNHA8lCrQtzYtbaXxbrT7j6b\" alt=\"\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>su 使用的是root密码，但不会切换到root家目录</li>\n<li>su - 使用的也是root密码，切换到root家目录</li>\n<li>sudo 使用的是当前用户的密码</li>\n</ul>"},{"title":"Python异常处理机制下finally的陷阱","comments":1,"date":"2019-05-12T12:54:15.000Z","_content":"\n整理异常处理中finally的两个陷阱\n<!--more-->\n### Python异常处理机制\n![](https://i.loli.net/2019/05/12/5cd81ac89751d.gif)\n\n**如果try异常处理中存在finally，finally中的代码总会得到执行**下面例子只是作为演示，不用去纠结业务逻辑\n### 挖坑1\n看下面的代码，写出输出结果\n```\ndef dig_dig1():\n    while True:\n        print(\"I'm in while loop\")\n        try:\n            print(\"I'm in try\")\n            raise EOFError\n        except IOError:\n            print(\"IOEoor\")\n        finally:\n            print(\"I'm in finally\")\n            break\n\n\ndig_dig1()\n```\n原以为会输出的结果：\n```\nI'm in while loop\nI'm in try\nI'm in finally\nEOFError\n\nProcess finished with exit code 1\n```\n运行结果\n```\nI'm in while loop\nI'm in try\nI'm in finally\n\nProcess finished with exit code 0\n```\n**如果异常处理中存在finally， finally总会被执行**。那么在执行finally之前，try中的产生的异常将会被临时保存起来，当finally的代码执行完成后，再抛出异常。但当finally中存在raise或return或break时， try中的异常将会被抛弃。\n### 挖坑2\n看下面的代码，写出输出结果\n```\ndef dig_dig2(index):\n    try:\n        print(\"I'm in try\")\n        if index < 0:\n            raise IndexError\n        else:\n            return index\n    except IndexError:\n        print(\"I'm in except\")\n        return \"except\"\n    finally:\n        print(\"I'm in finally\")\n        return \"finally\"\n\n\nprint(dig_dig2(12))\n```\n原以为会输出的结果：\n```\nI'm in try\n12\n```\n运行结果\n```\nI'm in try\nI'm in finally\nfinally\n\nProcess finished with exit code 0\n\n```\n**如果异常处理中存在finally， finally总会被执行**。\n1. 如果在try块语句中存在return的同时又存在finally块语句，那么将会在执行try块语句中return语句之前去执行finally语句块，然后再回来执行try块语句中return语句。\n2. 但是例子中在finally块语句中存在return语句，整个函数已结束，所以try块语句中return语句将永远得不到执行。\n","source":"_posts/Python-exception-handler-finally.md","raw":"---\ntitle: Python异常处理机制下finally的陷阱\ncomments: true\ndate: 2019-05-12 20:54:15\ntags:\n- finally\ncategory:\n- Python\n---\n\n整理异常处理中finally的两个陷阱\n<!--more-->\n### Python异常处理机制\n![](https://i.loli.net/2019/05/12/5cd81ac89751d.gif)\n\n**如果try异常处理中存在finally，finally中的代码总会得到执行**下面例子只是作为演示，不用去纠结业务逻辑\n### 挖坑1\n看下面的代码，写出输出结果\n```\ndef dig_dig1():\n    while True:\n        print(\"I'm in while loop\")\n        try:\n            print(\"I'm in try\")\n            raise EOFError\n        except IOError:\n            print(\"IOEoor\")\n        finally:\n            print(\"I'm in finally\")\n            break\n\n\ndig_dig1()\n```\n原以为会输出的结果：\n```\nI'm in while loop\nI'm in try\nI'm in finally\nEOFError\n\nProcess finished with exit code 1\n```\n运行结果\n```\nI'm in while loop\nI'm in try\nI'm in finally\n\nProcess finished with exit code 0\n```\n**如果异常处理中存在finally， finally总会被执行**。那么在执行finally之前，try中的产生的异常将会被临时保存起来，当finally的代码执行完成后，再抛出异常。但当finally中存在raise或return或break时， try中的异常将会被抛弃。\n### 挖坑2\n看下面的代码，写出输出结果\n```\ndef dig_dig2(index):\n    try:\n        print(\"I'm in try\")\n        if index < 0:\n            raise IndexError\n        else:\n            return index\n    except IndexError:\n        print(\"I'm in except\")\n        return \"except\"\n    finally:\n        print(\"I'm in finally\")\n        return \"finally\"\n\n\nprint(dig_dig2(12))\n```\n原以为会输出的结果：\n```\nI'm in try\n12\n```\n运行结果\n```\nI'm in try\nI'm in finally\nfinally\n\nProcess finished with exit code 0\n\n```\n**如果异常处理中存在finally， finally总会被执行**。\n1. 如果在try块语句中存在return的同时又存在finally块语句，那么将会在执行try块语句中return语句之前去执行finally语句块，然后再回来执行try块语句中return语句。\n2. 但是例子中在finally块语句中存在return语句，整个函数已结束，所以try块语句中return语句将永远得不到执行。\n","slug":"Python-exception-handler-finally","published":1,"updated":"2019-05-25T09:32:43.100Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtcm000ne5vx1zrz1fuo","content":"<p>整理异常处理中finally的两个陷阱<br><a id=\"more\"></a></p>\n<h3 id=\"Python异常处理机制\"><a href=\"#Python异常处理机制\" class=\"headerlink\" title=\"Python异常处理机制\"></a>Python异常处理机制</h3><p><img src=\"https://i.loli.net/2019/05/12/5cd81ac89751d.gif\" alt=\"\"></p>\n<p><strong>如果try异常处理中存在finally，finally中的代码总会得到执行</strong>下面例子只是作为演示，不用去纠结业务逻辑</p>\n<h3 id=\"挖坑1\"><a href=\"#挖坑1\" class=\"headerlink\" title=\"挖坑1\"></a>挖坑1</h3><p>看下面的代码，写出输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def dig_dig1():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        print(&quot;I&apos;m in while loop&quot;)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            print(&quot;I&apos;m in try&quot;)</span><br><span class=\"line\">            raise EOFError</span><br><span class=\"line\">        except IOError:</span><br><span class=\"line\">            print(&quot;IOEoor&quot;)</span><br><span class=\"line\">        finally:</span><br><span class=\"line\">            print(&quot;I&apos;m in finally&quot;)</span><br><span class=\"line\">            break</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dig_dig1()</span><br></pre></td></tr></table></figure></p>\n<p>原以为会输出的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&apos;m in while loop</span><br><span class=\"line\">I&apos;m in try</span><br><span class=\"line\">I&apos;m in finally</span><br><span class=\"line\">EOFError</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 1</span><br></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&apos;m in while loop</span><br><span class=\"line\">I&apos;m in try</span><br><span class=\"line\">I&apos;m in finally</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p>\n<p><strong>如果异常处理中存在finally， finally总会被执行</strong>。那么在执行finally之前，try中的产生的异常将会被临时保存起来，当finally的代码执行完成后，再抛出异常。但当finally中存在raise或return或break时， try中的异常将会被抛弃。</p>\n<h3 id=\"挖坑2\"><a href=\"#挖坑2\" class=\"headerlink\" title=\"挖坑2\"></a>挖坑2</h3><p>看下面的代码，写出输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def dig_dig2(index):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        print(&quot;I&apos;m in try&quot;)</span><br><span class=\"line\">        if index &lt; 0:</span><br><span class=\"line\">            raise IndexError</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return index</span><br><span class=\"line\">    except IndexError:</span><br><span class=\"line\">        print(&quot;I&apos;m in except&quot;)</span><br><span class=\"line\">        return &quot;except&quot;</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        print(&quot;I&apos;m in finally&quot;)</span><br><span class=\"line\">        return &quot;finally&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(dig_dig2(12))</span><br></pre></td></tr></table></figure></p>\n<p>原以为会输出的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&apos;m in try</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&apos;m in try</span><br><span class=\"line\">I&apos;m in finally</span><br><span class=\"line\">finally</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p>\n<p><strong>如果异常处理中存在finally， finally总会被执行</strong>。</p>\n<ol>\n<li>如果在try块语句中存在return的同时又存在finally块语句，那么将会在执行try块语句中return语句之前去执行finally语句块，然后再回来执行try块语句中return语句。</li>\n<li>但是例子中在finally块语句中存在return语句，整个函数已结束，所以try块语句中return语句将永远得不到执行。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>整理异常处理中finally的两个陷阱<br>","more":"</p>\n<h3 id=\"Python异常处理机制\"><a href=\"#Python异常处理机制\" class=\"headerlink\" title=\"Python异常处理机制\"></a>Python异常处理机制</h3><p><img src=\"https://i.loli.net/2019/05/12/5cd81ac89751d.gif\" alt=\"\"></p>\n<p><strong>如果try异常处理中存在finally，finally中的代码总会得到执行</strong>下面例子只是作为演示，不用去纠结业务逻辑</p>\n<h3 id=\"挖坑1\"><a href=\"#挖坑1\" class=\"headerlink\" title=\"挖坑1\"></a>挖坑1</h3><p>看下面的代码，写出输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def dig_dig1():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        print(&quot;I&apos;m in while loop&quot;)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            print(&quot;I&apos;m in try&quot;)</span><br><span class=\"line\">            raise EOFError</span><br><span class=\"line\">        except IOError:</span><br><span class=\"line\">            print(&quot;IOEoor&quot;)</span><br><span class=\"line\">        finally:</span><br><span class=\"line\">            print(&quot;I&apos;m in finally&quot;)</span><br><span class=\"line\">            break</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dig_dig1()</span><br></pre></td></tr></table></figure></p>\n<p>原以为会输出的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&apos;m in while loop</span><br><span class=\"line\">I&apos;m in try</span><br><span class=\"line\">I&apos;m in finally</span><br><span class=\"line\">EOFError</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 1</span><br></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&apos;m in while loop</span><br><span class=\"line\">I&apos;m in try</span><br><span class=\"line\">I&apos;m in finally</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p>\n<p><strong>如果异常处理中存在finally， finally总会被执行</strong>。那么在执行finally之前，try中的产生的异常将会被临时保存起来，当finally的代码执行完成后，再抛出异常。但当finally中存在raise或return或break时， try中的异常将会被抛弃。</p>\n<h3 id=\"挖坑2\"><a href=\"#挖坑2\" class=\"headerlink\" title=\"挖坑2\"></a>挖坑2</h3><p>看下面的代码，写出输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def dig_dig2(index):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        print(&quot;I&apos;m in try&quot;)</span><br><span class=\"line\">        if index &lt; 0:</span><br><span class=\"line\">            raise IndexError</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return index</span><br><span class=\"line\">    except IndexError:</span><br><span class=\"line\">        print(&quot;I&apos;m in except&quot;)</span><br><span class=\"line\">        return &quot;except&quot;</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        print(&quot;I&apos;m in finally&quot;)</span><br><span class=\"line\">        return &quot;finally&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(dig_dig2(12))</span><br></pre></td></tr></table></figure></p>\n<p>原以为会输出的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&apos;m in try</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I&apos;m in try</span><br><span class=\"line\">I&apos;m in finally</span><br><span class=\"line\">finally</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p>\n<p><strong>如果异常处理中存在finally， finally总会被执行</strong>。</p>\n<ol>\n<li>如果在try块语句中存在return的同时又存在finally块语句，那么将会在执行try块语句中return语句之前去执行finally语句块，然后再回来执行try块语句中return语句。</li>\n<li>但是例子中在finally块语句中存在return语句，整个函数已结束，所以try块语句中return语句将永远得不到执行。</li>\n</ol>"},{"title":"MySQL修改默认引擎的方法","comments":1,"toc":true,"date":"2018-08-15T07:06:51.000Z","_content":"MySQL数据库自5.5版本开始，InnoDB是MySQL数据库的默认引擎（之前是MyISAM）<!--more-->\n\n### 查看引擎show engines\n![](https://pic1.zhimg.com/80/v2-459f4aa9d09d1fade4a2424ab939ef55_hd.jpg)\n\n\n### 主要区别\n1. InnoDB支持外键和事务，MyISAM不支持外键和事务\n对于InnoDB每一条SQL语句都默认封装成事务，自带提交。\n2. InnoDB是聚焦索引，MyISAM是非聚焦索引。\nInnoDB是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而MyISAM是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。\n3. InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；\n4. InnoDB不支持全文索引，而MyISAM支持全文索引，查询效率上MyISAM要高\n\n### 修改默认引擎方法\n那么就需要根据具体的情况进行选择使用哪个引擎，那么就看看如何修改默认引擎：\n#### 切换路径：\n\n```\ncd /etc/mysql/\n```\n\n#### 修改my.cnf文件：\n\n1. 在my.cnf文件的头部添加\"[mysqld]\"\n2. 添加 \"defaulr-storage-engine = 数据库引擎名（INNODB/MYISAM）\"\n\n![](https://pic2.zhimg.com/80/v2-0c7840a01f8528f637016beb71524467_hd.jpg)\n\n#### 重启MySQL服务\n```\nsudo service mysql restart\n```\n默认引擎修改完毕\n\n![](https://pic2.zhimg.com/80/v2-0a65567f86cb6ea008f475d221ec4822_hd.jpg)\n","source":"_posts/MySQL修改默认引擎的方法.md","raw":"---\ntitle: MySQL修改默认引擎的方法\ncomments: true\ntoc: true\ndate: 2018-08-15 15:06:51\ncategories:\n- DataBase\ntags:\n- MySQL 数据库引擎\n---\nMySQL数据库自5.5版本开始，InnoDB是MySQL数据库的默认引擎（之前是MyISAM）<!--more-->\n\n### 查看引擎show engines\n![](https://pic1.zhimg.com/80/v2-459f4aa9d09d1fade4a2424ab939ef55_hd.jpg)\n\n\n### 主要区别\n1. InnoDB支持外键和事务，MyISAM不支持外键和事务\n对于InnoDB每一条SQL语句都默认封装成事务，自带提交。\n2. InnoDB是聚焦索引，MyISAM是非聚焦索引。\nInnoDB是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而MyISAM是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。\n3. InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；\n4. InnoDB不支持全文索引，而MyISAM支持全文索引，查询效率上MyISAM要高\n\n### 修改默认引擎方法\n那么就需要根据具体的情况进行选择使用哪个引擎，那么就看看如何修改默认引擎：\n#### 切换路径：\n\n```\ncd /etc/mysql/\n```\n\n#### 修改my.cnf文件：\n\n1. 在my.cnf文件的头部添加\"[mysqld]\"\n2. 添加 \"defaulr-storage-engine = 数据库引擎名（INNODB/MYISAM）\"\n\n![](https://pic2.zhimg.com/80/v2-0c7840a01f8528f637016beb71524467_hd.jpg)\n\n#### 重启MySQL服务\n```\nsudo service mysql restart\n```\n默认引擎修改完毕\n\n![](https://pic2.zhimg.com/80/v2-0a65567f86cb6ea008f475d221ec4822_hd.jpg)\n","slug":"MySQL修改默认引擎的方法","published":1,"updated":"2019-05-25T09:32:43.099Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtco000re5vx86kskots","content":"<p>MySQL数据库自5.5版本开始，InnoDB是MySQL数据库的默认引擎（之前是MyISAM）<a id=\"more\"></a></p>\n<h3 id=\"查看引擎show-engines\"><a href=\"#查看引擎show-engines\" class=\"headerlink\" title=\"查看引擎show engines\"></a>查看引擎show engines</h3><p><img src=\"https://pic1.zhimg.com/80/v2-459f4aa9d09d1fade4a2424ab939ef55_hd.jpg\" alt=\"\"></p>\n<h3 id=\"主要区别\"><a href=\"#主要区别\" class=\"headerlink\" title=\"主要区别\"></a>主要区别</h3><ol>\n<li>InnoDB支持外键和事务，MyISAM不支持外键和事务<br>对于InnoDB每一条SQL语句都默认封装成事务，自带提交。</li>\n<li>InnoDB是聚焦索引，MyISAM是非聚焦索引。<br>InnoDB是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而MyISAM是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</li>\n<li>InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；</li>\n<li>InnoDB不支持全文索引，而MyISAM支持全文索引，查询效率上MyISAM要高</li>\n</ol>\n<h3 id=\"修改默认引擎方法\"><a href=\"#修改默认引擎方法\" class=\"headerlink\" title=\"修改默认引擎方法\"></a>修改默认引擎方法</h3><p>那么就需要根据具体的情况进行选择使用哪个引擎，那么就看看如何修改默认引擎：</p>\n<h4 id=\"切换路径：\"><a href=\"#切换路径：\" class=\"headerlink\" title=\"切换路径：\"></a>切换路径：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/mysql/</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改my-cnf文件：\"><a href=\"#修改my-cnf文件：\" class=\"headerlink\" title=\"修改my.cnf文件：\"></a>修改my.cnf文件：</h4><ol>\n<li>在my.cnf文件的头部添加”[mysqld]”</li>\n<li>添加 “defaulr-storage-engine = 数据库引擎名（INNODB/MYISAM）”</li>\n</ol>\n<p><img src=\"https://pic2.zhimg.com/80/v2-0c7840a01f8528f637016beb71524467_hd.jpg\" alt=\"\"></p>\n<h4 id=\"重启MySQL服务\"><a href=\"#重启MySQL服务\" class=\"headerlink\" title=\"重启MySQL服务\"></a>重启MySQL服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service mysql restart</span><br></pre></td></tr></table></figure>\n<p>默认引擎修改完毕</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-0a65567f86cb6ea008f475d221ec4822_hd.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>MySQL数据库自5.5版本开始，InnoDB是MySQL数据库的默认引擎（之前是MyISAM）","more":"</p>\n<h3 id=\"查看引擎show-engines\"><a href=\"#查看引擎show-engines\" class=\"headerlink\" title=\"查看引擎show engines\"></a>查看引擎show engines</h3><p><img src=\"https://pic1.zhimg.com/80/v2-459f4aa9d09d1fade4a2424ab939ef55_hd.jpg\" alt=\"\"></p>\n<h3 id=\"主要区别\"><a href=\"#主要区别\" class=\"headerlink\" title=\"主要区别\"></a>主要区别</h3><ol>\n<li>InnoDB支持外键和事务，MyISAM不支持外键和事务<br>对于InnoDB每一条SQL语句都默认封装成事务，自带提交。</li>\n<li>InnoDB是聚焦索引，MyISAM是非聚焦索引。<br>InnoDB是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而MyISAM是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</li>\n<li>InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；</li>\n<li>InnoDB不支持全文索引，而MyISAM支持全文索引，查询效率上MyISAM要高</li>\n</ol>\n<h3 id=\"修改默认引擎方法\"><a href=\"#修改默认引擎方法\" class=\"headerlink\" title=\"修改默认引擎方法\"></a>修改默认引擎方法</h3><p>那么就需要根据具体的情况进行选择使用哪个引擎，那么就看看如何修改默认引擎：</p>\n<h4 id=\"切换路径：\"><a href=\"#切换路径：\" class=\"headerlink\" title=\"切换路径：\"></a>切换路径：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/mysql/</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改my-cnf文件：\"><a href=\"#修改my-cnf文件：\" class=\"headerlink\" title=\"修改my.cnf文件：\"></a>修改my.cnf文件：</h4><ol>\n<li>在my.cnf文件的头部添加”[mysqld]”</li>\n<li>添加 “defaulr-storage-engine = 数据库引擎名（INNODB/MYISAM）”</li>\n</ol>\n<p><img src=\"https://pic2.zhimg.com/80/v2-0c7840a01f8528f637016beb71524467_hd.jpg\" alt=\"\"></p>\n<h4 id=\"重启MySQL服务\"><a href=\"#重启MySQL服务\" class=\"headerlink\" title=\"重启MySQL服务\"></a>重启MySQL服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service mysql restart</span><br></pre></td></tr></table></figure>\n<p>默认引擎修改完毕</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-0a65567f86cb6ea008f475d221ec4822_hd.jpg\" alt=\"\"></p>"},{"title":"Python中else其他用法","comments":1,"toc":true,"date":"2018-07-31T01:19:55.000Z","_content":"在Python中else最常见的用法就是用在判断语句中，其实还可以用在循环语句和异常处理中。<!--more-->\n下面来总结一下else的用法：\n### 判断语句\n这是最常见的用法，当if语句中的条件不满足时，将执行else语句中的代码。\n```\na = False\nif a:\n    print(\"a为真\")\nelse:\n    print(\"a为假\")\n```\n\n### 循环语句\n如果else子句紧接在循环语句的后面，那么在以下两种情况将会执行else子句的代码：\n* 当循环体没有执行break的时候，即循环体正常结束\n```\nprint(\"两次输入机会\")\nfor i in range(2):\n    num = int(input(\"请输入一个数字：\"))\n    if 10 == num:\n        print(\"10 == num,触发break，不会执行else子句\")\n        break\nelse:\n    print(\"循环体没有执行break语句，执行else子句\")\nprint(\"程序结束\")\n```\n执行代码：\n当触发break时,不会执行else子句：\n```\n两次输入机会\n请输入一个数字：1\n请输入一个数字：10\n10 == num,触发break，不会执行else子句\n程序结束\n```\n当没有触发break时,执行else子句：\n```\n两次输入机会\n请输入一个数字：2\n请输入一个数字：3\n循环体没有执行break语句，执行else子句\n程序结束\n```\n* 当while循环体完全不执行时也会执行紧跟在后面的else子句\n```\nwhile False:\n    pass\nelse:\n    print(\"循环体不执行，我也会执行\")\n# 执行后的输出结果：\n# 循环体不执行，我也会执行\n```\n### 异常处理\n当没有发生异常的时候会执行紧跟在异常处理代码后面的else子句\n```\nnum1 = int(input(\"输入一个整数：\"))\nnum2 = int(input(\"输入另外一个整数：\"))\nprint('-'*20)\ntry:\n    print(\"{}/{}=\".format(num1,num2),num1//num2)\nexcept ZeroDivisionError:\n    print(\"输入非法，ZeroDivisionError\")\nelse:\n    print(\"输入合法\")\nprint(\"程序结束\")   \n```\n代码执行：\n当没发生异常时：\n```\n输入一个整数：2\n输入另外一个整数：1\n----------------------------------------\n2/1= 2\n输入合法\n程序结束\n```\n发生异常时：\n```\n输入一个整数：2\n输入另外一个整数：0\n----------------------------------------\n输入非法，ZeroDivisionError\n程序结束\n```\n\n### 总结\nelse子句的触发条件：\n1. 在判断语句中，当if语句条件不满足时会就执行else子句的代码\n2. 在循环语句中，当循环体没有执行或者循环体没有执行break语句\n3. 在异常处理中，当没有发生异常时会执行else子句\n***一句话，循环和异常处理中，一切正常就执行else语句***\n","source":"_posts/Python中else其他用法.md","raw":"---\ntitle: Python中else其他用法\ncomments: true\ntoc: true\ndate: 2018-07-31 09:19:55\ncategories:\n- Python\ntags:\n- else其他用法\n---\n在Python中else最常见的用法就是用在判断语句中，其实还可以用在循环语句和异常处理中。<!--more-->\n下面来总结一下else的用法：\n### 判断语句\n这是最常见的用法，当if语句中的条件不满足时，将执行else语句中的代码。\n```\na = False\nif a:\n    print(\"a为真\")\nelse:\n    print(\"a为假\")\n```\n\n### 循环语句\n如果else子句紧接在循环语句的后面，那么在以下两种情况将会执行else子句的代码：\n* 当循环体没有执行break的时候，即循环体正常结束\n```\nprint(\"两次输入机会\")\nfor i in range(2):\n    num = int(input(\"请输入一个数字：\"))\n    if 10 == num:\n        print(\"10 == num,触发break，不会执行else子句\")\n        break\nelse:\n    print(\"循环体没有执行break语句，执行else子句\")\nprint(\"程序结束\")\n```\n执行代码：\n当触发break时,不会执行else子句：\n```\n两次输入机会\n请输入一个数字：1\n请输入一个数字：10\n10 == num,触发break，不会执行else子句\n程序结束\n```\n当没有触发break时,执行else子句：\n```\n两次输入机会\n请输入一个数字：2\n请输入一个数字：3\n循环体没有执行break语句，执行else子句\n程序结束\n```\n* 当while循环体完全不执行时也会执行紧跟在后面的else子句\n```\nwhile False:\n    pass\nelse:\n    print(\"循环体不执行，我也会执行\")\n# 执行后的输出结果：\n# 循环体不执行，我也会执行\n```\n### 异常处理\n当没有发生异常的时候会执行紧跟在异常处理代码后面的else子句\n```\nnum1 = int(input(\"输入一个整数：\"))\nnum2 = int(input(\"输入另外一个整数：\"))\nprint('-'*20)\ntry:\n    print(\"{}/{}=\".format(num1,num2),num1//num2)\nexcept ZeroDivisionError:\n    print(\"输入非法，ZeroDivisionError\")\nelse:\n    print(\"输入合法\")\nprint(\"程序结束\")   \n```\n代码执行：\n当没发生异常时：\n```\n输入一个整数：2\n输入另外一个整数：1\n----------------------------------------\n2/1= 2\n输入合法\n程序结束\n```\n发生异常时：\n```\n输入一个整数：2\n输入另外一个整数：0\n----------------------------------------\n输入非法，ZeroDivisionError\n程序结束\n```\n\n### 总结\nelse子句的触发条件：\n1. 在判断语句中，当if语句条件不满足时会就执行else子句的代码\n2. 在循环语句中，当循环体没有执行或者循环体没有执行break语句\n3. 在异常处理中，当没有发生异常时会执行else子句\n***一句话，循环和异常处理中，一切正常就执行else语句***\n","slug":"Python中else其他用法","published":1,"updated":"2019-05-25T09:32:43.100Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtcp000ue5vx1ptk3q9q","content":"<p>在Python中else最常见的用法就是用在判断语句中，其实还可以用在循环语句和异常处理中。<a id=\"more\"></a><br>下面来总结一下else的用法：</p>\n<h3 id=\"判断语句\"><a href=\"#判断语句\" class=\"headerlink\" title=\"判断语句\"></a>判断语句</h3><p>这是最常见的用法，当if语句中的条件不满足时，将执行else语句中的代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = False</span><br><span class=\"line\">if a:</span><br><span class=\"line\">    print(&quot;a为真&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;a为假&quot;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><p>如果else子句紧接在循环语句的后面，那么在以下两种情况将会执行else子句的代码：</p>\n<ul>\n<li>当循环体没有执行break的时候，即循环体正常结束<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;两次输入机会&quot;)</span><br><span class=\"line\">for i in range(2):</span><br><span class=\"line\">    num = int(input(&quot;请输入一个数字：&quot;))</span><br><span class=\"line\">    if 10 == num:</span><br><span class=\"line\">        print(&quot;10 == num,触发break，不会执行else子句&quot;)</span><br><span class=\"line\">        break</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;循环体没有执行break语句，执行else子句&quot;)</span><br><span class=\"line\">print(&quot;程序结束&quot;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行代码：<br>当触发break时,不会执行else子句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两次输入机会</span><br><span class=\"line\">请输入一个数字：1</span><br><span class=\"line\">请输入一个数字：10</span><br><span class=\"line\">10 == num,触发break，不会执行else子句</span><br><span class=\"line\">程序结束</span><br></pre></td></tr></table></figure></p>\n<p>当没有触发break时,执行else子句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两次输入机会</span><br><span class=\"line\">请输入一个数字：2</span><br><span class=\"line\">请输入一个数字：3</span><br><span class=\"line\">循环体没有执行break语句，执行else子句</span><br><span class=\"line\">程序结束</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>当while循环体完全不执行时也会执行紧跟在后面的else子句<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while False:</span><br><span class=\"line\">    pass</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;循环体不执行，我也会执行&quot;)</span><br><span class=\"line\"># 执行后的输出结果：</span><br><span class=\"line\"># 循环体不执行，我也会执行</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>当没有发生异常的时候会执行紧跟在异常处理代码后面的else子句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num1 = int(input(&quot;输入一个整数：&quot;))</span><br><span class=\"line\">num2 = int(input(&quot;输入另外一个整数：&quot;))</span><br><span class=\"line\">print(&apos;-&apos;*20)</span><br><span class=\"line\">try:</span><br><span class=\"line\">    print(&quot;&#123;&#125;/&#123;&#125;=&quot;.format(num1,num2),num1//num2)</span><br><span class=\"line\">except ZeroDivisionError:</span><br><span class=\"line\">    print(&quot;输入非法，ZeroDivisionError&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;输入合法&quot;)</span><br><span class=\"line\">print(&quot;程序结束&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>代码执行：<br>当没发生异常时：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入一个整数：2</span><br><span class=\"line\">输入另外一个整数：1</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">2/1= 2</span><br><span class=\"line\">输入合法</span><br><span class=\"line\">程序结束</span><br></pre></td></tr></table></figure></p>\n<p>发生异常时：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入一个整数：2</span><br><span class=\"line\">输入另外一个整数：0</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">输入非法，ZeroDivisionError</span><br><span class=\"line\">程序结束</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>else子句的触发条件：</p>\n<ol>\n<li>在判断语句中，当if语句条件不满足时会就执行else子句的代码</li>\n<li>在循环语句中，当循环体没有执行或者循环体没有执行break语句</li>\n<li>在异常处理中，当没有发生异常时会执行else子句<br><strong><em>一句话，循环和异常处理中，一切正常就执行else语句</em></strong></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>在Python中else最常见的用法就是用在判断语句中，其实还可以用在循环语句和异常处理中。","more":"<br>下面来总结一下else的用法：</p>\n<h3 id=\"判断语句\"><a href=\"#判断语句\" class=\"headerlink\" title=\"判断语句\"></a>判断语句</h3><p>这是最常见的用法，当if语句中的条件不满足时，将执行else语句中的代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = False</span><br><span class=\"line\">if a:</span><br><span class=\"line\">    print(&quot;a为真&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;a为假&quot;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><p>如果else子句紧接在循环语句的后面，那么在以下两种情况将会执行else子句的代码：</p>\n<ul>\n<li>当循环体没有执行break的时候，即循环体正常结束<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;两次输入机会&quot;)</span><br><span class=\"line\">for i in range(2):</span><br><span class=\"line\">    num = int(input(&quot;请输入一个数字：&quot;))</span><br><span class=\"line\">    if 10 == num:</span><br><span class=\"line\">        print(&quot;10 == num,触发break，不会执行else子句&quot;)</span><br><span class=\"line\">        break</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;循环体没有执行break语句，执行else子句&quot;)</span><br><span class=\"line\">print(&quot;程序结束&quot;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行代码：<br>当触发break时,不会执行else子句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两次输入机会</span><br><span class=\"line\">请输入一个数字：1</span><br><span class=\"line\">请输入一个数字：10</span><br><span class=\"line\">10 == num,触发break，不会执行else子句</span><br><span class=\"line\">程序结束</span><br></pre></td></tr></table></figure></p>\n<p>当没有触发break时,执行else子句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两次输入机会</span><br><span class=\"line\">请输入一个数字：2</span><br><span class=\"line\">请输入一个数字：3</span><br><span class=\"line\">循环体没有执行break语句，执行else子句</span><br><span class=\"line\">程序结束</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>当while循环体完全不执行时也会执行紧跟在后面的else子句<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while False:</span><br><span class=\"line\">    pass</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;循环体不执行，我也会执行&quot;)</span><br><span class=\"line\"># 执行后的输出结果：</span><br><span class=\"line\"># 循环体不执行，我也会执行</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>当没有发生异常的时候会执行紧跟在异常处理代码后面的else子句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num1 = int(input(&quot;输入一个整数：&quot;))</span><br><span class=\"line\">num2 = int(input(&quot;输入另外一个整数：&quot;))</span><br><span class=\"line\">print(&apos;-&apos;*20)</span><br><span class=\"line\">try:</span><br><span class=\"line\">    print(&quot;&#123;&#125;/&#123;&#125;=&quot;.format(num1,num2),num1//num2)</span><br><span class=\"line\">except ZeroDivisionError:</span><br><span class=\"line\">    print(&quot;输入非法，ZeroDivisionError&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;输入合法&quot;)</span><br><span class=\"line\">print(&quot;程序结束&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>代码执行：<br>当没发生异常时：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入一个整数：2</span><br><span class=\"line\">输入另外一个整数：1</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">2/1= 2</span><br><span class=\"line\">输入合法</span><br><span class=\"line\">程序结束</span><br></pre></td></tr></table></figure></p>\n<p>发生异常时：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入一个整数：2</span><br><span class=\"line\">输入另外一个整数：0</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">输入非法，ZeroDivisionError</span><br><span class=\"line\">程序结束</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>else子句的触发条件：</p>\n<ol>\n<li>在判断语句中，当if语句条件不满足时会就执行else子句的代码</li>\n<li>在循环语句中，当循环体没有执行或者循环体没有执行break语句</li>\n<li>在异常处理中，当没有发生异常时会执行else子句<br><strong><em>一句话，循环和异常处理中，一切正常就执行else语句</em></strong></li>\n</ol>"},{"title":"Ubuntu临时和永久修改ip地址掩码网关","comments":1,"toc":true,"date":"2018-08-15T08:45:23.000Z","_content":"在终端修改ip有临时和永久修改两种方式<!--more-->\n## 临时修改网卡ip地址\n### 查看网卡\n终端输入 ifcofig 并回车，查看需要修改的网卡名称\n\n![](https://pic3.zhimg.com/80/v2-c5f733c334f371ed7eb56f1d2d971728_hd.jpg)\n\n### 修改ip和子网掩码\n```\nsudo ifconfig 网卡名 ip信息 netmask 掩码\nifconfig  #查看是否生效\n```\n![](https://pic2.zhimg.com/80/v2-c4226f2ee33033bd4cb9e81c70778c26_hd.jpg)\n\n### 修改网关的方法\n原来的网关信息\n![原来网卡信息](https://pic1.zhimg.com/80/v2-a49d6130299ffb6d671291861e5cd12a_hd.jpg)\n\n使用route命令修改网卡的网关信息\n```\nsudo route add default gw 网关信息 网卡名\nroute -n # 查看网关修改是否生效\n```\n![](https://pic3.zhimg.com/80/v2-f3903eb8dad876abd3f472a5d3489b87_hd.jpg)\n\n## 永久行修改ip地址\n### 修改配置文件\n常用网络配置的文件有以下两个：\n1. /etc/network/interfaces 设置ip等信息相关的配置文件\n2. /etc/resolv.conf 设置DNS域名服务器的配置文件\n我们只需要修改第一个文件即可，设置静态IP常用于桥接模式下的虚拟机和主机进行通讯，其他见下图：\n![](https://pic3.zhimg.com/80/v2-3f33ec56f6516032c45ade4d0027ae52_hd.jpg)\n\n### 重启网络服务\n```\nsudo /etc/init.d/networking restart\n或\nsudo service networking restart\n```\n设置ip地址信息就可以永久修改生效了。\n","source":"_posts/Linux终端命令修改ip地址掩码和网关.md","raw":"---\ntitle: Ubuntu临时和永久修改ip地址掩码网关\ncomments: true\ntoc: true\ncategories:\n- Linux\ndate: 2018-08-15 16:45:23\ntags:\n- IP掩码网关修改\n---\n在终端修改ip有临时和永久修改两种方式<!--more-->\n## 临时修改网卡ip地址\n### 查看网卡\n终端输入 ifcofig 并回车，查看需要修改的网卡名称\n\n![](https://pic3.zhimg.com/80/v2-c5f733c334f371ed7eb56f1d2d971728_hd.jpg)\n\n### 修改ip和子网掩码\n```\nsudo ifconfig 网卡名 ip信息 netmask 掩码\nifconfig  #查看是否生效\n```\n![](https://pic2.zhimg.com/80/v2-c4226f2ee33033bd4cb9e81c70778c26_hd.jpg)\n\n### 修改网关的方法\n原来的网关信息\n![原来网卡信息](https://pic1.zhimg.com/80/v2-a49d6130299ffb6d671291861e5cd12a_hd.jpg)\n\n使用route命令修改网卡的网关信息\n```\nsudo route add default gw 网关信息 网卡名\nroute -n # 查看网关修改是否生效\n```\n![](https://pic3.zhimg.com/80/v2-f3903eb8dad876abd3f472a5d3489b87_hd.jpg)\n\n## 永久行修改ip地址\n### 修改配置文件\n常用网络配置的文件有以下两个：\n1. /etc/network/interfaces 设置ip等信息相关的配置文件\n2. /etc/resolv.conf 设置DNS域名服务器的配置文件\n我们只需要修改第一个文件即可，设置静态IP常用于桥接模式下的虚拟机和主机进行通讯，其他见下图：\n![](https://pic3.zhimg.com/80/v2-3f33ec56f6516032c45ade4d0027ae52_hd.jpg)\n\n### 重启网络服务\n```\nsudo /etc/init.d/networking restart\n或\nsudo service networking restart\n```\n设置ip地址信息就可以永久修改生效了。\n","slug":"Linux终端命令修改ip地址掩码和网关","published":1,"updated":"2019-05-25T09:32:43.099Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtcq000xe5vxt9oj2boi","content":"<p>在终端修改ip有临时和永久修改两种方式<a id=\"more\"></a></p>\n<h2 id=\"临时修改网卡ip地址\"><a href=\"#临时修改网卡ip地址\" class=\"headerlink\" title=\"临时修改网卡ip地址\"></a>临时修改网卡ip地址</h2><h3 id=\"查看网卡\"><a href=\"#查看网卡\" class=\"headerlink\" title=\"查看网卡\"></a>查看网卡</h3><p>终端输入 ifcofig 并回车，查看需要修改的网卡名称</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-c5f733c334f371ed7eb56f1d2d971728_hd.jpg\" alt=\"\"></p>\n<h3 id=\"修改ip和子网掩码\"><a href=\"#修改ip和子网掩码\" class=\"headerlink\" title=\"修改ip和子网掩码\"></a>修改ip和子网掩码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ifconfig 网卡名 ip信息 netmask 掩码</span><br><span class=\"line\">ifconfig  #查看是否生效</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pic2.zhimg.com/80/v2-c4226f2ee33033bd4cb9e81c70778c26_hd.jpg\" alt=\"\"></p>\n<h3 id=\"修改网关的方法\"><a href=\"#修改网关的方法\" class=\"headerlink\" title=\"修改网关的方法\"></a>修改网关的方法</h3><p>原来的网关信息<br><img src=\"https://pic1.zhimg.com/80/v2-a49d6130299ffb6d671291861e5cd12a_hd.jpg\" alt=\"原来网卡信息\"></p>\n<p>使用route命令修改网卡的网关信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo route add default gw 网关信息 网卡名</span><br><span class=\"line\">route -n # 查看网关修改是否生效</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-f3903eb8dad876abd3f472a5d3489b87_hd.jpg\" alt=\"\"></p>\n<h2 id=\"永久行修改ip地址\"><a href=\"#永久行修改ip地址\" class=\"headerlink\" title=\"永久行修改ip地址\"></a>永久行修改ip地址</h2><h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>常用网络配置的文件有以下两个：</p>\n<ol>\n<li>/etc/network/interfaces 设置ip等信息相关的配置文件</li>\n<li>/etc/resolv.conf 设置DNS域名服务器的配置文件<br>我们只需要修改第一个文件即可，设置静态IP常用于桥接模式下的虚拟机和主机进行通讯，其他见下图：<br><img src=\"https://pic3.zhimg.com/80/v2-3f33ec56f6516032c45ade4d0027ae52_hd.jpg\" alt=\"\"></li>\n</ol>\n<h3 id=\"重启网络服务\"><a href=\"#重启网络服务\" class=\"headerlink\" title=\"重启网络服务\"></a>重启网络服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/networking restart</span><br><span class=\"line\">或</span><br><span class=\"line\">sudo service networking restart</span><br></pre></td></tr></table></figure>\n<p>设置ip地址信息就可以永久修改生效了。</p>\n","site":{"data":{}},"excerpt":"<p>在终端修改ip有临时和永久修改两种方式","more":"</p>\n<h2 id=\"临时修改网卡ip地址\"><a href=\"#临时修改网卡ip地址\" class=\"headerlink\" title=\"临时修改网卡ip地址\"></a>临时修改网卡ip地址</h2><h3 id=\"查看网卡\"><a href=\"#查看网卡\" class=\"headerlink\" title=\"查看网卡\"></a>查看网卡</h3><p>终端输入 ifcofig 并回车，查看需要修改的网卡名称</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-c5f733c334f371ed7eb56f1d2d971728_hd.jpg\" alt=\"\"></p>\n<h3 id=\"修改ip和子网掩码\"><a href=\"#修改ip和子网掩码\" class=\"headerlink\" title=\"修改ip和子网掩码\"></a>修改ip和子网掩码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ifconfig 网卡名 ip信息 netmask 掩码</span><br><span class=\"line\">ifconfig  #查看是否生效</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pic2.zhimg.com/80/v2-c4226f2ee33033bd4cb9e81c70778c26_hd.jpg\" alt=\"\"></p>\n<h3 id=\"修改网关的方法\"><a href=\"#修改网关的方法\" class=\"headerlink\" title=\"修改网关的方法\"></a>修改网关的方法</h3><p>原来的网关信息<br><img src=\"https://pic1.zhimg.com/80/v2-a49d6130299ffb6d671291861e5cd12a_hd.jpg\" alt=\"原来网卡信息\"></p>\n<p>使用route命令修改网卡的网关信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo route add default gw 网关信息 网卡名</span><br><span class=\"line\">route -n # 查看网关修改是否生效</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-f3903eb8dad876abd3f472a5d3489b87_hd.jpg\" alt=\"\"></p>\n<h2 id=\"永久行修改ip地址\"><a href=\"#永久行修改ip地址\" class=\"headerlink\" title=\"永久行修改ip地址\"></a>永久行修改ip地址</h2><h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>常用网络配置的文件有以下两个：</p>\n<ol>\n<li>/etc/network/interfaces 设置ip等信息相关的配置文件</li>\n<li>/etc/resolv.conf 设置DNS域名服务器的配置文件<br>我们只需要修改第一个文件即可，设置静态IP常用于桥接模式下的虚拟机和主机进行通讯，其他见下图：<br><img src=\"https://pic3.zhimg.com/80/v2-3f33ec56f6516032c45ade4d0027ae52_hd.jpg\" alt=\"\"></li>\n</ol>\n<h3 id=\"重启网络服务\"><a href=\"#重启网络服务\" class=\"headerlink\" title=\"重启网络服务\"></a>重启网络服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/networking restart</span><br><span class=\"line\">或</span><br><span class=\"line\">sudo service networking restart</span><br></pre></td></tr></table></figure>\n<p>设置ip地址信息就可以永久修改生效了。</p>"},{"title":"Python中global和nonlocal的应用场景区别","comments":1,"date":"2018-08-01T01:54:07.000Z","_content":"在Python中，global和nonlocal的作用都是可以实现代码块内变量使用外部的同名变量，但其中是有很明显的区别的。<!--more-->\n### global\nglobal很明显就是声明代码块中的变量使用外部**全局**的同名变量\n```\na = 1\ndef change():\n        global a\n        a += 1\n        print(\"函数内部的a的值：\", a)   # 2\nchange()\nprint(\"调用change函数后， 函数外部的a的值：\", a)  # 2\n```\n### nolocal\nnolocal 的使用场景就比较单一，它是使用在闭包中的，使变量使用**外层**的同名变量\n```\ndef foo(func):\n        a = 1\n        print(\"外层函数a的值\", a)\n        def wrapper():\n                func()\n                nonlocal a\n                a += 1\n                print(\"经过改变后，里外层函数a的值：\", a)\n        return wrapper\n\n@foo\ndef change():\n      print(\"nolocal的使用\")\n\nchange()\n----------------输出结果----------------\n外层函数a的值 1\nnolocal的使用\n经过改变后，里外层函数a的值： 2\n```\n### 总结\nglobal的作用对象是全局变量，nonlocal的作用对象是外层变量（很显然就是闭包这种情况）\n","source":"_posts/Python中global和nonlocal的应用场景区别.md","raw":"---\ntitle: Python中global和nonlocal的应用场景区别\ncomments: true\ndate: 2018-08-01 09:54:07\ntags:\n---\n在Python中，global和nonlocal的作用都是可以实现代码块内变量使用外部的同名变量，但其中是有很明显的区别的。<!--more-->\n### global\nglobal很明显就是声明代码块中的变量使用外部**全局**的同名变量\n```\na = 1\ndef change():\n        global a\n        a += 1\n        print(\"函数内部的a的值：\", a)   # 2\nchange()\nprint(\"调用change函数后， 函数外部的a的值：\", a)  # 2\n```\n### nolocal\nnolocal 的使用场景就比较单一，它是使用在闭包中的，使变量使用**外层**的同名变量\n```\ndef foo(func):\n        a = 1\n        print(\"外层函数a的值\", a)\n        def wrapper():\n                func()\n                nonlocal a\n                a += 1\n                print(\"经过改变后，里外层函数a的值：\", a)\n        return wrapper\n\n@foo\ndef change():\n      print(\"nolocal的使用\")\n\nchange()\n----------------输出结果----------------\n外层函数a的值 1\nnolocal的使用\n经过改变后，里外层函数a的值： 2\n```\n### 总结\nglobal的作用对象是全局变量，nonlocal的作用对象是外层变量（很显然就是闭包这种情况）\n","slug":"Python中global和nonlocal的应用场景区别","published":1,"updated":"2019-05-25T09:32:43.101Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtcs0011e5vxa4imzwx5","content":"<p>在Python中，global和nonlocal的作用都是可以实现代码块内变量使用外部的同名变量，但其中是有很明显的区别的。<a id=\"more\"></a></p>\n<h3 id=\"global\"><a href=\"#global\" class=\"headerlink\" title=\"global\"></a>global</h3><p>global很明显就是声明代码块中的变量使用外部<strong>全局</strong>的同名变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">def change():</span><br><span class=\"line\">        global a</span><br><span class=\"line\">        a += 1</span><br><span class=\"line\">        print(&quot;函数内部的a的值：&quot;, a)   # 2</span><br><span class=\"line\">change()</span><br><span class=\"line\">print(&quot;调用change函数后， 函数外部的a的值：&quot;, a)  # 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"nolocal\"><a href=\"#nolocal\" class=\"headerlink\" title=\"nolocal\"></a>nolocal</h3><p>nolocal 的使用场景就比较单一，它是使用在闭包中的，使变量使用<strong>外层</strong>的同名变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def foo(func):</span><br><span class=\"line\">        a = 1</span><br><span class=\"line\">        print(&quot;外层函数a的值&quot;, a)</span><br><span class=\"line\">        def wrapper():</span><br><span class=\"line\">                func()</span><br><span class=\"line\">                nonlocal a</span><br><span class=\"line\">                a += 1</span><br><span class=\"line\">                print(&quot;经过改变后，里外层函数a的值：&quot;, a)</span><br><span class=\"line\">        return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@foo</span><br><span class=\"line\">def change():</span><br><span class=\"line\">      print(&quot;nolocal的使用&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">change()</span><br><span class=\"line\">----------------输出结果----------------</span><br><span class=\"line\">外层函数a的值 1</span><br><span class=\"line\">nolocal的使用</span><br><span class=\"line\">经过改变后，里外层函数a的值： 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>global的作用对象是全局变量，nonlocal的作用对象是外层变量（很显然就是闭包这种情况）</p>\n","site":{"data":{}},"excerpt":"<p>在Python中，global和nonlocal的作用都是可以实现代码块内变量使用外部的同名变量，但其中是有很明显的区别的。","more":"</p>\n<h3 id=\"global\"><a href=\"#global\" class=\"headerlink\" title=\"global\"></a>global</h3><p>global很明显就是声明代码块中的变量使用外部<strong>全局</strong>的同名变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">def change():</span><br><span class=\"line\">        global a</span><br><span class=\"line\">        a += 1</span><br><span class=\"line\">        print(&quot;函数内部的a的值：&quot;, a)   # 2</span><br><span class=\"line\">change()</span><br><span class=\"line\">print(&quot;调用change函数后， 函数外部的a的值：&quot;, a)  # 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"nolocal\"><a href=\"#nolocal\" class=\"headerlink\" title=\"nolocal\"></a>nolocal</h3><p>nolocal 的使用场景就比较单一，它是使用在闭包中的，使变量使用<strong>外层</strong>的同名变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def foo(func):</span><br><span class=\"line\">        a = 1</span><br><span class=\"line\">        print(&quot;外层函数a的值&quot;, a)</span><br><span class=\"line\">        def wrapper():</span><br><span class=\"line\">                func()</span><br><span class=\"line\">                nonlocal a</span><br><span class=\"line\">                a += 1</span><br><span class=\"line\">                print(&quot;经过改变后，里外层函数a的值：&quot;, a)</span><br><span class=\"line\">        return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@foo</span><br><span class=\"line\">def change():</span><br><span class=\"line\">      print(&quot;nolocal的使用&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">change()</span><br><span class=\"line\">----------------输出结果----------------</span><br><span class=\"line\">外层函数a的值 1</span><br><span class=\"line\">nolocal的使用</span><br><span class=\"line\">经过改变后，里外层函数a的值： 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>global的作用对象是全局变量，nonlocal的作用对象是外层变量（很显然就是闭包这种情况）</p>"},{"title":"Python中浅拷贝的三种形式","comments":1,"date":"2018-07-31T12:17:32.000Z","_content":"总结一下在Python中常见的浅拷贝的三种形式：切片操作、工厂函数、copy 模块中的 copy 函数<!--more-->\n### 切片操作\n```\na = [1,2,3,[4,5]]\nb = a[:]\nb[3][0] = 7\nprint(a) # [1,2,3,[7,5]]\nprint(b) # [1,2,3,[7,5]]\n```\n### 工厂函数\n```\na = (1,2,3,[4,5])\nb = list(a)\nb[3][0] = 7\nprint(a) # (1,2,3,[7,5])\nprint(b) # [1,2,3,[7,5]]\n```\n### copy.copy()\n```\nimport copy\na = (1,2,3,[4,5])\nb = copy.copy(a)\nb[3][0] = 7\nprint(a) # (1,2,3,[7,5])\nprint(b) # [1,2,3,[7,5]]\n```\n\n### 总结\n在Python中，一切皆对象。\n* 对象的赋值就是简单的对象引用,他们指向同一片内存，b 不过是 a 的别名，是引用,它们的id是一样的\n* 浅拷贝会创建新对象，其内容非原对象本身的引用，而是原对象内第一层对象的引用。浅拷贝有三种形式:切片操作、工厂函数、copy 模块中的 copy 函数\n* 深拷贝拷贝了对象的所有元素，包括多层嵌套的元素.深拷贝只有一种形式，copy 模块中的 deepcopy()函数\n* ***记住一句话：在有嵌套和可变类型的情况下，不使用深拷贝的拷贝和赋值都可以认为是浅拷贝***\n","source":"_posts/Python中浅拷贝的三种形式.md","raw":"---\ntitle: Python中浅拷贝的三种形式\ncomments: true\ndate: 2018-07-31 20:17:32\ncategories:\n- Python\ntags:\n- 浅拷贝\n---\n总结一下在Python中常见的浅拷贝的三种形式：切片操作、工厂函数、copy 模块中的 copy 函数<!--more-->\n### 切片操作\n```\na = [1,2,3,[4,5]]\nb = a[:]\nb[3][0] = 7\nprint(a) # [1,2,3,[7,5]]\nprint(b) # [1,2,3,[7,5]]\n```\n### 工厂函数\n```\na = (1,2,3,[4,5])\nb = list(a)\nb[3][0] = 7\nprint(a) # (1,2,3,[7,5])\nprint(b) # [1,2,3,[7,5]]\n```\n### copy.copy()\n```\nimport copy\na = (1,2,3,[4,5])\nb = copy.copy(a)\nb[3][0] = 7\nprint(a) # (1,2,3,[7,5])\nprint(b) # [1,2,3,[7,5]]\n```\n\n### 总结\n在Python中，一切皆对象。\n* 对象的赋值就是简单的对象引用,他们指向同一片内存，b 不过是 a 的别名，是引用,它们的id是一样的\n* 浅拷贝会创建新对象，其内容非原对象本身的引用，而是原对象内第一层对象的引用。浅拷贝有三种形式:切片操作、工厂函数、copy 模块中的 copy 函数\n* 深拷贝拷贝了对象的所有元素，包括多层嵌套的元素.深拷贝只有一种形式，copy 模块中的 deepcopy()函数\n* ***记住一句话：在有嵌套和可变类型的情况下，不使用深拷贝的拷贝和赋值都可以认为是浅拷贝***\n","slug":"Python中浅拷贝的三种形式","published":1,"updated":"2019-05-25T09:32:43.101Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtct0013e5vxevhety1k","content":"<p>总结一下在Python中常见的浅拷贝的三种形式：切片操作、工厂函数、copy 模块中的 copy 函数<a id=\"more\"></a></p>\n<h3 id=\"切片操作\"><a href=\"#切片操作\" class=\"headerlink\" title=\"切片操作\"></a>切片操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1,2,3,[4,5]]</span><br><span class=\"line\">b = a[:]</span><br><span class=\"line\">b[3][0] = 7</span><br><span class=\"line\">print(a) # [1,2,3,[7,5]]</span><br><span class=\"line\">print(b) # [1,2,3,[7,5]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"工厂函数\"><a href=\"#工厂函数\" class=\"headerlink\" title=\"工厂函数\"></a>工厂函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (1,2,3,[4,5])</span><br><span class=\"line\">b = list(a)</span><br><span class=\"line\">b[3][0] = 7</span><br><span class=\"line\">print(a) # (1,2,3,[7,5])</span><br><span class=\"line\">print(b) # [1,2,3,[7,5]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"copy-copy\"><a href=\"#copy-copy\" class=\"headerlink\" title=\"copy.copy()\"></a>copy.copy()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import copy</span><br><span class=\"line\">a = (1,2,3,[4,5])</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\">b[3][0] = 7</span><br><span class=\"line\">print(a) # (1,2,3,[7,5])</span><br><span class=\"line\">print(b) # [1,2,3,[7,5]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在Python中，一切皆对象。</p>\n<ul>\n<li>对象的赋值就是简单的对象引用,他们指向同一片内存，b 不过是 a 的别名，是引用,它们的id是一样的</li>\n<li>浅拷贝会创建新对象，其内容非原对象本身的引用，而是原对象内第一层对象的引用。浅拷贝有三种形式:切片操作、工厂函数、copy 模块中的 copy 函数</li>\n<li>深拷贝拷贝了对象的所有元素，包括多层嵌套的元素.深拷贝只有一种形式，copy 模块中的 deepcopy()函数</li>\n<li><strong><em>记住一句话：在有嵌套和可变类型的情况下，不使用深拷贝的拷贝和赋值都可以认为是浅拷贝</em></strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>总结一下在Python中常见的浅拷贝的三种形式：切片操作、工厂函数、copy 模块中的 copy 函数","more":"</p>\n<h3 id=\"切片操作\"><a href=\"#切片操作\" class=\"headerlink\" title=\"切片操作\"></a>切片操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1,2,3,[4,5]]</span><br><span class=\"line\">b = a[:]</span><br><span class=\"line\">b[3][0] = 7</span><br><span class=\"line\">print(a) # [1,2,3,[7,5]]</span><br><span class=\"line\">print(b) # [1,2,3,[7,5]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"工厂函数\"><a href=\"#工厂函数\" class=\"headerlink\" title=\"工厂函数\"></a>工厂函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (1,2,3,[4,5])</span><br><span class=\"line\">b = list(a)</span><br><span class=\"line\">b[3][0] = 7</span><br><span class=\"line\">print(a) # (1,2,3,[7,5])</span><br><span class=\"line\">print(b) # [1,2,3,[7,5]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"copy-copy\"><a href=\"#copy-copy\" class=\"headerlink\" title=\"copy.copy()\"></a>copy.copy()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import copy</span><br><span class=\"line\">a = (1,2,3,[4,5])</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\">b[3][0] = 7</span><br><span class=\"line\">print(a) # (1,2,3,[7,5])</span><br><span class=\"line\">print(b) # [1,2,3,[7,5]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在Python中，一切皆对象。</p>\n<ul>\n<li>对象的赋值就是简单的对象引用,他们指向同一片内存，b 不过是 a 的别名，是引用,它们的id是一样的</li>\n<li>浅拷贝会创建新对象，其内容非原对象本身的引用，而是原对象内第一层对象的引用。浅拷贝有三种形式:切片操作、工厂函数、copy 模块中的 copy 函数</li>\n<li>深拷贝拷贝了对象的所有元素，包括多层嵌套的元素.深拷贝只有一种形式，copy 模块中的 deepcopy()函数</li>\n<li><strong><em>记住一句话：在有嵌套和可变类型的情况下，不使用深拷贝的拷贝和赋值都可以认为是浅拷贝</em></strong></li>\n</ul>"},{"title":"Python中用中文也能做变量？？？","comments":1,"date":"2018-08-05T11:30:22.000Z","toc":true,"_content":"【中文做变量】Python3给你任性<!--more-->\n### 中文作为变量\n```\n>>>标题 = '在Python中使用中文玩一玩编程'\n>>> 姓名列表 = ['张三', '李四', '王五', '赵六', '钱七']\n>>> for 姓名 in 姓名列表:\n...     print(姓名, end='>>>')\n... 输出结果...\n张三>>>李四>>>王五>>>赵六>>>钱七>>>\n\n```\n\n在每本Python书籍中，Python中变量的命名要遵循以下规则：\n1. 可以使用数字、字母、下划线\n2. 不能以数字开头\n***为什么可以用中文作为变量没报错？答案就是字符编码***\n因为Python3解释器的默认编码已经从Python2的ASCII编码改为UTF-8编码，UTF-8编码支持任何Unicode字符串的写入了，当然里面就包含了中文。对上面说的东西没有概念？？\n***下面就了解一下目前字符编码表的全家福吧。***\n### 字符编码表\n首先理解一下**字符编码**和**字符编码表**的概念。\n#### 字符编码\n我们知道，任何数据最后在计算机里的实现都是二进制010101的形式存储，那么我们看到的字符也是如此。伟大的计算机先驱为了在图形界面上显示我们的字符，约定使用一张表，这张表就是字符编码表：表上每个具体的数字（就是我们说的字符编码）对应一个具体的字符，当计算机接收到某个数字（字符编码）就在图形界面上显示对应的字符。那么，我们的计算机就可以根据这张表去根据用户提供的具体编码查询到具体的字符，进而显示在我们的面前。\n#### 字符编码表\n一张记录字符编码和对应字符的表，也就是记录一个数字对应某个字符的表\n### 常用字符编码表全家福\n![](http://paresur4s.bkt.clouddn.com/Fs2mHj2ygXtxeuvY8fNljjU1cDeZ)\n### ASCII\nASCII是后面所有字符编码表的**老祖宗**。因为电脑首先在美国诞生，所以这张表符合美国国情的，它主要包含大小写字母数字以及一些特殊字符，一个字节就可以搞定。Python2使用的默认编码就是ASCII，所以Python2不支持中文，更本质的说，是ASCII没有对应的中文字符编码\n\n### GB2312 GBK\n电脑漂洋过海来到了中国，竟不能使用中文？？怎么可以！！我们就在ASCII的基础上进行扩展，添加了中文的字符，最后形成了GBK，两个字节表示一个中文汉字。\n### Unicode\n但是每个国家都各自拥有一张字符表，交流的时候是不是需要准备好所有国家的字符编码表进行对应解码？这时候，国际标谁化组织为了统一编码：提出了标准编码准\n则：Unicode一统天下 。Unicode是用两个字节来表示为一个字符，它总共可以组合出65535不同的字符，这足以覆盖世界上所有符号（包括甲骨文）\n### UTF-8\n但按照Uicode的标准，原来的字母和数字本来一个字节可以搞定的事，需要两个字符来存放，**本来1块钱可以解决的事，却要2块钱，亏啊**。\n所以UTF-8出来了，它是可变长度的编码表，英文字母数字还是一个字节搞定，其他字符就三个或四个字节表示一个字符。\n中文在UTF-8中是以3个字节存储一个汉字的。\n所以在网络传输中，如果全部是中文的话，使用GBK还会更节省空间。\n###Python3支持中文\n因为Python3解释器的默认编码使用的是UTF-8，自然包括世界上所有的字符，自然可以在Python3中使用中文进行定义变量了。\n### 仅供娱乐\n因为在编程中，变量定义我们还是遵守文章开头提到的变量定义的原则。首先，中英文切换就够累的了，然后，中文进行变量定义还是很突兀的\n","source":"_posts/Python中用中文也能做变量？？？.md","raw":"---\ntitle: Python中用中文也能做变量？？？\ncomments: true\ndate: 2018-08-05 19:30:22\ntoc: true\ncategories:\n- Python\ntags:\n- 变量定义\n---\n【中文做变量】Python3给你任性<!--more-->\n### 中文作为变量\n```\n>>>标题 = '在Python中使用中文玩一玩编程'\n>>> 姓名列表 = ['张三', '李四', '王五', '赵六', '钱七']\n>>> for 姓名 in 姓名列表:\n...     print(姓名, end='>>>')\n... 输出结果...\n张三>>>李四>>>王五>>>赵六>>>钱七>>>\n\n```\n\n在每本Python书籍中，Python中变量的命名要遵循以下规则：\n1. 可以使用数字、字母、下划线\n2. 不能以数字开头\n***为什么可以用中文作为变量没报错？答案就是字符编码***\n因为Python3解释器的默认编码已经从Python2的ASCII编码改为UTF-8编码，UTF-8编码支持任何Unicode字符串的写入了，当然里面就包含了中文。对上面说的东西没有概念？？\n***下面就了解一下目前字符编码表的全家福吧。***\n### 字符编码表\n首先理解一下**字符编码**和**字符编码表**的概念。\n#### 字符编码\n我们知道，任何数据最后在计算机里的实现都是二进制010101的形式存储，那么我们看到的字符也是如此。伟大的计算机先驱为了在图形界面上显示我们的字符，约定使用一张表，这张表就是字符编码表：表上每个具体的数字（就是我们说的字符编码）对应一个具体的字符，当计算机接收到某个数字（字符编码）就在图形界面上显示对应的字符。那么，我们的计算机就可以根据这张表去根据用户提供的具体编码查询到具体的字符，进而显示在我们的面前。\n#### 字符编码表\n一张记录字符编码和对应字符的表，也就是记录一个数字对应某个字符的表\n### 常用字符编码表全家福\n![](http://paresur4s.bkt.clouddn.com/Fs2mHj2ygXtxeuvY8fNljjU1cDeZ)\n### ASCII\nASCII是后面所有字符编码表的**老祖宗**。因为电脑首先在美国诞生，所以这张表符合美国国情的，它主要包含大小写字母数字以及一些特殊字符，一个字节就可以搞定。Python2使用的默认编码就是ASCII，所以Python2不支持中文，更本质的说，是ASCII没有对应的中文字符编码\n\n### GB2312 GBK\n电脑漂洋过海来到了中国，竟不能使用中文？？怎么可以！！我们就在ASCII的基础上进行扩展，添加了中文的字符，最后形成了GBK，两个字节表示一个中文汉字。\n### Unicode\n但是每个国家都各自拥有一张字符表，交流的时候是不是需要准备好所有国家的字符编码表进行对应解码？这时候，国际标谁化组织为了统一编码：提出了标准编码准\n则：Unicode一统天下 。Unicode是用两个字节来表示为一个字符，它总共可以组合出65535不同的字符，这足以覆盖世界上所有符号（包括甲骨文）\n### UTF-8\n但按照Uicode的标准，原来的字母和数字本来一个字节可以搞定的事，需要两个字符来存放，**本来1块钱可以解决的事，却要2块钱，亏啊**。\n所以UTF-8出来了，它是可变长度的编码表，英文字母数字还是一个字节搞定，其他字符就三个或四个字节表示一个字符。\n中文在UTF-8中是以3个字节存储一个汉字的。\n所以在网络传输中，如果全部是中文的话，使用GBK还会更节省空间。\n###Python3支持中文\n因为Python3解释器的默认编码使用的是UTF-8，自然包括世界上所有的字符，自然可以在Python3中使用中文进行定义变量了。\n### 仅供娱乐\n因为在编程中，变量定义我们还是遵守文章开头提到的变量定义的原则。首先，中英文切换就够累的了，然后，中文进行变量定义还是很突兀的\n","slug":"Python中用中文也能做变量？？？","published":1,"updated":"2019-05-25T09:32:43.101Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtcw0017e5vxt26e201l","content":"<p>【中文做变量】Python3给你任性<a id=\"more\"></a></p>\n<h3 id=\"中文作为变量\"><a href=\"#中文作为变量\" class=\"headerlink\" title=\"中文作为变量\"></a>中文作为变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;标题 = &apos;在Python中使用中文玩一玩编程&apos;</span><br><span class=\"line\">&gt;&gt;&gt; 姓名列表 = [&apos;张三&apos;, &apos;李四&apos;, &apos;王五&apos;, &apos;赵六&apos;, &apos;钱七&apos;]</span><br><span class=\"line\">&gt;&gt;&gt; for 姓名 in 姓名列表:</span><br><span class=\"line\">...     print(姓名, end=&apos;&gt;&gt;&gt;&apos;)</span><br><span class=\"line\">... 输出结果...</span><br><span class=\"line\">张三&gt;&gt;&gt;李四&gt;&gt;&gt;王五&gt;&gt;&gt;赵六&gt;&gt;&gt;钱七&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>在每本Python书籍中，Python中变量的命名要遵循以下规则：</p>\n<ol>\n<li>可以使用数字、字母、下划线</li>\n<li>不能以数字开头<br><strong><em>为什么可以用中文作为变量没报错？答案就是字符编码</em></strong><br>因为Python3解释器的默认编码已经从Python2的ASCII编码改为UTF-8编码，UTF-8编码支持任何Unicode字符串的写入了，当然里面就包含了中文。对上面说的东西没有概念？？<br><strong><em>下面就了解一下目前字符编码表的全家福吧。</em></strong><h3 id=\"字符编码表\"><a href=\"#字符编码表\" class=\"headerlink\" title=\"字符编码表\"></a>字符编码表</h3>首先理解一下<strong>字符编码</strong>和<strong>字符编码表</strong>的概念。<h4 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h4>我们知道，任何数据最后在计算机里的实现都是二进制010101的形式存储，那么我们看到的字符也是如此。伟大的计算机先驱为了在图形界面上显示我们的字符，约定使用一张表，这张表就是字符编码表：表上每个具体的数字（就是我们说的字符编码）对应一个具体的字符，当计算机接收到某个数字（字符编码）就在图形界面上显示对应的字符。那么，我们的计算机就可以根据这张表去根据用户提供的具体编码查询到具体的字符，进而显示在我们的面前。<h4 id=\"字符编码表-1\"><a href=\"#字符编码表-1\" class=\"headerlink\" title=\"字符编码表\"></a>字符编码表</h4>一张记录字符编码和对应字符的表，也就是记录一个数字对应某个字符的表<h3 id=\"常用字符编码表全家福\"><a href=\"#常用字符编码表全家福\" class=\"headerlink\" title=\"常用字符编码表全家福\"></a>常用字符编码表全家福</h3><img src=\"http://paresur4s.bkt.clouddn.com/Fs2mHj2ygXtxeuvY8fNljjU1cDeZ\" alt=\"\"><h3 id=\"ASCII\"><a href=\"#ASCII\" class=\"headerlink\" title=\"ASCII\"></a>ASCII</h3>ASCII是后面所有字符编码表的<strong>老祖宗</strong>。因为电脑首先在美国诞生，所以这张表符合美国国情的，它主要包含大小写字母数字以及一些特殊字符，一个字节就可以搞定。Python2使用的默认编码就是ASCII，所以Python2不支持中文，更本质的说，是ASCII没有对应的中文字符编码</li>\n</ol>\n<h3 id=\"GB2312-GBK\"><a href=\"#GB2312-GBK\" class=\"headerlink\" title=\"GB2312 GBK\"></a>GB2312 GBK</h3><p>电脑漂洋过海来到了中国，竟不能使用中文？？怎么可以！！我们就在ASCII的基础上进行扩展，添加了中文的字符，最后形成了GBK，两个字节表示一个中文汉字。</p>\n<h3 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h3><p>但是每个国家都各自拥有一张字符表，交流的时候是不是需要准备好所有国家的字符编码表进行对应解码？这时候，国际标谁化组织为了统一编码：提出了标准编码准<br>则：Unicode一统天下 。Unicode是用两个字节来表示为一个字符，它总共可以组合出65535不同的字符，这足以覆盖世界上所有符号（包括甲骨文）</p>\n<h3 id=\"UTF-8\"><a href=\"#UTF-8\" class=\"headerlink\" title=\"UTF-8\"></a>UTF-8</h3><p>但按照Uicode的标准，原来的字母和数字本来一个字节可以搞定的事，需要两个字符来存放，<strong>本来1块钱可以解决的事，却要2块钱，亏啊</strong>。<br>所以UTF-8出来了，它是可变长度的编码表，英文字母数字还是一个字节搞定，其他字符就三个或四个字节表示一个字符。<br>中文在UTF-8中是以3个字节存储一个汉字的。<br>所以在网络传输中，如果全部是中文的话，使用GBK还会更节省空间。</p>\n<p>###Python3支持中文<br>因为Python3解释器的默认编码使用的是UTF-8，自然包括世界上所有的字符，自然可以在Python3中使用中文进行定义变量了。</p>\n<h3 id=\"仅供娱乐\"><a href=\"#仅供娱乐\" class=\"headerlink\" title=\"仅供娱乐\"></a>仅供娱乐</h3><p>因为在编程中，变量定义我们还是遵守文章开头提到的变量定义的原则。首先，中英文切换就够累的了，然后，中文进行变量定义还是很突兀的</p>\n","site":{"data":{}},"excerpt":"<p>【中文做变量】Python3给你任性","more":"</p>\n<h3 id=\"中文作为变量\"><a href=\"#中文作为变量\" class=\"headerlink\" title=\"中文作为变量\"></a>中文作为变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;标题 = &apos;在Python中使用中文玩一玩编程&apos;</span><br><span class=\"line\">&gt;&gt;&gt; 姓名列表 = [&apos;张三&apos;, &apos;李四&apos;, &apos;王五&apos;, &apos;赵六&apos;, &apos;钱七&apos;]</span><br><span class=\"line\">&gt;&gt;&gt; for 姓名 in 姓名列表:</span><br><span class=\"line\">...     print(姓名, end=&apos;&gt;&gt;&gt;&apos;)</span><br><span class=\"line\">... 输出结果...</span><br><span class=\"line\">张三&gt;&gt;&gt;李四&gt;&gt;&gt;王五&gt;&gt;&gt;赵六&gt;&gt;&gt;钱七&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>在每本Python书籍中，Python中变量的命名要遵循以下规则：</p>\n<ol>\n<li>可以使用数字、字母、下划线</li>\n<li>不能以数字开头<br><strong><em>为什么可以用中文作为变量没报错？答案就是字符编码</em></strong><br>因为Python3解释器的默认编码已经从Python2的ASCII编码改为UTF-8编码，UTF-8编码支持任何Unicode字符串的写入了，当然里面就包含了中文。对上面说的东西没有概念？？<br><strong><em>下面就了解一下目前字符编码表的全家福吧。</em></strong><h3 id=\"字符编码表\"><a href=\"#字符编码表\" class=\"headerlink\" title=\"字符编码表\"></a>字符编码表</h3>首先理解一下<strong>字符编码</strong>和<strong>字符编码表</strong>的概念。<h4 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h4>我们知道，任何数据最后在计算机里的实现都是二进制010101的形式存储，那么我们看到的字符也是如此。伟大的计算机先驱为了在图形界面上显示我们的字符，约定使用一张表，这张表就是字符编码表：表上每个具体的数字（就是我们说的字符编码）对应一个具体的字符，当计算机接收到某个数字（字符编码）就在图形界面上显示对应的字符。那么，我们的计算机就可以根据这张表去根据用户提供的具体编码查询到具体的字符，进而显示在我们的面前。<h4 id=\"字符编码表-1\"><a href=\"#字符编码表-1\" class=\"headerlink\" title=\"字符编码表\"></a>字符编码表</h4>一张记录字符编码和对应字符的表，也就是记录一个数字对应某个字符的表<h3 id=\"常用字符编码表全家福\"><a href=\"#常用字符编码表全家福\" class=\"headerlink\" title=\"常用字符编码表全家福\"></a>常用字符编码表全家福</h3><img src=\"http://paresur4s.bkt.clouddn.com/Fs2mHj2ygXtxeuvY8fNljjU1cDeZ\" alt=\"\"><h3 id=\"ASCII\"><a href=\"#ASCII\" class=\"headerlink\" title=\"ASCII\"></a>ASCII</h3>ASCII是后面所有字符编码表的<strong>老祖宗</strong>。因为电脑首先在美国诞生，所以这张表符合美国国情的，它主要包含大小写字母数字以及一些特殊字符，一个字节就可以搞定。Python2使用的默认编码就是ASCII，所以Python2不支持中文，更本质的说，是ASCII没有对应的中文字符编码</li>\n</ol>\n<h3 id=\"GB2312-GBK\"><a href=\"#GB2312-GBK\" class=\"headerlink\" title=\"GB2312 GBK\"></a>GB2312 GBK</h3><p>电脑漂洋过海来到了中国，竟不能使用中文？？怎么可以！！我们就在ASCII的基础上进行扩展，添加了中文的字符，最后形成了GBK，两个字节表示一个中文汉字。</p>\n<h3 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h3><p>但是每个国家都各自拥有一张字符表，交流的时候是不是需要准备好所有国家的字符编码表进行对应解码？这时候，国际标谁化组织为了统一编码：提出了标准编码准<br>则：Unicode一统天下 。Unicode是用两个字节来表示为一个字符，它总共可以组合出65535不同的字符，这足以覆盖世界上所有符号（包括甲骨文）</p>\n<h3 id=\"UTF-8\"><a href=\"#UTF-8\" class=\"headerlink\" title=\"UTF-8\"></a>UTF-8</h3><p>但按照Uicode的标准，原来的字母和数字本来一个字节可以搞定的事，需要两个字符来存放，<strong>本来1块钱可以解决的事，却要2块钱，亏啊</strong>。<br>所以UTF-8出来了，它是可变长度的编码表，英文字母数字还是一个字节搞定，其他字符就三个或四个字节表示一个字符。<br>中文在UTF-8中是以3个字节存储一个汉字的。<br>所以在网络传输中，如果全部是中文的话，使用GBK还会更节省空间。</p>\n<p>###Python3支持中文<br>因为Python3解释器的默认编码使用的是UTF-8，自然包括世界上所有的字符，自然可以在Python3中使用中文进行定义变量了。</p>\n<h3 id=\"仅供娱乐\"><a href=\"#仅供娱乐\" class=\"headerlink\" title=\"仅供娱乐\"></a>仅供娱乐</h3><p>因为在编程中，变量定义我们还是遵守文章开头提到的变量定义的原则。首先，中英文切换就够累的了，然后，中文进行变量定义还是很突兀的</p>"},{"title":"Python中实现Linux管道","comments":1,"date":"2018-11-13T13:14:11.000Z","_content":"### 需求描述\n假如需要实现一个随机生成三餐的食谱的需求，提供全部随机生成或自定义同时随机生成两种选项，尽量Pythonic。例如，这样调用即可：\n```\nbreakfast >> lunch >> dinner\n```\n<!--more-->\n### 需求分析\n1.>\\> 的语法实现需要使用\\__rshift__和\\__rrshift__。\n2. 自定义一个三餐的列表作为随机选取的对象\n3. 如果是全部随机生成，则无需传递参数，进行4和5的步骤\n4. breakfast的结果传递给lunch，在breakfast的结果基础插入lunch\n5. lunch的结果传递给dinner，在lunch的结果基础插入dinner\n6. 如果是自定义同时随机生成，则需要一个函数进记录参数，然后重复45步骤\n### 实现>>管道语法\n语法例子建议参考前两期推文\n```\n# -*- coding=utf-8 -*-\nimport functools\nimport random\nimport pprint\n\nclass Pipe:\n\n    def __init__(self, function):\n        self.function = function\n        functools.update_wrapper(self, function)\n\n    # 当 >> 两边其中一个没有实现__rshift__时调用\n    def __rrshift__(self, other):\n        return self.function(other)\n\n    # 实现携带自定义参数\n    def curry(self, *args, **kwargs):\n        return Pipe(lambda x: self.function(x, *args, **kwargs))\n```\n### 菜单候取对象\n```\nbreakfast_menu = ['bacon', 'egg', 'milk', 'porridge', 'bread', 'corn']\nlunch_menu = ['fish', 'beef', 'chicken', 'radish', 'spinach', 'watercress']\ndinner_menu = ['lean meat', 'mutton', 'celery', 'tofu', 'cucumber']\n```\n### 菜单随机实现\n```\n@Pipe\ndef breakfast(menu, *args, **kwargs):\n    menu['breakfast'] = random.sample(breakfast_menu, 3 if args == ('',) else 3 - len(args))\n    if not args == ('',):\n        for custom in args:\n            menu['breakfast'].append(custom)\n    return menu\n\n\n@Pipe\ndef lunch(menu, *args, **kwargs):\n    menu['lunch'] = random.sample(lunch_menu, 3 if args == ('',) else 3 - len(args))\n    if not args == ('',):\n        for custom in args:\n            menu['lunch'].append(custom)\n    return menu\n\n\n@Pipe\ndef dinner(menu, *args, **kwargs):\n    menu['dinner'] = random.sample(dinner_menu, 3 if args == ('',) else 3 - len(args))\n    if not args == ('',):\n        for custom in args:\n            menu['dinner'].append(custom)\n    return menu\n```\n### 整体控制及管道实现\n```\nif __name__ == \"__main__\":\n    # menu存放菜单\n    menu = dict()\n\n    random_choice = int(input(\"菜单是否自动生成？是：1 否：0\\n\"))\n    # 自动随机生成\n    if random_choice:\n        pprint.print(menu >> breakfast >> lunch >> dinner)\n    # 自定义菜单，传递参数\n    else:\n        breakfast_custom_list = input(\"早餐菜单(最多3样),不够3样，剩下随机生成：\").split(' ')\n        lunch_custom_list = input(\"午餐菜单(最多3样),不够3样，剩下随机生成：\").split(' ')\n        dinner_custom_list = input(\"晚餐菜单(最多3样),不够3样，剩下随机生成：\").split(' ')\n\n        # 携带参数, *的作用是解包，[1,2,3] => 1,2,3\n        breakfast = breakfast.curry(*(breakfast_custom_list))\n        lunch = lunch.curry(*(lunch_custom_list))\n        dinner = dinner.curry(*(dinner_custom_list))\n\n        # 输出的漂亮格式就不搞了，直接打印啦\n        pprint.print(menu >> breakfast >> lunch >> dinner)\n```\n### 随机生成效果\n```\n菜单是否自动生成？是：1 否：0 \n1\n{'breakfast': ['bread', 'egg', 'corn'],\n 'dinner': ['tofu', 'cucumber', 'lean meat'],\n 'lunch': ['spinach', 'chicken', 'fish']}\n```\n### 自定义菜单生成效果\n```\n菜单是否自动生成？是：1 否：0\n0\n早餐菜单(最多3样),不够3样，剩下随机生成：地瓜 玉米 白粥\n午餐菜单(最多3样),不够3样，剩下随机生成：\n晚餐菜单(最多3样),不够3样，剩下随机生成：丝瓜汤\n{'breakfast': ['地瓜', '玉米', '白粥'],\n 'dinner': ['tofu', 'cucumber', '丝瓜汤'],\n 'lunch': ['beef', 'fish', 'radish']}\n```\n### 携带参数的实现\n```\n# 实现携带自定义参数\n    def curry(self, *args, **kwargs):\n        return Pipe(lambda x: self.function(x, *args, **kwargs))\n```\n原理： 匿名函数的\\*args和\\**kwargs保存了需要携带的参数。\n### 其他\n其他语法，未提到的，欢迎留言沟通\n\n","source":"_posts/Python中实现Linux管道.md","raw":"---\ntitle: Python中实现Linux管道\ncomments: true\ndate: 2018-11-13 21:14:11\ncategories:\n- Python\ntags:\n- 管道\n---\n### 需求描述\n假如需要实现一个随机生成三餐的食谱的需求，提供全部随机生成或自定义同时随机生成两种选项，尽量Pythonic。例如，这样调用即可：\n```\nbreakfast >> lunch >> dinner\n```\n<!--more-->\n### 需求分析\n1.>\\> 的语法实现需要使用\\__rshift__和\\__rrshift__。\n2. 自定义一个三餐的列表作为随机选取的对象\n3. 如果是全部随机生成，则无需传递参数，进行4和5的步骤\n4. breakfast的结果传递给lunch，在breakfast的结果基础插入lunch\n5. lunch的结果传递给dinner，在lunch的结果基础插入dinner\n6. 如果是自定义同时随机生成，则需要一个函数进记录参数，然后重复45步骤\n### 实现>>管道语法\n语法例子建议参考前两期推文\n```\n# -*- coding=utf-8 -*-\nimport functools\nimport random\nimport pprint\n\nclass Pipe:\n\n    def __init__(self, function):\n        self.function = function\n        functools.update_wrapper(self, function)\n\n    # 当 >> 两边其中一个没有实现__rshift__时调用\n    def __rrshift__(self, other):\n        return self.function(other)\n\n    # 实现携带自定义参数\n    def curry(self, *args, **kwargs):\n        return Pipe(lambda x: self.function(x, *args, **kwargs))\n```\n### 菜单候取对象\n```\nbreakfast_menu = ['bacon', 'egg', 'milk', 'porridge', 'bread', 'corn']\nlunch_menu = ['fish', 'beef', 'chicken', 'radish', 'spinach', 'watercress']\ndinner_menu = ['lean meat', 'mutton', 'celery', 'tofu', 'cucumber']\n```\n### 菜单随机实现\n```\n@Pipe\ndef breakfast(menu, *args, **kwargs):\n    menu['breakfast'] = random.sample(breakfast_menu, 3 if args == ('',) else 3 - len(args))\n    if not args == ('',):\n        for custom in args:\n            menu['breakfast'].append(custom)\n    return menu\n\n\n@Pipe\ndef lunch(menu, *args, **kwargs):\n    menu['lunch'] = random.sample(lunch_menu, 3 if args == ('',) else 3 - len(args))\n    if not args == ('',):\n        for custom in args:\n            menu['lunch'].append(custom)\n    return menu\n\n\n@Pipe\ndef dinner(menu, *args, **kwargs):\n    menu['dinner'] = random.sample(dinner_menu, 3 if args == ('',) else 3 - len(args))\n    if not args == ('',):\n        for custom in args:\n            menu['dinner'].append(custom)\n    return menu\n```\n### 整体控制及管道实现\n```\nif __name__ == \"__main__\":\n    # menu存放菜单\n    menu = dict()\n\n    random_choice = int(input(\"菜单是否自动生成？是：1 否：0\\n\"))\n    # 自动随机生成\n    if random_choice:\n        pprint.print(menu >> breakfast >> lunch >> dinner)\n    # 自定义菜单，传递参数\n    else:\n        breakfast_custom_list = input(\"早餐菜单(最多3样),不够3样，剩下随机生成：\").split(' ')\n        lunch_custom_list = input(\"午餐菜单(最多3样),不够3样，剩下随机生成：\").split(' ')\n        dinner_custom_list = input(\"晚餐菜单(最多3样),不够3样，剩下随机生成：\").split(' ')\n\n        # 携带参数, *的作用是解包，[1,2,3] => 1,2,3\n        breakfast = breakfast.curry(*(breakfast_custom_list))\n        lunch = lunch.curry(*(lunch_custom_list))\n        dinner = dinner.curry(*(dinner_custom_list))\n\n        # 输出的漂亮格式就不搞了，直接打印啦\n        pprint.print(menu >> breakfast >> lunch >> dinner)\n```\n### 随机生成效果\n```\n菜单是否自动生成？是：1 否：0 \n1\n{'breakfast': ['bread', 'egg', 'corn'],\n 'dinner': ['tofu', 'cucumber', 'lean meat'],\n 'lunch': ['spinach', 'chicken', 'fish']}\n```\n### 自定义菜单生成效果\n```\n菜单是否自动生成？是：1 否：0\n0\n早餐菜单(最多3样),不够3样，剩下随机生成：地瓜 玉米 白粥\n午餐菜单(最多3样),不够3样，剩下随机生成：\n晚餐菜单(最多3样),不够3样，剩下随机生成：丝瓜汤\n{'breakfast': ['地瓜', '玉米', '白粥'],\n 'dinner': ['tofu', 'cucumber', '丝瓜汤'],\n 'lunch': ['beef', 'fish', 'radish']}\n```\n### 携带参数的实现\n```\n# 实现携带自定义参数\n    def curry(self, *args, **kwargs):\n        return Pipe(lambda x: self.function(x, *args, **kwargs))\n```\n原理： 匿名函数的\\*args和\\**kwargs保存了需要携带的参数。\n### 其他\n其他语法，未提到的，欢迎留言沟通\n\n","slug":"Python中实现Linux管道","published":1,"updated":"2019-05-25T09:32:43.101Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtd0001ae5vx2c5wqewh","content":"<h3 id=\"需求描述\"><a href=\"#需求描述\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h3><p>假如需要实现一个随机生成三餐的食谱的需求，提供全部随机生成或自定义同时随机生成两种选项，尽量Pythonic。例如，这样调用即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">breakfast &gt;&gt; lunch &gt;&gt; dinner</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h3><p>1.&gt;> 的语法实现需要使用__rshift__和__rrshift__。</p>\n<ol start=\"2\">\n<li>自定义一个三餐的列表作为随机选取的对象</li>\n<li>如果是全部随机生成，则无需传递参数，进行4和5的步骤</li>\n<li>breakfast的结果传递给lunch，在breakfast的结果基础插入lunch</li>\n<li>lunch的结果传递给dinner，在lunch的结果基础插入dinner</li>\n<li>如果是自定义同时随机生成，则需要一个函数进记录参数，然后重复45步骤<h3 id=\"实现-gt-gt-管道语法\"><a href=\"#实现-gt-gt-管道语法\" class=\"headerlink\" title=\"实现&gt;&gt;管道语法\"></a>实现&gt;&gt;管道语法</h3>语法例子建议参考前两期推文<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding=utf-8 -*-</span><br><span class=\"line\">import functools</span><br><span class=\"line\">import random</span><br><span class=\"line\">import pprint</span><br><span class=\"line\"></span><br><span class=\"line\">class Pipe:</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, function):</span><br><span class=\"line\">        self.function = function</span><br><span class=\"line\">        functools.update_wrapper(self, function)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 当 &gt;&gt; 两边其中一个没有实现__rshift__时调用</span><br><span class=\"line\">    def __rrshift__(self, other):</span><br><span class=\"line\">        return self.function(other)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 实现携带自定义参数</span><br><span class=\"line\">    def curry(self, *args, **kwargs):</span><br><span class=\"line\">        return Pipe(lambda x: self.function(x, *args, **kwargs))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"菜单候取对象\"><a href=\"#菜单候取对象\" class=\"headerlink\" title=\"菜单候取对象\"></a>菜单候取对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">breakfast_menu = [&apos;bacon&apos;, &apos;egg&apos;, &apos;milk&apos;, &apos;porridge&apos;, &apos;bread&apos;, &apos;corn&apos;]</span><br><span class=\"line\">lunch_menu = [&apos;fish&apos;, &apos;beef&apos;, &apos;chicken&apos;, &apos;radish&apos;, &apos;spinach&apos;, &apos;watercress&apos;]</span><br><span class=\"line\">dinner_menu = [&apos;lean meat&apos;, &apos;mutton&apos;, &apos;celery&apos;, &apos;tofu&apos;, &apos;cucumber&apos;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"菜单随机实现\"><a href=\"#菜单随机实现\" class=\"headerlink\" title=\"菜单随机实现\"></a>菜单随机实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Pipe</span><br><span class=\"line\">def breakfast(menu, *args, **kwargs):</span><br><span class=\"line\">    menu[&apos;breakfast&apos;] = random.sample(breakfast_menu, 3 if args == (&apos;&apos;,) else 3 - len(args))</span><br><span class=\"line\">    if not args == (&apos;&apos;,):</span><br><span class=\"line\">        for custom in args:</span><br><span class=\"line\">            menu[&apos;breakfast&apos;].append(custom)</span><br><span class=\"line\">    return menu</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@Pipe</span><br><span class=\"line\">def lunch(menu, *args, **kwargs):</span><br><span class=\"line\">    menu[&apos;lunch&apos;] = random.sample(lunch_menu, 3 if args == (&apos;&apos;,) else 3 - len(args))</span><br><span class=\"line\">    if not args == (&apos;&apos;,):</span><br><span class=\"line\">        for custom in args:</span><br><span class=\"line\">            menu[&apos;lunch&apos;].append(custom)</span><br><span class=\"line\">    return menu</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@Pipe</span><br><span class=\"line\">def dinner(menu, *args, **kwargs):</span><br><span class=\"line\">    menu[&apos;dinner&apos;] = random.sample(dinner_menu, 3 if args == (&apos;&apos;,) else 3 - len(args))</span><br><span class=\"line\">    if not args == (&apos;&apos;,):</span><br><span class=\"line\">        for custom in args:</span><br><span class=\"line\">            menu[&apos;dinner&apos;].append(custom)</span><br><span class=\"line\">    return menu</span><br></pre></td></tr></table></figure>\n<h3 id=\"整体控制及管道实现\"><a href=\"#整体控制及管道实现\" class=\"headerlink\" title=\"整体控制及管道实现\"></a>整体控制及管道实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    # menu存放菜单</span><br><span class=\"line\">    menu = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">    random_choice = int(input(&quot;菜单是否自动生成？是：1 否：0\\n&quot;))</span><br><span class=\"line\">    # 自动随机生成</span><br><span class=\"line\">    if random_choice:</span><br><span class=\"line\">        pprint.print(menu &gt;&gt; breakfast &gt;&gt; lunch &gt;&gt; dinner)</span><br><span class=\"line\">    # 自定义菜单，传递参数</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        breakfast_custom_list = input(&quot;早餐菜单(最多3样),不够3样，剩下随机生成：&quot;).split(&apos; &apos;)</span><br><span class=\"line\">        lunch_custom_list = input(&quot;午餐菜单(最多3样),不够3样，剩下随机生成：&quot;).split(&apos; &apos;)</span><br><span class=\"line\">        dinner_custom_list = input(&quot;晚餐菜单(最多3样),不够3样，剩下随机生成：&quot;).split(&apos; &apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 携带参数, *的作用是解包，[1,2,3] =&gt; 1,2,3</span><br><span class=\"line\">        breakfast = breakfast.curry(*(breakfast_custom_list))</span><br><span class=\"line\">        lunch = lunch.curry(*(lunch_custom_list))</span><br><span class=\"line\">        dinner = dinner.curry(*(dinner_custom_list))</span><br><span class=\"line\"></span><br><span class=\"line\">        # 输出的漂亮格式就不搞了，直接打印啦</span><br><span class=\"line\">        pprint.print(menu &gt;&gt; breakfast &gt;&gt; lunch &gt;&gt; dinner)</span><br></pre></td></tr></table></figure>\n<h3 id=\"随机生成效果\"><a href=\"#随机生成效果\" class=\"headerlink\" title=\"随机生成效果\"></a>随机生成效果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">菜单是否自动生成？是：1 否：0 </span><br><span class=\"line\">1</span><br><span class=\"line\">&#123;&apos;breakfast&apos;: [&apos;bread&apos;, &apos;egg&apos;, &apos;corn&apos;],</span><br><span class=\"line\"> &apos;dinner&apos;: [&apos;tofu&apos;, &apos;cucumber&apos;, &apos;lean meat&apos;],</span><br><span class=\"line\"> &apos;lunch&apos;: [&apos;spinach&apos;, &apos;chicken&apos;, &apos;fish&apos;]&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义菜单生成效果\"><a href=\"#自定义菜单生成效果\" class=\"headerlink\" title=\"自定义菜单生成效果\"></a>自定义菜单生成效果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">菜单是否自动生成？是：1 否：0</span><br><span class=\"line\">0</span><br><span class=\"line\">早餐菜单(最多3样),不够3样，剩下随机生成：地瓜 玉米 白粥</span><br><span class=\"line\">午餐菜单(最多3样),不够3样，剩下随机生成：</span><br><span class=\"line\">晚餐菜单(最多3样),不够3样，剩下随机生成：丝瓜汤</span><br><span class=\"line\">&#123;&apos;breakfast&apos;: [&apos;地瓜&apos;, &apos;玉米&apos;, &apos;白粥&apos;],</span><br><span class=\"line\"> &apos;dinner&apos;: [&apos;tofu&apos;, &apos;cucumber&apos;, &apos;丝瓜汤&apos;],</span><br><span class=\"line\"> &apos;lunch&apos;: [&apos;beef&apos;, &apos;fish&apos;, &apos;radish&apos;]&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"携带参数的实现\"><a href=\"#携带参数的实现\" class=\"headerlink\" title=\"携带参数的实现\"></a>携带参数的实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 实现携带自定义参数</span><br><span class=\"line\">    def curry(self, *args, **kwargs):</span><br><span class=\"line\">        return Pipe(lambda x: self.function(x, *args, **kwargs))</span><br></pre></td></tr></table></figure>\n<p>原理： 匿名函数的*args和**kwargs保存了需要携带的参数。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>其他语法，未提到的，欢迎留言沟通</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"需求描述\"><a href=\"#需求描述\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h3><p>假如需要实现一个随机生成三餐的食谱的需求，提供全部随机生成或自定义同时随机生成两种选项，尽量Pythonic。例如，这样调用即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">breakfast &gt;&gt; lunch &gt;&gt; dinner</span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h3><p>1.&gt;> 的语法实现需要使用__rshift__和__rrshift__。</p>\n<ol start=\"2\">\n<li>自定义一个三餐的列表作为随机选取的对象</li>\n<li>如果是全部随机生成，则无需传递参数，进行4和5的步骤</li>\n<li>breakfast的结果传递给lunch，在breakfast的结果基础插入lunch</li>\n<li>lunch的结果传递给dinner，在lunch的结果基础插入dinner</li>\n<li>如果是自定义同时随机生成，则需要一个函数进记录参数，然后重复45步骤<h3 id=\"实现-gt-gt-管道语法\"><a href=\"#实现-gt-gt-管道语法\" class=\"headerlink\" title=\"实现&gt;&gt;管道语法\"></a>实现&gt;&gt;管道语法</h3>语法例子建议参考前两期推文<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding=utf-8 -*-</span><br><span class=\"line\">import functools</span><br><span class=\"line\">import random</span><br><span class=\"line\">import pprint</span><br><span class=\"line\"></span><br><span class=\"line\">class Pipe:</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, function):</span><br><span class=\"line\">        self.function = function</span><br><span class=\"line\">        functools.update_wrapper(self, function)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 当 &gt;&gt; 两边其中一个没有实现__rshift__时调用</span><br><span class=\"line\">    def __rrshift__(self, other):</span><br><span class=\"line\">        return self.function(other)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 实现携带自定义参数</span><br><span class=\"line\">    def curry(self, *args, **kwargs):</span><br><span class=\"line\">        return Pipe(lambda x: self.function(x, *args, **kwargs))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"菜单候取对象\"><a href=\"#菜单候取对象\" class=\"headerlink\" title=\"菜单候取对象\"></a>菜单候取对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">breakfast_menu = [&apos;bacon&apos;, &apos;egg&apos;, &apos;milk&apos;, &apos;porridge&apos;, &apos;bread&apos;, &apos;corn&apos;]</span><br><span class=\"line\">lunch_menu = [&apos;fish&apos;, &apos;beef&apos;, &apos;chicken&apos;, &apos;radish&apos;, &apos;spinach&apos;, &apos;watercress&apos;]</span><br><span class=\"line\">dinner_menu = [&apos;lean meat&apos;, &apos;mutton&apos;, &apos;celery&apos;, &apos;tofu&apos;, &apos;cucumber&apos;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"菜单随机实现\"><a href=\"#菜单随机实现\" class=\"headerlink\" title=\"菜单随机实现\"></a>菜单随机实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Pipe</span><br><span class=\"line\">def breakfast(menu, *args, **kwargs):</span><br><span class=\"line\">    menu[&apos;breakfast&apos;] = random.sample(breakfast_menu, 3 if args == (&apos;&apos;,) else 3 - len(args))</span><br><span class=\"line\">    if not args == (&apos;&apos;,):</span><br><span class=\"line\">        for custom in args:</span><br><span class=\"line\">            menu[&apos;breakfast&apos;].append(custom)</span><br><span class=\"line\">    return menu</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@Pipe</span><br><span class=\"line\">def lunch(menu, *args, **kwargs):</span><br><span class=\"line\">    menu[&apos;lunch&apos;] = random.sample(lunch_menu, 3 if args == (&apos;&apos;,) else 3 - len(args))</span><br><span class=\"line\">    if not args == (&apos;&apos;,):</span><br><span class=\"line\">        for custom in args:</span><br><span class=\"line\">            menu[&apos;lunch&apos;].append(custom)</span><br><span class=\"line\">    return menu</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@Pipe</span><br><span class=\"line\">def dinner(menu, *args, **kwargs):</span><br><span class=\"line\">    menu[&apos;dinner&apos;] = random.sample(dinner_menu, 3 if args == (&apos;&apos;,) else 3 - len(args))</span><br><span class=\"line\">    if not args == (&apos;&apos;,):</span><br><span class=\"line\">        for custom in args:</span><br><span class=\"line\">            menu[&apos;dinner&apos;].append(custom)</span><br><span class=\"line\">    return menu</span><br></pre></td></tr></table></figure>\n<h3 id=\"整体控制及管道实现\"><a href=\"#整体控制及管道实现\" class=\"headerlink\" title=\"整体控制及管道实现\"></a>整体控制及管道实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    # menu存放菜单</span><br><span class=\"line\">    menu = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">    random_choice = int(input(&quot;菜单是否自动生成？是：1 否：0\\n&quot;))</span><br><span class=\"line\">    # 自动随机生成</span><br><span class=\"line\">    if random_choice:</span><br><span class=\"line\">        pprint.print(menu &gt;&gt; breakfast &gt;&gt; lunch &gt;&gt; dinner)</span><br><span class=\"line\">    # 自定义菜单，传递参数</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        breakfast_custom_list = input(&quot;早餐菜单(最多3样),不够3样，剩下随机生成：&quot;).split(&apos; &apos;)</span><br><span class=\"line\">        lunch_custom_list = input(&quot;午餐菜单(最多3样),不够3样，剩下随机生成：&quot;).split(&apos; &apos;)</span><br><span class=\"line\">        dinner_custom_list = input(&quot;晚餐菜单(最多3样),不够3样，剩下随机生成：&quot;).split(&apos; &apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 携带参数, *的作用是解包，[1,2,3] =&gt; 1,2,3</span><br><span class=\"line\">        breakfast = breakfast.curry(*(breakfast_custom_list))</span><br><span class=\"line\">        lunch = lunch.curry(*(lunch_custom_list))</span><br><span class=\"line\">        dinner = dinner.curry(*(dinner_custom_list))</span><br><span class=\"line\"></span><br><span class=\"line\">        # 输出的漂亮格式就不搞了，直接打印啦</span><br><span class=\"line\">        pprint.print(menu &gt;&gt; breakfast &gt;&gt; lunch &gt;&gt; dinner)</span><br></pre></td></tr></table></figure>\n<h3 id=\"随机生成效果\"><a href=\"#随机生成效果\" class=\"headerlink\" title=\"随机生成效果\"></a>随机生成效果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">菜单是否自动生成？是：1 否：0 </span><br><span class=\"line\">1</span><br><span class=\"line\">&#123;&apos;breakfast&apos;: [&apos;bread&apos;, &apos;egg&apos;, &apos;corn&apos;],</span><br><span class=\"line\"> &apos;dinner&apos;: [&apos;tofu&apos;, &apos;cucumber&apos;, &apos;lean meat&apos;],</span><br><span class=\"line\"> &apos;lunch&apos;: [&apos;spinach&apos;, &apos;chicken&apos;, &apos;fish&apos;]&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义菜单生成效果\"><a href=\"#自定义菜单生成效果\" class=\"headerlink\" title=\"自定义菜单生成效果\"></a>自定义菜单生成效果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">菜单是否自动生成？是：1 否：0</span><br><span class=\"line\">0</span><br><span class=\"line\">早餐菜单(最多3样),不够3样，剩下随机生成：地瓜 玉米 白粥</span><br><span class=\"line\">午餐菜单(最多3样),不够3样，剩下随机生成：</span><br><span class=\"line\">晚餐菜单(最多3样),不够3样，剩下随机生成：丝瓜汤</span><br><span class=\"line\">&#123;&apos;breakfast&apos;: [&apos;地瓜&apos;, &apos;玉米&apos;, &apos;白粥&apos;],</span><br><span class=\"line\"> &apos;dinner&apos;: [&apos;tofu&apos;, &apos;cucumber&apos;, &apos;丝瓜汤&apos;],</span><br><span class=\"line\"> &apos;lunch&apos;: [&apos;beef&apos;, &apos;fish&apos;, &apos;radish&apos;]&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"携带参数的实现\"><a href=\"#携带参数的实现\" class=\"headerlink\" title=\"携带参数的实现\"></a>携带参数的实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 实现携带自定义参数</span><br><span class=\"line\">    def curry(self, *args, **kwargs):</span><br><span class=\"line\">        return Pipe(lambda x: self.function(x, *args, **kwargs))</span><br></pre></td></tr></table></figure>\n<p>原理： 匿名函数的*args和**kwargs保存了需要携带的参数。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>其他语法，未提到的，欢迎留言沟通</p>"},{"title":"Python告诉你爱情公寓和一出好戏的差别","comments":1,"toc":true,"date":"2018-08-12T02:12:50.000Z","_content":"\n使用Scrapy框架进行分别爬取了<爱情公寓>和<一出好戏>的这两天的豆瓣影评数据并制作了词云，供大家参考：<!--more-->\n\n### 爱情公寓星级评价\n\n##### 饼图：\n\n![](https://pic4.zhimg.com/80/v2-7b7a9298195f7e98dfae67c0eced8d44_hd.jpg)\n\n\n##### 柱状图：\n\n\n![](https://pic1.zhimg.com/80/v2-79e90e621562f1d83681bfbd28658142_hd.jpg)\n\n### 一出好戏星级评价\n\n##### 饼图：\n\n![](https://pic1.zhimg.com/80/v2-efb3bb1d813ea1936ada62de17ab28a4_hd.jpg)\n\n\n##### 柱状图：\n\n\n![](https://pic2.zhimg.com/80/v2-2a7db142c2e6992a195f73da6343d258_hd.jpg)\n\n从星级评价中，一路好戏远远超越了爱情公寓，爱情公寓绝大部分都是一星，而一路好戏集中在四星\n\n### 爱情公寓词云\n\n![](https://pic4.zhimg.com/80/v2-248d7662d799fd655f55629db4271a60_hd.jpg)\n\n\n出现最多的就是挂羊头卖狗肉了\n\n### 一出好戏词云\n\n![](https://pic1.zhimg.com/80/v2-4d9f175e535ef094045d6bfd9f3d0527_hd.jpg)\n\n\n一出好戏的评价里很多都表示很惊讶，没想到黄渤的导演处女作会这么好看同时也很社会。。。，值得深思的，笑过的同时也需要琢磨琢磨这其中的社会规律，推荐大家去支持一下。\n\n>多年后，\n记者：黄导，当年您的电影大卖，你觉得成功的原因是什么？\n黄导：哪里哪里，是确实拍的很不错，但同时也有同行衬托的功劳\n\n\n好了，需要源码捣鼓可以微信公众号Python孙行者回复\"豆瓣\"获取\n","source":"_posts/Python告诉你爱情公寓和一出好戏的差别.md","raw":"---\ntitle: Python告诉你爱情公寓和一出好戏的差别\ncomments: true\ntoc: true\ncategories:\n- Python\ndate: 2018-08-12 10:12:50\ntags:\n- Scrapy 数据分析\n---\n\n使用Scrapy框架进行分别爬取了<爱情公寓>和<一出好戏>的这两天的豆瓣影评数据并制作了词云，供大家参考：<!--more-->\n\n### 爱情公寓星级评价\n\n##### 饼图：\n\n![](https://pic4.zhimg.com/80/v2-7b7a9298195f7e98dfae67c0eced8d44_hd.jpg)\n\n\n##### 柱状图：\n\n\n![](https://pic1.zhimg.com/80/v2-79e90e621562f1d83681bfbd28658142_hd.jpg)\n\n### 一出好戏星级评价\n\n##### 饼图：\n\n![](https://pic1.zhimg.com/80/v2-efb3bb1d813ea1936ada62de17ab28a4_hd.jpg)\n\n\n##### 柱状图：\n\n\n![](https://pic2.zhimg.com/80/v2-2a7db142c2e6992a195f73da6343d258_hd.jpg)\n\n从星级评价中，一路好戏远远超越了爱情公寓，爱情公寓绝大部分都是一星，而一路好戏集中在四星\n\n### 爱情公寓词云\n\n![](https://pic4.zhimg.com/80/v2-248d7662d799fd655f55629db4271a60_hd.jpg)\n\n\n出现最多的就是挂羊头卖狗肉了\n\n### 一出好戏词云\n\n![](https://pic1.zhimg.com/80/v2-4d9f175e535ef094045d6bfd9f3d0527_hd.jpg)\n\n\n一出好戏的评价里很多都表示很惊讶，没想到黄渤的导演处女作会这么好看同时也很社会。。。，值得深思的，笑过的同时也需要琢磨琢磨这其中的社会规律，推荐大家去支持一下。\n\n>多年后，\n记者：黄导，当年您的电影大卖，你觉得成功的原因是什么？\n黄导：哪里哪里，是确实拍的很不错，但同时也有同行衬托的功劳\n\n\n好了，需要源码捣鼓可以微信公众号Python孙行者回复\"豆瓣\"获取\n","slug":"Python告诉你爱情公寓和一出好戏的差别","published":1,"updated":"2019-05-25T09:32:43.102Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtd7001ee5vx5m0wqvjc","content":"<p>使用Scrapy框架进行分别爬取了&lt;爱情公寓&gt;和&lt;一出好戏&gt;的这两天的豆瓣影评数据并制作了词云，供大家参考：<a id=\"more\"></a></p>\n<h3 id=\"爱情公寓星级评价\"><a href=\"#爱情公寓星级评价\" class=\"headerlink\" title=\"爱情公寓星级评价\"></a>爱情公寓星级评价</h3><h5 id=\"饼图：\"><a href=\"#饼图：\" class=\"headerlink\" title=\"饼图：\"></a>饼图：</h5><p><img src=\"https://pic4.zhimg.com/80/v2-7b7a9298195f7e98dfae67c0eced8d44_hd.jpg\" alt=\"\"></p>\n<h5 id=\"柱状图：\"><a href=\"#柱状图：\" class=\"headerlink\" title=\"柱状图：\"></a>柱状图：</h5><p><img src=\"https://pic1.zhimg.com/80/v2-79e90e621562f1d83681bfbd28658142_hd.jpg\" alt=\"\"></p>\n<h3 id=\"一出好戏星级评价\"><a href=\"#一出好戏星级评价\" class=\"headerlink\" title=\"一出好戏星级评价\"></a>一出好戏星级评价</h3><h5 id=\"饼图：-1\"><a href=\"#饼图：-1\" class=\"headerlink\" title=\"饼图：\"></a>饼图：</h5><p><img src=\"https://pic1.zhimg.com/80/v2-efb3bb1d813ea1936ada62de17ab28a4_hd.jpg\" alt=\"\"></p>\n<h5 id=\"柱状图：-1\"><a href=\"#柱状图：-1\" class=\"headerlink\" title=\"柱状图：\"></a>柱状图：</h5><p><img src=\"https://pic2.zhimg.com/80/v2-2a7db142c2e6992a195f73da6343d258_hd.jpg\" alt=\"\"></p>\n<p>从星级评价中，一路好戏远远超越了爱情公寓，爱情公寓绝大部分都是一星，而一路好戏集中在四星</p>\n<h3 id=\"爱情公寓词云\"><a href=\"#爱情公寓词云\" class=\"headerlink\" title=\"爱情公寓词云\"></a>爱情公寓词云</h3><p><img src=\"https://pic4.zhimg.com/80/v2-248d7662d799fd655f55629db4271a60_hd.jpg\" alt=\"\"></p>\n<p>出现最多的就是挂羊头卖狗肉了</p>\n<h3 id=\"一出好戏词云\"><a href=\"#一出好戏词云\" class=\"headerlink\" title=\"一出好戏词云\"></a>一出好戏词云</h3><p><img src=\"https://pic1.zhimg.com/80/v2-4d9f175e535ef094045d6bfd9f3d0527_hd.jpg\" alt=\"\"></p>\n<p>一出好戏的评价里很多都表示很惊讶，没想到黄渤的导演处女作会这么好看同时也很社会。。。，值得深思的，笑过的同时也需要琢磨琢磨这其中的社会规律，推荐大家去支持一下。</p>\n<blockquote>\n<p>多年后，<br>记者：黄导，当年您的电影大卖，你觉得成功的原因是什么？<br>黄导：哪里哪里，是确实拍的很不错，但同时也有同行衬托的功劳</p>\n</blockquote>\n<p>好了，需要源码捣鼓可以微信公众号Python孙行者回复”豆瓣”获取</p>\n","site":{"data":{}},"excerpt":"<p>使用Scrapy框架进行分别爬取了&lt;爱情公寓&gt;和&lt;一出好戏&gt;的这两天的豆瓣影评数据并制作了词云，供大家参考：","more":"</p>\n<h3 id=\"爱情公寓星级评价\"><a href=\"#爱情公寓星级评价\" class=\"headerlink\" title=\"爱情公寓星级评价\"></a>爱情公寓星级评价</h3><h5 id=\"饼图：\"><a href=\"#饼图：\" class=\"headerlink\" title=\"饼图：\"></a>饼图：</h5><p><img src=\"https://pic4.zhimg.com/80/v2-7b7a9298195f7e98dfae67c0eced8d44_hd.jpg\" alt=\"\"></p>\n<h5 id=\"柱状图：\"><a href=\"#柱状图：\" class=\"headerlink\" title=\"柱状图：\"></a>柱状图：</h5><p><img src=\"https://pic1.zhimg.com/80/v2-79e90e621562f1d83681bfbd28658142_hd.jpg\" alt=\"\"></p>\n<h3 id=\"一出好戏星级评价\"><a href=\"#一出好戏星级评价\" class=\"headerlink\" title=\"一出好戏星级评价\"></a>一出好戏星级评价</h3><h5 id=\"饼图：-1\"><a href=\"#饼图：-1\" class=\"headerlink\" title=\"饼图：\"></a>饼图：</h5><p><img src=\"https://pic1.zhimg.com/80/v2-efb3bb1d813ea1936ada62de17ab28a4_hd.jpg\" alt=\"\"></p>\n<h5 id=\"柱状图：-1\"><a href=\"#柱状图：-1\" class=\"headerlink\" title=\"柱状图：\"></a>柱状图：</h5><p><img src=\"https://pic2.zhimg.com/80/v2-2a7db142c2e6992a195f73da6343d258_hd.jpg\" alt=\"\"></p>\n<p>从星级评价中，一路好戏远远超越了爱情公寓，爱情公寓绝大部分都是一星，而一路好戏集中在四星</p>\n<h3 id=\"爱情公寓词云\"><a href=\"#爱情公寓词云\" class=\"headerlink\" title=\"爱情公寓词云\"></a>爱情公寓词云</h3><p><img src=\"https://pic4.zhimg.com/80/v2-248d7662d799fd655f55629db4271a60_hd.jpg\" alt=\"\"></p>\n<p>出现最多的就是挂羊头卖狗肉了</p>\n<h3 id=\"一出好戏词云\"><a href=\"#一出好戏词云\" class=\"headerlink\" title=\"一出好戏词云\"></a>一出好戏词云</h3><p><img src=\"https://pic1.zhimg.com/80/v2-4d9f175e535ef094045d6bfd9f3d0527_hd.jpg\" alt=\"\"></p>\n<p>一出好戏的评价里很多都表示很惊讶，没想到黄渤的导演处女作会这么好看同时也很社会。。。，值得深思的，笑过的同时也需要琢磨琢磨这其中的社会规律，推荐大家去支持一下。</p>\n<blockquote>\n<p>多年后，<br>记者：黄导，当年您的电影大卖，你觉得成功的原因是什么？<br>黄导：哪里哪里，是确实拍的很不错，但同时也有同行衬托的功劳</p>\n</blockquote>\n<p>好了，需要源码捣鼓可以微信公众号Python孙行者回复”豆瓣”获取</p>"},{"title":"Python代码版本兼容技巧以及自我实现six","comments":1,"date":"2018-08-10T12:58:04.000Z","toc":true,"_content":"\n开发中经常会遇到有些包在Python2和Python3中的名字或者导包路径已经不一样，如果Python2版本里的代码拿到3版本的环境去运行就会发生错误。<!--more-->\n例如：爬虫常用的urllib的查询字符串转化处理函数urlencode的导包路径就不一样\n### urlencode不同版本使用\n\nPython2:\n```\nimport urllib\nquery_string = {\n  'name': 'Python',\n  'version': 2\n}\nquery_string = urllib.urlencode(query_string)  \n# version=2&name=Python\n```\n\nPython3:\n```\nimport urllib\n\nquery_string = {\n   'name': 'Python',\n   'version': 2\n}\nquery_string = urllib.parse.urlencode(query_string)\n# version=2&name=Python\n```\n\n那么为了实现代码的兼容，我们可以使用一个非常好用的模块去判断当前环境所使用的Python版本：six  就是非常666的意思了（其实是2和3的最小公倍数）\n\n### 使用six实现Python版本兼容\n```\nimport six\n\nif six.PY2:\n   import urllib\nelse:\n   import urllib.parse as urllib\n\nquery_string = {\n   'name': 'Python',\n   'version': 2\n}\nquery_string = urllib.urlencode(query_string)\n# version=2&name=Python\n```\n\n### 下面看看six到底是怎么实现的\n\n查看six在Python2中的源码：\n\n![](http://paresur4s.bkt.clouddn.com/python2.png)\n查看six在Python3中的源码：\n![](http://paresur4s.bkt.clouddn.com/python3.png)\n\n\n看到这里，我。。。，原来是这样啊：\n\n1. Python2版本six源码直接把PY2写为True\n2. Python3版本six源码直接把PY3写为True\n\n所以看到这里，一点都不玄乎\n\n### 自我实现six\n\n那么我们自己实现一个和six一样功能的mysix模块动态获取Python版本：\n\n#### 思路：\nsys模块有一个属性可以获取到Python的版本信息：version，那么我们也可以根据这个属性来判断当前的Python版本决定使用哪种导包方式\n\n\n\nmysix.py\n```\n# coding=utf-8\nimport sys\n\n\nPY2 = False\nPY3 = False\n\ndef python_version():\n   version = sys.version[0]\n   # sys.version 返回版本信息字符串 3.7.0......\n   if version == '2':\n       global PY2\n       PY2 = True\n   else:\n       global PY3\n       PY3 = True\n   return\n\n# 导包时直接执行获取到版本信息\npython_version()\n```\n\n和six一样直接导入使用即可：\n```\nimport mysix\n\nif mysix.PY2:\n   import urllib\nelse:\n   import urllib.parse as urllib\n\nquery_string = {\n   'name': 'Python',\n   'version': 2\n}\nquery_string = urllib.urlencode(query_string)\n# version=2&name=Python\n```\n\n至此，我们就自己实现了six中判断Python版本的功能进而实现代码版本兼容。\n\n有时候，看一下源码，会豁然开朗很多，其实自己也可以实现。\n\n学习要知其所以然，那样也会有动力很多，清晰很多。\n","source":"_posts/Python代码版本兼容技巧以及自我实现six.md","raw":"---\ntitle: Python代码版本兼容技巧以及自我实现six\ncomments: true\ndate: 2018-08-10 20:58:04\ntoc: true\ncategories:\n- Python\ntags:\n- 兼容\n---\n\n开发中经常会遇到有些包在Python2和Python3中的名字或者导包路径已经不一样，如果Python2版本里的代码拿到3版本的环境去运行就会发生错误。<!--more-->\n例如：爬虫常用的urllib的查询字符串转化处理函数urlencode的导包路径就不一样\n### urlencode不同版本使用\n\nPython2:\n```\nimport urllib\nquery_string = {\n  'name': 'Python',\n  'version': 2\n}\nquery_string = urllib.urlencode(query_string)  \n# version=2&name=Python\n```\n\nPython3:\n```\nimport urllib\n\nquery_string = {\n   'name': 'Python',\n   'version': 2\n}\nquery_string = urllib.parse.urlencode(query_string)\n# version=2&name=Python\n```\n\n那么为了实现代码的兼容，我们可以使用一个非常好用的模块去判断当前环境所使用的Python版本：six  就是非常666的意思了（其实是2和3的最小公倍数）\n\n### 使用six实现Python版本兼容\n```\nimport six\n\nif six.PY2:\n   import urllib\nelse:\n   import urllib.parse as urllib\n\nquery_string = {\n   'name': 'Python',\n   'version': 2\n}\nquery_string = urllib.urlencode(query_string)\n# version=2&name=Python\n```\n\n### 下面看看six到底是怎么实现的\n\n查看six在Python2中的源码：\n\n![](http://paresur4s.bkt.clouddn.com/python2.png)\n查看six在Python3中的源码：\n![](http://paresur4s.bkt.clouddn.com/python3.png)\n\n\n看到这里，我。。。，原来是这样啊：\n\n1. Python2版本six源码直接把PY2写为True\n2. Python3版本six源码直接把PY3写为True\n\n所以看到这里，一点都不玄乎\n\n### 自我实现six\n\n那么我们自己实现一个和six一样功能的mysix模块动态获取Python版本：\n\n#### 思路：\nsys模块有一个属性可以获取到Python的版本信息：version，那么我们也可以根据这个属性来判断当前的Python版本决定使用哪种导包方式\n\n\n\nmysix.py\n```\n# coding=utf-8\nimport sys\n\n\nPY2 = False\nPY3 = False\n\ndef python_version():\n   version = sys.version[0]\n   # sys.version 返回版本信息字符串 3.7.0......\n   if version == '2':\n       global PY2\n       PY2 = True\n   else:\n       global PY3\n       PY3 = True\n   return\n\n# 导包时直接执行获取到版本信息\npython_version()\n```\n\n和six一样直接导入使用即可：\n```\nimport mysix\n\nif mysix.PY2:\n   import urllib\nelse:\n   import urllib.parse as urllib\n\nquery_string = {\n   'name': 'Python',\n   'version': 2\n}\nquery_string = urllib.urlencode(query_string)\n# version=2&name=Python\n```\n\n至此，我们就自己实现了six中判断Python版本的功能进而实现代码版本兼容。\n\n有时候，看一下源码，会豁然开朗很多，其实自己也可以实现。\n\n学习要知其所以然，那样也会有动力很多，清晰很多。\n","slug":"Python代码版本兼容技巧以及自我实现six","published":1,"updated":"2019-05-25T09:32:43.102Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtdb001he5vxwuf0mavq","content":"<p>开发中经常会遇到有些包在Python2和Python3中的名字或者导包路径已经不一样，如果Python2版本里的代码拿到3版本的环境去运行就会发生错误。<a id=\"more\"></a><br>例如：爬虫常用的urllib的查询字符串转化处理函数urlencode的导包路径就不一样</p>\n<h3 id=\"urlencode不同版本使用\"><a href=\"#urlencode不同版本使用\" class=\"headerlink\" title=\"urlencode不同版本使用\"></a>urlencode不同版本使用</h3><p>Python2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib</span><br><span class=\"line\">query_string = &#123;</span><br><span class=\"line\">  &apos;name&apos;: &apos;Python&apos;,</span><br><span class=\"line\">  &apos;version&apos;: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">query_string = urllib.urlencode(query_string)  </span><br><span class=\"line\"># version=2&amp;name=Python</span><br></pre></td></tr></table></figure></p>\n<p>Python3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib</span><br><span class=\"line\"></span><br><span class=\"line\">query_string = &#123;</span><br><span class=\"line\">   &apos;name&apos;: &apos;Python&apos;,</span><br><span class=\"line\">   &apos;version&apos;: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">query_string = urllib.parse.urlencode(query_string)</span><br><span class=\"line\"># version=2&amp;name=Python</span><br></pre></td></tr></table></figure></p>\n<p>那么为了实现代码的兼容，我们可以使用一个非常好用的模块去判断当前环境所使用的Python版本：six  就是非常666的意思了（其实是2和3的最小公倍数）</p>\n<h3 id=\"使用six实现Python版本兼容\"><a href=\"#使用six实现Python版本兼容\" class=\"headerlink\" title=\"使用six实现Python版本兼容\"></a>使用six实现Python版本兼容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import six</span><br><span class=\"line\"></span><br><span class=\"line\">if six.PY2:</span><br><span class=\"line\">   import urllib</span><br><span class=\"line\">else:</span><br><span class=\"line\">   import urllib.parse as urllib</span><br><span class=\"line\"></span><br><span class=\"line\">query_string = &#123;</span><br><span class=\"line\">   &apos;name&apos;: &apos;Python&apos;,</span><br><span class=\"line\">   &apos;version&apos;: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">query_string = urllib.urlencode(query_string)</span><br><span class=\"line\"># version=2&amp;name=Python</span><br></pre></td></tr></table></figure>\n<h3 id=\"下面看看six到底是怎么实现的\"><a href=\"#下面看看six到底是怎么实现的\" class=\"headerlink\" title=\"下面看看six到底是怎么实现的\"></a>下面看看six到底是怎么实现的</h3><p>查看six在Python2中的源码：</p>\n<p><img src=\"http://paresur4s.bkt.clouddn.com/python2.png\" alt=\"\"><br>查看six在Python3中的源码：<br><img src=\"http://paresur4s.bkt.clouddn.com/python3.png\" alt=\"\"></p>\n<p>看到这里，我。。。，原来是这样啊：</p>\n<ol>\n<li>Python2版本six源码直接把PY2写为True</li>\n<li>Python3版本six源码直接把PY3写为True</li>\n</ol>\n<p>所以看到这里，一点都不玄乎</p>\n<h3 id=\"自我实现six\"><a href=\"#自我实现six\" class=\"headerlink\" title=\"自我实现six\"></a>自我实现six</h3><p>那么我们自己实现一个和six一样功能的mysix模块动态获取Python版本：</p>\n<h4 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h4><p>sys模块有一个属性可以获取到Python的版本信息：version，那么我们也可以根据这个属性来判断当前的Python版本决定使用哪种导包方式</p>\n<p>mysix.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding=utf-8</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">PY2 = False</span><br><span class=\"line\">PY3 = False</span><br><span class=\"line\"></span><br><span class=\"line\">def python_version():</span><br><span class=\"line\">   version = sys.version[0]</span><br><span class=\"line\">   # sys.version 返回版本信息字符串 3.7.0......</span><br><span class=\"line\">   if version == &apos;2&apos;:</span><br><span class=\"line\">       global PY2</span><br><span class=\"line\">       PY2 = True</span><br><span class=\"line\">   else:</span><br><span class=\"line\">       global PY3</span><br><span class=\"line\">       PY3 = True</span><br><span class=\"line\">   return</span><br><span class=\"line\"></span><br><span class=\"line\"># 导包时直接执行获取到版本信息</span><br><span class=\"line\">python_version()</span><br></pre></td></tr></table></figure></p>\n<p>和six一样直接导入使用即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mysix</span><br><span class=\"line\"></span><br><span class=\"line\">if mysix.PY2:</span><br><span class=\"line\">   import urllib</span><br><span class=\"line\">else:</span><br><span class=\"line\">   import urllib.parse as urllib</span><br><span class=\"line\"></span><br><span class=\"line\">query_string = &#123;</span><br><span class=\"line\">   &apos;name&apos;: &apos;Python&apos;,</span><br><span class=\"line\">   &apos;version&apos;: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">query_string = urllib.urlencode(query_string)</span><br><span class=\"line\"># version=2&amp;name=Python</span><br></pre></td></tr></table></figure></p>\n<p>至此，我们就自己实现了six中判断Python版本的功能进而实现代码版本兼容。</p>\n<p>有时候，看一下源码，会豁然开朗很多，其实自己也可以实现。</p>\n<p>学习要知其所以然，那样也会有动力很多，清晰很多。</p>\n","site":{"data":{}},"excerpt":"<p>开发中经常会遇到有些包在Python2和Python3中的名字或者导包路径已经不一样，如果Python2版本里的代码拿到3版本的环境去运行就会发生错误。","more":"<br>例如：爬虫常用的urllib的查询字符串转化处理函数urlencode的导包路径就不一样</p>\n<h3 id=\"urlencode不同版本使用\"><a href=\"#urlencode不同版本使用\" class=\"headerlink\" title=\"urlencode不同版本使用\"></a>urlencode不同版本使用</h3><p>Python2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib</span><br><span class=\"line\">query_string = &#123;</span><br><span class=\"line\">  &apos;name&apos;: &apos;Python&apos;,</span><br><span class=\"line\">  &apos;version&apos;: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">query_string = urllib.urlencode(query_string)  </span><br><span class=\"line\"># version=2&amp;name=Python</span><br></pre></td></tr></table></figure></p>\n<p>Python3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib</span><br><span class=\"line\"></span><br><span class=\"line\">query_string = &#123;</span><br><span class=\"line\">   &apos;name&apos;: &apos;Python&apos;,</span><br><span class=\"line\">   &apos;version&apos;: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">query_string = urllib.parse.urlencode(query_string)</span><br><span class=\"line\"># version=2&amp;name=Python</span><br></pre></td></tr></table></figure></p>\n<p>那么为了实现代码的兼容，我们可以使用一个非常好用的模块去判断当前环境所使用的Python版本：six  就是非常666的意思了（其实是2和3的最小公倍数）</p>\n<h3 id=\"使用six实现Python版本兼容\"><a href=\"#使用six实现Python版本兼容\" class=\"headerlink\" title=\"使用six实现Python版本兼容\"></a>使用six实现Python版本兼容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import six</span><br><span class=\"line\"></span><br><span class=\"line\">if six.PY2:</span><br><span class=\"line\">   import urllib</span><br><span class=\"line\">else:</span><br><span class=\"line\">   import urllib.parse as urllib</span><br><span class=\"line\"></span><br><span class=\"line\">query_string = &#123;</span><br><span class=\"line\">   &apos;name&apos;: &apos;Python&apos;,</span><br><span class=\"line\">   &apos;version&apos;: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">query_string = urllib.urlencode(query_string)</span><br><span class=\"line\"># version=2&amp;name=Python</span><br></pre></td></tr></table></figure>\n<h3 id=\"下面看看six到底是怎么实现的\"><a href=\"#下面看看six到底是怎么实现的\" class=\"headerlink\" title=\"下面看看six到底是怎么实现的\"></a>下面看看six到底是怎么实现的</h3><p>查看six在Python2中的源码：</p>\n<p><img src=\"http://paresur4s.bkt.clouddn.com/python2.png\" alt=\"\"><br>查看six在Python3中的源码：<br><img src=\"http://paresur4s.bkt.clouddn.com/python3.png\" alt=\"\"></p>\n<p>看到这里，我。。。，原来是这样啊：</p>\n<ol>\n<li>Python2版本six源码直接把PY2写为True</li>\n<li>Python3版本six源码直接把PY3写为True</li>\n</ol>\n<p>所以看到这里，一点都不玄乎</p>\n<h3 id=\"自我实现six\"><a href=\"#自我实现six\" class=\"headerlink\" title=\"自我实现six\"></a>自我实现six</h3><p>那么我们自己实现一个和six一样功能的mysix模块动态获取Python版本：</p>\n<h4 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h4><p>sys模块有一个属性可以获取到Python的版本信息：version，那么我们也可以根据这个属性来判断当前的Python版本决定使用哪种导包方式</p>\n<p>mysix.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding=utf-8</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">PY2 = False</span><br><span class=\"line\">PY3 = False</span><br><span class=\"line\"></span><br><span class=\"line\">def python_version():</span><br><span class=\"line\">   version = sys.version[0]</span><br><span class=\"line\">   # sys.version 返回版本信息字符串 3.7.0......</span><br><span class=\"line\">   if version == &apos;2&apos;:</span><br><span class=\"line\">       global PY2</span><br><span class=\"line\">       PY2 = True</span><br><span class=\"line\">   else:</span><br><span class=\"line\">       global PY3</span><br><span class=\"line\">       PY3 = True</span><br><span class=\"line\">   return</span><br><span class=\"line\"></span><br><span class=\"line\"># 导包时直接执行获取到版本信息</span><br><span class=\"line\">python_version()</span><br></pre></td></tr></table></figure></p>\n<p>和six一样直接导入使用即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mysix</span><br><span class=\"line\"></span><br><span class=\"line\">if mysix.PY2:</span><br><span class=\"line\">   import urllib</span><br><span class=\"line\">else:</span><br><span class=\"line\">   import urllib.parse as urllib</span><br><span class=\"line\"></span><br><span class=\"line\">query_string = &#123;</span><br><span class=\"line\">   &apos;name&apos;: &apos;Python&apos;,</span><br><span class=\"line\">   &apos;version&apos;: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">query_string = urllib.urlencode(query_string)</span><br><span class=\"line\"># version=2&amp;name=Python</span><br></pre></td></tr></table></figure></p>\n<p>至此，我们就自己实现了six中判断Python版本的功能进而实现代码版本兼容。</p>\n<p>有时候，看一下源码，会豁然开朗很多，其实自己也可以实现。</p>\n<p>学习要知其所以然，那样也会有动力很多，清晰很多。</p>"},{"title":"Python实现UTC时间戳和格式化字符串互换","comments":1,"date":"2018-11-13T13:32:25.000Z","_content":"Python实现互转：时间戳和字符串\n<!--more-->\n后台开发经常需要对时间进行记录和返回时间戳给前端。\n为了通用性，我们一般都会存储UTC的时间戳。\n但是，一般对数据库进行时间戳字段的插入，往往是以**格式化的时间字符串进行插入**的，例如：\n```\ninsert into table_name(user_id, login_time) values (\"RidingRoad\", \"2018-11-13 12:19:39\");\n```\n### 业务场景\n假如前端传来了用户的某个UTC时间戳，后台需要录入数据库，当前端请求时候，返回这个UTC时间戳。\n### 业务分析\n这个UTC时间戳的状态变化：\n1. 前端传过来的：double型的时间戳\n2. 插入数据库时：格式化的时间字符串\n3. 返回给前端的：double型的时间戳\n所以我们需要一个对**时间和格式化的时间字符串进行转换**的函数\n### 转换实现\n```\nimport time\n\n# UTC 转换为 格式化的时间字符串\ndef u2s(utc_timestamp):\n    return time.strftime(\"%Y-%m-%d %H:%M:%S\", time.gmtime(utc_timestamp))\n\n# 格式化的时间字符串 转换为 UTC\ndef s2u(utc_time_string):\n    return time.mktime(time.strptime(utc_time_string, \"%Y-%m-%d %H:%M:%S\"))\\\n           - time.mktime(time.gmtime(0))\n```\n### 效果展示\n```\nif __name__ == \"__main__\":\n    # 取得当前的UTC时间戳\n    timestamp = time.time()\n    print(timestamp)\n\n    # 把UTC时间戳转换为日期格式字符串\n    utc_time_string = u2s(timestamp)\n    print(utc_time_string)\n\n    # 把日期字符串转换回UTC时间戳\n    utc_timestamp = s2u(utc_time_string)\n    print(utc_timestamp)\n\n    # 把转换后的UTC时间戳转换成日期字符串\n    # 看看误差，秒数也一样，一般不影响\n    after_conver = u2s(utc_timestamp)\n    print(after_conver)\n```\n### 结果输出\n两个时间戳的误差在零点毫秒级，前后的日期格式字符串一样，一般的业务可以接受这样的误差。**有更精准的方法，下面评论告诉我吧。**\n```\n1542112115.95\n2018-11-13 12:28:35\n1542112115.0\n2018-11-13 12:28:35\n```\n### Python全面学习资料\n公众号“Python孙行者”后台回复“电子书“即可\n![](https://mmbiz.qpic.cn/mmbiz_png/1ndlcPm7Ab4p0zUxJ9N2icqVOPm4KaibT1XzumWCK636mibdwmUZFMEMNNiaYnxYlZCibdeKdiaCRIpCmicEiadNticPgtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n","source":"_posts/Python实现UTC时间戳和格式化字符串互转.md","raw":"---\ntitle: Python实现UTC时间戳和格式化字符串互换\ncomments: true\ndate: 2018-11-13 21:32:25\ntags:\n- 时间戳\ncategories:\n- Python\n---\nPython实现互转：时间戳和字符串\n<!--more-->\n后台开发经常需要对时间进行记录和返回时间戳给前端。\n为了通用性，我们一般都会存储UTC的时间戳。\n但是，一般对数据库进行时间戳字段的插入，往往是以**格式化的时间字符串进行插入**的，例如：\n```\ninsert into table_name(user_id, login_time) values (\"RidingRoad\", \"2018-11-13 12:19:39\");\n```\n### 业务场景\n假如前端传来了用户的某个UTC时间戳，后台需要录入数据库，当前端请求时候，返回这个UTC时间戳。\n### 业务分析\n这个UTC时间戳的状态变化：\n1. 前端传过来的：double型的时间戳\n2. 插入数据库时：格式化的时间字符串\n3. 返回给前端的：double型的时间戳\n所以我们需要一个对**时间和格式化的时间字符串进行转换**的函数\n### 转换实现\n```\nimport time\n\n# UTC 转换为 格式化的时间字符串\ndef u2s(utc_timestamp):\n    return time.strftime(\"%Y-%m-%d %H:%M:%S\", time.gmtime(utc_timestamp))\n\n# 格式化的时间字符串 转换为 UTC\ndef s2u(utc_time_string):\n    return time.mktime(time.strptime(utc_time_string, \"%Y-%m-%d %H:%M:%S\"))\\\n           - time.mktime(time.gmtime(0))\n```\n### 效果展示\n```\nif __name__ == \"__main__\":\n    # 取得当前的UTC时间戳\n    timestamp = time.time()\n    print(timestamp)\n\n    # 把UTC时间戳转换为日期格式字符串\n    utc_time_string = u2s(timestamp)\n    print(utc_time_string)\n\n    # 把日期字符串转换回UTC时间戳\n    utc_timestamp = s2u(utc_time_string)\n    print(utc_timestamp)\n\n    # 把转换后的UTC时间戳转换成日期字符串\n    # 看看误差，秒数也一样，一般不影响\n    after_conver = u2s(utc_timestamp)\n    print(after_conver)\n```\n### 结果输出\n两个时间戳的误差在零点毫秒级，前后的日期格式字符串一样，一般的业务可以接受这样的误差。**有更精准的方法，下面评论告诉我吧。**\n```\n1542112115.95\n2018-11-13 12:28:35\n1542112115.0\n2018-11-13 12:28:35\n```\n### Python全面学习资料\n公众号“Python孙行者”后台回复“电子书“即可\n![](https://mmbiz.qpic.cn/mmbiz_png/1ndlcPm7Ab4p0zUxJ9N2icqVOPm4KaibT1XzumWCK636mibdwmUZFMEMNNiaYnxYlZCibdeKdiaCRIpCmicEiadNticPgtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n","slug":"Python实现UTC时间戳和格式化字符串互转","published":1,"updated":"2019-05-25T09:32:43.102Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtde001le5vxign8n1qo","content":"<p>Python实现互转：时间戳和字符串<br><a id=\"more\"></a><br>后台开发经常需要对时间进行记录和返回时间戳给前端。<br>为了通用性，我们一般都会存储UTC的时间戳。<br>但是，一般对数据库进行时间戳字段的插入，往往是以<strong>格式化的时间字符串进行插入</strong>的，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into table_name(user_id, login_time) values (&quot;RidingRoad&quot;, &quot;2018-11-13 12:19:39&quot;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h3><p>假如前端传来了用户的某个UTC时间戳，后台需要录入数据库，当前端请求时候，返回这个UTC时间戳。</p>\n<h3 id=\"业务分析\"><a href=\"#业务分析\" class=\"headerlink\" title=\"业务分析\"></a>业务分析</h3><p>这个UTC时间戳的状态变化：</p>\n<ol>\n<li>前端传过来的：double型的时间戳</li>\n<li>插入数据库时：格式化的时间字符串</li>\n<li>返回给前端的：double型的时间戳<br>所以我们需要一个对<strong>时间和格式化的时间字符串进行转换</strong>的函数<h3 id=\"转换实现\"><a href=\"#转换实现\" class=\"headerlink\" title=\"转换实现\"></a>转换实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"># UTC 转换为 格式化的时间字符串</span><br><span class=\"line\">def u2s(utc_timestamp):</span><br><span class=\"line\">    return time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.gmtime(utc_timestamp))</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式化的时间字符串 转换为 UTC</span><br><span class=\"line\">def s2u(utc_time_string):</span><br><span class=\"line\">    return time.mktime(time.strptime(utc_time_string, &quot;%Y-%m-%d %H:%M:%S&quot;))\\</span><br><span class=\"line\">           - time.mktime(time.gmtime(0))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    # 取得当前的UTC时间戳</span><br><span class=\"line\">    timestamp = time.time()</span><br><span class=\"line\">    print(timestamp)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 把UTC时间戳转换为日期格式字符串</span><br><span class=\"line\">    utc_time_string = u2s(timestamp)</span><br><span class=\"line\">    print(utc_time_string)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 把日期字符串转换回UTC时间戳</span><br><span class=\"line\">    utc_timestamp = s2u(utc_time_string)</span><br><span class=\"line\">    print(utc_timestamp)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 把转换后的UTC时间戳转换成日期字符串</span><br><span class=\"line\">    # 看看误差，秒数也一样，一般不影响</span><br><span class=\"line\">    after_conver = u2s(utc_timestamp)</span><br><span class=\"line\">    print(after_conver)</span><br></pre></td></tr></table></figure>\n<h3 id=\"结果输出\"><a href=\"#结果输出\" class=\"headerlink\" title=\"结果输出\"></a>结果输出</h3><p>两个时间戳的误差在零点毫秒级，前后的日期格式字符串一样，一般的业务可以接受这样的误差。<strong>有更精准的方法，下面评论告诉我吧。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1542112115.95</span><br><span class=\"line\">2018-11-13 12:28:35</span><br><span class=\"line\">1542112115.0</span><br><span class=\"line\">2018-11-13 12:28:35</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python全面学习资料\"><a href=\"#Python全面学习资料\" class=\"headerlink\" title=\"Python全面学习资料\"></a>Python全面学习资料</h3><p>公众号“Python孙行者”后台回复“电子书“即可<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/1ndlcPm7Ab4p0zUxJ9N2icqVOPm4KaibT1XzumWCK636mibdwmUZFMEMNNiaYnxYlZCibdeKdiaCRIpCmicEiadNticPgtQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>Python实现互转：时间戳和字符串<br>","more":"<br>后台开发经常需要对时间进行记录和返回时间戳给前端。<br>为了通用性，我们一般都会存储UTC的时间戳。<br>但是，一般对数据库进行时间戳字段的插入，往往是以<strong>格式化的时间字符串进行插入</strong>的，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into table_name(user_id, login_time) values (&quot;RidingRoad&quot;, &quot;2018-11-13 12:19:39&quot;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h3><p>假如前端传来了用户的某个UTC时间戳，后台需要录入数据库，当前端请求时候，返回这个UTC时间戳。</p>\n<h3 id=\"业务分析\"><a href=\"#业务分析\" class=\"headerlink\" title=\"业务分析\"></a>业务分析</h3><p>这个UTC时间戳的状态变化：</p>\n<ol>\n<li>前端传过来的：double型的时间戳</li>\n<li>插入数据库时：格式化的时间字符串</li>\n<li>返回给前端的：double型的时间戳<br>所以我们需要一个对<strong>时间和格式化的时间字符串进行转换</strong>的函数<h3 id=\"转换实现\"><a href=\"#转换实现\" class=\"headerlink\" title=\"转换实现\"></a>转换实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"># UTC 转换为 格式化的时间字符串</span><br><span class=\"line\">def u2s(utc_timestamp):</span><br><span class=\"line\">    return time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.gmtime(utc_timestamp))</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式化的时间字符串 转换为 UTC</span><br><span class=\"line\">def s2u(utc_time_string):</span><br><span class=\"line\">    return time.mktime(time.strptime(utc_time_string, &quot;%Y-%m-%d %H:%M:%S&quot;))\\</span><br><span class=\"line\">           - time.mktime(time.gmtime(0))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    # 取得当前的UTC时间戳</span><br><span class=\"line\">    timestamp = time.time()</span><br><span class=\"line\">    print(timestamp)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 把UTC时间戳转换为日期格式字符串</span><br><span class=\"line\">    utc_time_string = u2s(timestamp)</span><br><span class=\"line\">    print(utc_time_string)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 把日期字符串转换回UTC时间戳</span><br><span class=\"line\">    utc_timestamp = s2u(utc_time_string)</span><br><span class=\"line\">    print(utc_timestamp)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 把转换后的UTC时间戳转换成日期字符串</span><br><span class=\"line\">    # 看看误差，秒数也一样，一般不影响</span><br><span class=\"line\">    after_conver = u2s(utc_timestamp)</span><br><span class=\"line\">    print(after_conver)</span><br></pre></td></tr></table></figure>\n<h3 id=\"结果输出\"><a href=\"#结果输出\" class=\"headerlink\" title=\"结果输出\"></a>结果输出</h3><p>两个时间戳的误差在零点毫秒级，前后的日期格式字符串一样，一般的业务可以接受这样的误差。<strong>有更精准的方法，下面评论告诉我吧。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1542112115.95</span><br><span class=\"line\">2018-11-13 12:28:35</span><br><span class=\"line\">1542112115.0</span><br><span class=\"line\">2018-11-13 12:28:35</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python全面学习资料\"><a href=\"#Python全面学习资料\" class=\"headerlink\" title=\"Python全面学习资料\"></a>Python全面学习资料</h3><p>公众号“Python孙行者”后台回复“电子书“即可<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/1ndlcPm7Ab4p0zUxJ9N2icqVOPm4KaibT1XzumWCK636mibdwmUZFMEMNNiaYnxYlZCibdeKdiaCRIpCmicEiadNticPgtQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"\"></p>"},{"title":"Python自动化Markdown无序列表","comments":1,"date":"2018-07-24T00:44:27.000Z","toc":true,"_content":"\n## Python自动化Markdown无序列表\n<!--more-->\n#### 应用场景\n假如我们在编辑Markdown格式的文档，需要显示一个很大的列表，但目前只有每行的文本，那么需要在每一行的前面添加“* ” ，这样在Markdown的文档就可以形成无序列表了。\n\nMarkdown语法\n```python\n* 哈哈\n* 哈哈\n```\n效果：\n* 哈哈\n* 哈哈\n#### 例如有朱自清的246行《毁灭》长诗需要以无序列表的形式显示\n如果要手工在每一行前添加“* ”，那么多么的累啊，我们要自动化\n#### 那么就演示这个小程序的使用过程吧，看视频\n#### 操作步骤\n1. 选中246行长诗，右击复制\n2. 运行本程序\n3. 在你需要插入的地方右击粘贴，Bingo\n\n#### 我们看看Python的pyperclip模块是怎样实现的\npyperclip模块不是内置模块需要自己安装\n**pip3 install pyperclip**\n1. pyperclip.paste()\n从电脑剪贴板中获取复制的内容\n2. pyperclip.copy(text)\n把text内容放到电脑的剪贴板，那么粘贴时的数据就变成text的内容了\n#### 那么，我们来实现一下自动化在每行前面添加“* ”\n```python\n#！/usr/bin/env python3\n# coding=utf-8\n__author__ = \"RidingRoad\"\n\nimport pyperclip\n\ndef main():\n    \"\"\"运行前把需要形成无序列表的数据选中右击复制\n       运行后右击粘贴即可生成Mark down格式无序列表\n    \"\"\"\n    # 获取剪贴板的数据\n    text = pyperclip.paste()\n    # 对长字符串根据\"\\n\"进行分割到一个列表\n    text_split = text.split('\\n')\n    # 在每一行前添加\"* \"(*号和一个空格)\n    for i in range(len(text_split)):\n        text_split[i] = \"* \" + text_split[i]\n    # 合并\n    text = \"\\n\".join(text_split)\n    # 把处理后的数据放回剪贴板\n    pyperclip.copy(text)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n\n#### 运行后剪贴板内容：\n```python\n* 踯躅在半路里，\n* 垂头丧气的，\n* 是我，是我！\n* 五光吧，\n* 十色吧，\n* 罗列在咫尺之间：\n* 这好看的呀！\n* 那好听的呀！\n* 闻着的是浓浓的香，\n* 尝着的是腻腻的味；\n* 况手所触的，\n* 身所依的，\n* 都是滑泽的，\n* 都是松软的！\n* 靡靡然！\n* 怎奈何这靡靡然？\n...............\n```\n#### 运行后Markdown效果\n* 踯躅在半路里，\n* 垂头丧气的，\n* 是我，是我！\n* 五光吧，\n* 十色吧，\n* 罗列在咫尺之间：\n* 这好看的呀！\n* 那好听的呀！\n* 闻着的是浓浓的香，\n* 尝着的是腻腻的味；\n* 况手所触的，\n* 身所依的，\n* 都是滑泽的，\n* 都是松软的！\n* 靡靡然！\n* 怎奈何这靡靡然？——\n。。。。。。。。。\n#### 好了，到这里，已经自动化解决了\n我的个性签名:Focusing on the Python and firmly convincing that nothing can replace hard work.\n需要完整的代码关注我的公众号Python孙行者,聊天界面回复\"自动化无序列表\",即可获取.\n","source":"_posts/Python自动化Markdown无序列表.md","raw":"---\ntitle: Python自动化Markdown无序列表\ncomments: true\ndate: 2018-07-24 08:44:27\ntoc: true\ncategories:\n- Python\n- Fun\ntags:\n- 无序列表\n- Markdown\n---\n\n## Python自动化Markdown无序列表\n<!--more-->\n#### 应用场景\n假如我们在编辑Markdown格式的文档，需要显示一个很大的列表，但目前只有每行的文本，那么需要在每一行的前面添加“* ” ，这样在Markdown的文档就可以形成无序列表了。\n\nMarkdown语法\n```python\n* 哈哈\n* 哈哈\n```\n效果：\n* 哈哈\n* 哈哈\n#### 例如有朱自清的246行《毁灭》长诗需要以无序列表的形式显示\n如果要手工在每一行前添加“* ”，那么多么的累啊，我们要自动化\n#### 那么就演示这个小程序的使用过程吧，看视频\n#### 操作步骤\n1. 选中246行长诗，右击复制\n2. 运行本程序\n3. 在你需要插入的地方右击粘贴，Bingo\n\n#### 我们看看Python的pyperclip模块是怎样实现的\npyperclip模块不是内置模块需要自己安装\n**pip3 install pyperclip**\n1. pyperclip.paste()\n从电脑剪贴板中获取复制的内容\n2. pyperclip.copy(text)\n把text内容放到电脑的剪贴板，那么粘贴时的数据就变成text的内容了\n#### 那么，我们来实现一下自动化在每行前面添加“* ”\n```python\n#！/usr/bin/env python3\n# coding=utf-8\n__author__ = \"RidingRoad\"\n\nimport pyperclip\n\ndef main():\n    \"\"\"运行前把需要形成无序列表的数据选中右击复制\n       运行后右击粘贴即可生成Mark down格式无序列表\n    \"\"\"\n    # 获取剪贴板的数据\n    text = pyperclip.paste()\n    # 对长字符串根据\"\\n\"进行分割到一个列表\n    text_split = text.split('\\n')\n    # 在每一行前添加\"* \"(*号和一个空格)\n    for i in range(len(text_split)):\n        text_split[i] = \"* \" + text_split[i]\n    # 合并\n    text = \"\\n\".join(text_split)\n    # 把处理后的数据放回剪贴板\n    pyperclip.copy(text)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n\n#### 运行后剪贴板内容：\n```python\n* 踯躅在半路里，\n* 垂头丧气的，\n* 是我，是我！\n* 五光吧，\n* 十色吧，\n* 罗列在咫尺之间：\n* 这好看的呀！\n* 那好听的呀！\n* 闻着的是浓浓的香，\n* 尝着的是腻腻的味；\n* 况手所触的，\n* 身所依的，\n* 都是滑泽的，\n* 都是松软的！\n* 靡靡然！\n* 怎奈何这靡靡然？\n...............\n```\n#### 运行后Markdown效果\n* 踯躅在半路里，\n* 垂头丧气的，\n* 是我，是我！\n* 五光吧，\n* 十色吧，\n* 罗列在咫尺之间：\n* 这好看的呀！\n* 那好听的呀！\n* 闻着的是浓浓的香，\n* 尝着的是腻腻的味；\n* 况手所触的，\n* 身所依的，\n* 都是滑泽的，\n* 都是松软的！\n* 靡靡然！\n* 怎奈何这靡靡然？——\n。。。。。。。。。\n#### 好了，到这里，已经自动化解决了\n我的个性签名:Focusing on the Python and firmly convincing that nothing can replace hard work.\n需要完整的代码关注我的公众号Python孙行者,聊天界面回复\"自动化无序列表\",即可获取.\n","slug":"Python自动化Markdown无序列表","published":1,"updated":"2019-05-25T09:32:43.103Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtdf001oe5vxf4ydwu2b","content":"<h2 id=\"Python自动化Markdown无序列表\"><a href=\"#Python自动化Markdown无序列表\" class=\"headerlink\" title=\"Python自动化Markdown无序列表\"></a>Python自动化Markdown无序列表</h2><a id=\"more\"></a>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>假如我们在编辑Markdown格式的文档，需要显示一个很大的列表，但目前只有每行的文本，那么需要在每一行的前面添加“* ” ，这样在Markdown的文档就可以形成无序列表了。</p>\n<p>Markdown语法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 哈哈</span><br><span class=\"line\">* 哈哈</span><br></pre></td></tr></table></figure></p>\n<p>效果：</p>\n<ul>\n<li>哈哈</li>\n<li>哈哈<h4 id=\"例如有朱自清的246行《毁灭》长诗需要以无序列表的形式显示\"><a href=\"#例如有朱自清的246行《毁灭》长诗需要以无序列表的形式显示\" class=\"headerlink\" title=\"例如有朱自清的246行《毁灭》长诗需要以无序列表的形式显示\"></a>例如有朱自清的246行《毁灭》长诗需要以无序列表的形式显示</h4>如果要手工在每一行前添加“* ”，那么多么的累啊，我们要自动化<h4 id=\"那么就演示这个小程序的使用过程吧，看视频\"><a href=\"#那么就演示这个小程序的使用过程吧，看视频\" class=\"headerlink\" title=\"那么就演示这个小程序的使用过程吧，看视频\"></a>那么就演示这个小程序的使用过程吧，看视频</h4><h4 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4></li>\n</ul>\n<ol>\n<li>选中246行长诗，右击复制</li>\n<li>运行本程序</li>\n<li>在你需要插入的地方右击粘贴，Bingo</li>\n</ol>\n<h4 id=\"我们看看Python的pyperclip模块是怎样实现的\"><a href=\"#我们看看Python的pyperclip模块是怎样实现的\" class=\"headerlink\" title=\"我们看看Python的pyperclip模块是怎样实现的\"></a>我们看看Python的pyperclip模块是怎样实现的</h4><p>pyperclip模块不是内置模块需要自己安装<br><strong>pip3 install pyperclip</strong></p>\n<ol>\n<li>pyperclip.paste()<br>从电脑剪贴板中获取复制的内容</li>\n<li>pyperclip.copy(text)<br>把text内容放到电脑的剪贴板，那么粘贴时的数据就变成text的内容了<h4 id=\"那么，我们来实现一下自动化在每行前面添加“-”\"><a href=\"#那么，我们来实现一下自动化在每行前面添加“-”\" class=\"headerlink\" title=\"那么，我们来实现一下自动化在每行前面添加“* ”\"></a>那么，我们来实现一下自动化在每行前面添加“* ”</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#！/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\">__author__ = <span class=\"string\">\"RidingRoad\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pyperclip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"运行前把需要形成无序列表的数据选中右击复制</span></span><br><span class=\"line\"><span class=\"string\">       运行后右击粘贴即可生成Mark down格式无序列表</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取剪贴板的数据</span></span><br><span class=\"line\">    text = pyperclip.paste()</span><br><span class=\"line\">    <span class=\"comment\"># 对长字符串根据\"\\n\"进行分割到一个列表</span></span><br><span class=\"line\">    text_split = text.split(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 在每一行前添加\"* \"(*号和一个空格)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(text_split)):</span><br><span class=\"line\">        text_split[i] = <span class=\"string\">\"* \"</span> + text_split[i]</span><br><span class=\"line\">    <span class=\"comment\"># 合并</span></span><br><span class=\"line\">    text = <span class=\"string\">\"\\n\"</span>.join(text_split)</span><br><span class=\"line\">    <span class=\"comment\"># 把处理后的数据放回剪贴板</span></span><br><span class=\"line\">    pyperclip.copy(text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"运行后剪贴板内容：\"><a href=\"#运行后剪贴板内容：\" class=\"headerlink\" title=\"运行后剪贴板内容：\"></a>运行后剪贴板内容：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 踯躅在半路里，</span><br><span class=\"line\">* 垂头丧气的，</span><br><span class=\"line\">* 是我，是我！</span><br><span class=\"line\">* 五光吧，</span><br><span class=\"line\">* 十色吧，</span><br><span class=\"line\">* 罗列在咫尺之间：</span><br><span class=\"line\">* 这好看的呀！</span><br><span class=\"line\">* 那好听的呀！</span><br><span class=\"line\">* 闻着的是浓浓的香，</span><br><span class=\"line\">* 尝着的是腻腻的味；</span><br><span class=\"line\">* 况手所触的，</span><br><span class=\"line\">* 身所依的，</span><br><span class=\"line\">* 都是滑泽的，</span><br><span class=\"line\">* 都是松软的！</span><br><span class=\"line\">* 靡靡然！</span><br><span class=\"line\">* 怎奈何这靡靡然？</span><br><span class=\"line\">...............</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行后Markdown效果\"><a href=\"#运行后Markdown效果\" class=\"headerlink\" title=\"运行后Markdown效果\"></a>运行后Markdown效果</h4><ul>\n<li>踯躅在半路里，</li>\n<li>垂头丧气的，</li>\n<li>是我，是我！</li>\n<li>五光吧，</li>\n<li>十色吧，</li>\n<li>罗列在咫尺之间：</li>\n<li>这好看的呀！</li>\n<li>那好听的呀！</li>\n<li>闻着的是浓浓的香，</li>\n<li>尝着的是腻腻的味；</li>\n<li>况手所触的，</li>\n<li>身所依的，</li>\n<li>都是滑泽的，</li>\n<li>都是松软的！</li>\n<li>靡靡然！</li>\n<li>怎奈何这靡靡然？——<br>。。。。。。。。。<h4 id=\"好了，到这里，已经自动化解决了\"><a href=\"#好了，到这里，已经自动化解决了\" class=\"headerlink\" title=\"好了，到这里，已经自动化解决了\"></a>好了，到这里，已经自动化解决了</h4>我的个性签名:Focusing on the Python and firmly convincing that nothing can replace hard work.<br>需要完整的代码关注我的公众号Python孙行者,聊天界面回复”自动化无序列表”,即可获取.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Python自动化Markdown无序列表\"><a href=\"#Python自动化Markdown无序列表\" class=\"headerlink\" title=\"Python自动化Markdown无序列表\"></a>Python自动化Markdown无序列表</h2>","more":"<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>假如我们在编辑Markdown格式的文档，需要显示一个很大的列表，但目前只有每行的文本，那么需要在每一行的前面添加“* ” ，这样在Markdown的文档就可以形成无序列表了。</p>\n<p>Markdown语法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 哈哈</span><br><span class=\"line\">* 哈哈</span><br></pre></td></tr></table></figure></p>\n<p>效果：</p>\n<ul>\n<li>哈哈</li>\n<li>哈哈<h4 id=\"例如有朱自清的246行《毁灭》长诗需要以无序列表的形式显示\"><a href=\"#例如有朱自清的246行《毁灭》长诗需要以无序列表的形式显示\" class=\"headerlink\" title=\"例如有朱自清的246行《毁灭》长诗需要以无序列表的形式显示\"></a>例如有朱自清的246行《毁灭》长诗需要以无序列表的形式显示</h4>如果要手工在每一行前添加“* ”，那么多么的累啊，我们要自动化<h4 id=\"那么就演示这个小程序的使用过程吧，看视频\"><a href=\"#那么就演示这个小程序的使用过程吧，看视频\" class=\"headerlink\" title=\"那么就演示这个小程序的使用过程吧，看视频\"></a>那么就演示这个小程序的使用过程吧，看视频</h4><h4 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4></li>\n</ul>\n<ol>\n<li>选中246行长诗，右击复制</li>\n<li>运行本程序</li>\n<li>在你需要插入的地方右击粘贴，Bingo</li>\n</ol>\n<h4 id=\"我们看看Python的pyperclip模块是怎样实现的\"><a href=\"#我们看看Python的pyperclip模块是怎样实现的\" class=\"headerlink\" title=\"我们看看Python的pyperclip模块是怎样实现的\"></a>我们看看Python的pyperclip模块是怎样实现的</h4><p>pyperclip模块不是内置模块需要自己安装<br><strong>pip3 install pyperclip</strong></p>\n<ol>\n<li>pyperclip.paste()<br>从电脑剪贴板中获取复制的内容</li>\n<li>pyperclip.copy(text)<br>把text内容放到电脑的剪贴板，那么粘贴时的数据就变成text的内容了<h4 id=\"那么，我们来实现一下自动化在每行前面添加“-”\"><a href=\"#那么，我们来实现一下自动化在每行前面添加“-”\" class=\"headerlink\" title=\"那么，我们来实现一下自动化在每行前面添加“* ”\"></a>那么，我们来实现一下自动化在每行前面添加“* ”</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#！/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\">__author__ = <span class=\"string\">\"RidingRoad\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pyperclip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"运行前把需要形成无序列表的数据选中右击复制</span></span><br><span class=\"line\"><span class=\"string\">       运行后右击粘贴即可生成Mark down格式无序列表</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取剪贴板的数据</span></span><br><span class=\"line\">    text = pyperclip.paste()</span><br><span class=\"line\">    <span class=\"comment\"># 对长字符串根据\"\\n\"进行分割到一个列表</span></span><br><span class=\"line\">    text_split = text.split(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 在每一行前添加\"* \"(*号和一个空格)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(text_split)):</span><br><span class=\"line\">        text_split[i] = <span class=\"string\">\"* \"</span> + text_split[i]</span><br><span class=\"line\">    <span class=\"comment\"># 合并</span></span><br><span class=\"line\">    text = <span class=\"string\">\"\\n\"</span>.join(text_split)</span><br><span class=\"line\">    <span class=\"comment\"># 把处理后的数据放回剪贴板</span></span><br><span class=\"line\">    pyperclip.copy(text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"运行后剪贴板内容：\"><a href=\"#运行后剪贴板内容：\" class=\"headerlink\" title=\"运行后剪贴板内容：\"></a>运行后剪贴板内容：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 踯躅在半路里，</span><br><span class=\"line\">* 垂头丧气的，</span><br><span class=\"line\">* 是我，是我！</span><br><span class=\"line\">* 五光吧，</span><br><span class=\"line\">* 十色吧，</span><br><span class=\"line\">* 罗列在咫尺之间：</span><br><span class=\"line\">* 这好看的呀！</span><br><span class=\"line\">* 那好听的呀！</span><br><span class=\"line\">* 闻着的是浓浓的香，</span><br><span class=\"line\">* 尝着的是腻腻的味；</span><br><span class=\"line\">* 况手所触的，</span><br><span class=\"line\">* 身所依的，</span><br><span class=\"line\">* 都是滑泽的，</span><br><span class=\"line\">* 都是松软的！</span><br><span class=\"line\">* 靡靡然！</span><br><span class=\"line\">* 怎奈何这靡靡然？</span><br><span class=\"line\">...............</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行后Markdown效果\"><a href=\"#运行后Markdown效果\" class=\"headerlink\" title=\"运行后Markdown效果\"></a>运行后Markdown效果</h4><ul>\n<li>踯躅在半路里，</li>\n<li>垂头丧气的，</li>\n<li>是我，是我！</li>\n<li>五光吧，</li>\n<li>十色吧，</li>\n<li>罗列在咫尺之间：</li>\n<li>这好看的呀！</li>\n<li>那好听的呀！</li>\n<li>闻着的是浓浓的香，</li>\n<li>尝着的是腻腻的味；</li>\n<li>况手所触的，</li>\n<li>身所依的，</li>\n<li>都是滑泽的，</li>\n<li>都是松软的！</li>\n<li>靡靡然！</li>\n<li>怎奈何这靡靡然？——<br>。。。。。。。。。<h4 id=\"好了，到这里，已经自动化解决了\"><a href=\"#好了，到这里，已经自动化解决了\" class=\"headerlink\" title=\"好了，到这里，已经自动化解决了\"></a>好了，到这里，已经自动化解决了</h4>我的个性签名:Focusing on the Python and firmly convincing that nothing can replace hard work.<br>需要完整的代码关注我的公众号Python孙行者,聊天界面回复”自动化无序列表”,即可获取.</li>\n</ul>"},{"title":"Redis数据持久化的方式","comments":1,"date":"2018-08-16T10:17:33.000Z","toc":true,"_content":"Redis 提供了三种数据持久化的方式将数据存储在磁盘中，一种叫快照（RDB），另一种叫只追加文件（AOF），还有一种是RDB-AOF混合持久化。<!--more-->\n### 快照RDB\nRedis通过创建快照的方式获取某一时刻Redis中所有数据的副本。\n#### 手动设置Redis快照名及路径：\nredis.conf\n```\n# RDB文件名 \ndbfilename \"dump.rdb\" \n# RDB文件和AOF文件路径 \ndir \"/usr/local/var/db/redis\"\n```\n#### Redis快照RDB创建\n1. 客户端直接通过命令BGSAVE(background save 推荐)或者SAVE来创建一个快照。BGSAVE不影响主进程的工作。\n2. 在redis.conf中设置save配置选项（应用开发中比较常用）\n```\n# 当在规定的时间内，Redis发生了写操作的个数满足条件，会触发发生BGSAVE命令。 \n# save <seconds> <changes> \n# 当用户设置了多个save的选项配置，只要其中任一条满足，Redis都会触发一次BGSAVE操作，比如：900秒之内至少一次写操作、300秒之内至少发生10次写操作、60秒之内发生至少10000次写操作都会触发发生快照操作 \nsave 900 1 \nsave 300 10 \nsave 60 10000\n```\n3. 当Redis通过shutdown命令关闭服务器请求时，会执行SAVE命令创建一个快照，如果使用kill -9 PID将不会创建快照\n4. 主从同步时\n### 只追加文件（AOF）\n在执行写命令时，AOF(appendonly)持久化会将执行的写命令也写到AOF文件的末尾，以此来记录数据的变化。换句话说，将AOF文件中包含的内容重新执行一遍，就可以回复AOF文件所记录的数据集。\n```\n# redis默认关闭AOF机制，可以将no改成yes实现AOF持久化 \nappendonly no \n# AOF文件 \nappendfilename \"appendonly.aof\" \n# AOF持久化同步频率，always表示每个Redis写命令都要同步fsync写入到磁盘中，但是这种方式会严重降低redis的速度；everysec表示每秒执行一次同步fsync，显示的将多个写命令同步到磁盘中；no表示让操作系统来决定应该何时进行同步fsync，Linux系统往往可能30秒才会执行一次\n# appendfsync always \nappendfsync everysec \n# appendfsync no \n# 在日志进行BGREWRITEAOF时，如果设置为yes表示新写操作不进行同步fsync，只是暂存在缓冲区里，避免造成磁盘IO操作冲突，等重写完成后在写入。redis中默认为no \nno-appendfsync-on-rewrite no \n# 当前AOF文件大小是上次日志重写时的AOF文件大小两倍时，发生BGREWRITEAOF操作。 auto-aof-rewrite-percentage 100#当前AOF文件执行BGREWRITEAOF命令的最小值，避免刚开始启动Reids时由于文件尺寸较小导致频繁的BGREWRITEAOF。 \nauto-aof-rewrite-min-size 64mb \n# Redis再恢复时，忽略最后一条可能存在问题的指令(因为最后一条指令可能存在问题，比如写一半时突然断电了) aof-load-truncated yes \n```\n### RDB-AOF混合持久化\n#Redis4.0新增RDB-AOF混合持久化格式，在开启了这个功能之后，AOF重写产生的文件将同时包含RDB格式的内容和AOF格式的内容，其中RDB格式的内容用于记录已有的数据，而AOF格式的内存则用于记录最近发生了变化的数据，这样Redis就可以同时兼有RDB持久化和AOF持久化的优点（既能够快速地生成重写文件，也能够在出现问题时，快速地载入数据）。\naof-use-rdb-preamble no\n\n","source":"_posts/Redis数据持久化的方式.md","raw":"---\ntitle: Redis数据持久化的方式\ncomments: true\ndate: 2018-08-16 18:17:33\ntoc: true\ntags:\n- 持久化\ncategories: \n- Rdis\n---\nRedis 提供了三种数据持久化的方式将数据存储在磁盘中，一种叫快照（RDB），另一种叫只追加文件（AOF），还有一种是RDB-AOF混合持久化。<!--more-->\n### 快照RDB\nRedis通过创建快照的方式获取某一时刻Redis中所有数据的副本。\n#### 手动设置Redis快照名及路径：\nredis.conf\n```\n# RDB文件名 \ndbfilename \"dump.rdb\" \n# RDB文件和AOF文件路径 \ndir \"/usr/local/var/db/redis\"\n```\n#### Redis快照RDB创建\n1. 客户端直接通过命令BGSAVE(background save 推荐)或者SAVE来创建一个快照。BGSAVE不影响主进程的工作。\n2. 在redis.conf中设置save配置选项（应用开发中比较常用）\n```\n# 当在规定的时间内，Redis发生了写操作的个数满足条件，会触发发生BGSAVE命令。 \n# save <seconds> <changes> \n# 当用户设置了多个save的选项配置，只要其中任一条满足，Redis都会触发一次BGSAVE操作，比如：900秒之内至少一次写操作、300秒之内至少发生10次写操作、60秒之内发生至少10000次写操作都会触发发生快照操作 \nsave 900 1 \nsave 300 10 \nsave 60 10000\n```\n3. 当Redis通过shutdown命令关闭服务器请求时，会执行SAVE命令创建一个快照，如果使用kill -9 PID将不会创建快照\n4. 主从同步时\n### 只追加文件（AOF）\n在执行写命令时，AOF(appendonly)持久化会将执行的写命令也写到AOF文件的末尾，以此来记录数据的变化。换句话说，将AOF文件中包含的内容重新执行一遍，就可以回复AOF文件所记录的数据集。\n```\n# redis默认关闭AOF机制，可以将no改成yes实现AOF持久化 \nappendonly no \n# AOF文件 \nappendfilename \"appendonly.aof\" \n# AOF持久化同步频率，always表示每个Redis写命令都要同步fsync写入到磁盘中，但是这种方式会严重降低redis的速度；everysec表示每秒执行一次同步fsync，显示的将多个写命令同步到磁盘中；no表示让操作系统来决定应该何时进行同步fsync，Linux系统往往可能30秒才会执行一次\n# appendfsync always \nappendfsync everysec \n# appendfsync no \n# 在日志进行BGREWRITEAOF时，如果设置为yes表示新写操作不进行同步fsync，只是暂存在缓冲区里，避免造成磁盘IO操作冲突，等重写完成后在写入。redis中默认为no \nno-appendfsync-on-rewrite no \n# 当前AOF文件大小是上次日志重写时的AOF文件大小两倍时，发生BGREWRITEAOF操作。 auto-aof-rewrite-percentage 100#当前AOF文件执行BGREWRITEAOF命令的最小值，避免刚开始启动Reids时由于文件尺寸较小导致频繁的BGREWRITEAOF。 \nauto-aof-rewrite-min-size 64mb \n# Redis再恢复时，忽略最后一条可能存在问题的指令(因为最后一条指令可能存在问题，比如写一半时突然断电了) aof-load-truncated yes \n```\n### RDB-AOF混合持久化\n#Redis4.0新增RDB-AOF混合持久化格式，在开启了这个功能之后，AOF重写产生的文件将同时包含RDB格式的内容和AOF格式的内容，其中RDB格式的内容用于记录已有的数据，而AOF格式的内存则用于记录最近发生了变化的数据，这样Redis就可以同时兼有RDB持久化和AOF持久化的优点（既能够快速地生成重写文件，也能够在出现问题时，快速地载入数据）。\naof-use-rdb-preamble no\n\n","slug":"Redis数据持久化的方式","published":1,"updated":"2019-05-25T09:32:43.103Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtdh001se5vxgvc2ungt","content":"<p>Redis 提供了三种数据持久化的方式将数据存储在磁盘中，一种叫快照（RDB），另一种叫只追加文件（AOF），还有一种是RDB-AOF混合持久化。<a id=\"more\"></a></p>\n<h3 id=\"快照RDB\"><a href=\"#快照RDB\" class=\"headerlink\" title=\"快照RDB\"></a>快照RDB</h3><p>Redis通过创建快照的方式获取某一时刻Redis中所有数据的副本。</p>\n<h4 id=\"手动设置Redis快照名及路径：\"><a href=\"#手动设置Redis快照名及路径：\" class=\"headerlink\" title=\"手动设置Redis快照名及路径：\"></a>手动设置Redis快照名及路径：</h4><p>redis.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># RDB文件名 </span><br><span class=\"line\">dbfilename &quot;dump.rdb&quot; </span><br><span class=\"line\"># RDB文件和AOF文件路径 </span><br><span class=\"line\">dir &quot;/usr/local/var/db/redis&quot;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Redis快照RDB创建\"><a href=\"#Redis快照RDB创建\" class=\"headerlink\" title=\"Redis快照RDB创建\"></a>Redis快照RDB创建</h4><ol>\n<li>客户端直接通过命令BGSAVE(background save 推荐)或者SAVE来创建一个快照。BGSAVE不影响主进程的工作。</li>\n<li><p>在redis.conf中设置save配置选项（应用开发中比较常用）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 当在规定的时间内，Redis发生了写操作的个数满足条件，会触发发生BGSAVE命令。 </span><br><span class=\"line\"># save &lt;seconds&gt; &lt;changes&gt; </span><br><span class=\"line\"># 当用户设置了多个save的选项配置，只要其中任一条满足，Redis都会触发一次BGSAVE操作，比如：900秒之内至少一次写操作、300秒之内至少发生10次写操作、60秒之内发生至少10000次写操作都会触发发生快照操作 </span><br><span class=\"line\">save 900 1 </span><br><span class=\"line\">save 300 10 </span><br><span class=\"line\">save 60 10000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当Redis通过shutdown命令关闭服务器请求时，会执行SAVE命令创建一个快照，如果使用kill -9 PID将不会创建快照</p>\n</li>\n<li>主从同步时<h3 id=\"只追加文件（AOF）\"><a href=\"#只追加文件（AOF）\" class=\"headerlink\" title=\"只追加文件（AOF）\"></a>只追加文件（AOF）</h3>在执行写命令时，AOF(appendonly)持久化会将执行的写命令也写到AOF文件的末尾，以此来记录数据的变化。换句话说，将AOF文件中包含的内容重新执行一遍，就可以回复AOF文件所记录的数据集。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis默认关闭AOF机制，可以将no改成yes实现AOF持久化 </span><br><span class=\"line\">appendonly no </span><br><span class=\"line\"># AOF文件 </span><br><span class=\"line\">appendfilename &quot;appendonly.aof&quot; </span><br><span class=\"line\"># AOF持久化同步频率，always表示每个Redis写命令都要同步fsync写入到磁盘中，但是这种方式会严重降低redis的速度；everysec表示每秒执行一次同步fsync，显示的将多个写命令同步到磁盘中；no表示让操作系统来决定应该何时进行同步fsync，Linux系统往往可能30秒才会执行一次</span><br><span class=\"line\"># appendfsync always </span><br><span class=\"line\">appendfsync everysec </span><br><span class=\"line\"># appendfsync no </span><br><span class=\"line\"># 在日志进行BGREWRITEAOF时，如果设置为yes表示新写操作不进行同步fsync，只是暂存在缓冲区里，避免造成磁盘IO操作冲突，等重写完成后在写入。redis中默认为no </span><br><span class=\"line\">no-appendfsync-on-rewrite no </span><br><span class=\"line\"># 当前AOF文件大小是上次日志重写时的AOF文件大小两倍时，发生BGREWRITEAOF操作。 auto-aof-rewrite-percentage 100#当前AOF文件执行BGREWRITEAOF命令的最小值，避免刚开始启动Reids时由于文件尺寸较小导致频繁的BGREWRITEAOF。 </span><br><span class=\"line\">auto-aof-rewrite-min-size 64mb </span><br><span class=\"line\"># Redis再恢复时，忽略最后一条可能存在问题的指令(因为最后一条指令可能存在问题，比如写一半时突然断电了) aof-load-truncated yes</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"RDB-AOF混合持久化\"><a href=\"#RDB-AOF混合持久化\" class=\"headerlink\" title=\"RDB-AOF混合持久化\"></a>RDB-AOF混合持久化</h3><p>#Redis4.0新增RDB-AOF混合持久化格式，在开启了这个功能之后，AOF重写产生的文件将同时包含RDB格式的内容和AOF格式的内容，其中RDB格式的内容用于记录已有的数据，而AOF格式的内存则用于记录最近发生了变化的数据，这样Redis就可以同时兼有RDB持久化和AOF持久化的优点（既能够快速地生成重写文件，也能够在出现问题时，快速地载入数据）。<br>aof-use-rdb-preamble no</p>\n","site":{"data":{}},"excerpt":"<p>Redis 提供了三种数据持久化的方式将数据存储在磁盘中，一种叫快照（RDB），另一种叫只追加文件（AOF），还有一种是RDB-AOF混合持久化。","more":"</p>\n<h3 id=\"快照RDB\"><a href=\"#快照RDB\" class=\"headerlink\" title=\"快照RDB\"></a>快照RDB</h3><p>Redis通过创建快照的方式获取某一时刻Redis中所有数据的副本。</p>\n<h4 id=\"手动设置Redis快照名及路径：\"><a href=\"#手动设置Redis快照名及路径：\" class=\"headerlink\" title=\"手动设置Redis快照名及路径：\"></a>手动设置Redis快照名及路径：</h4><p>redis.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># RDB文件名 </span><br><span class=\"line\">dbfilename &quot;dump.rdb&quot; </span><br><span class=\"line\"># RDB文件和AOF文件路径 </span><br><span class=\"line\">dir &quot;/usr/local/var/db/redis&quot;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Redis快照RDB创建\"><a href=\"#Redis快照RDB创建\" class=\"headerlink\" title=\"Redis快照RDB创建\"></a>Redis快照RDB创建</h4><ol>\n<li>客户端直接通过命令BGSAVE(background save 推荐)或者SAVE来创建一个快照。BGSAVE不影响主进程的工作。</li>\n<li><p>在redis.conf中设置save配置选项（应用开发中比较常用）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 当在规定的时间内，Redis发生了写操作的个数满足条件，会触发发生BGSAVE命令。 </span><br><span class=\"line\"># save &lt;seconds&gt; &lt;changes&gt; </span><br><span class=\"line\"># 当用户设置了多个save的选项配置，只要其中任一条满足，Redis都会触发一次BGSAVE操作，比如：900秒之内至少一次写操作、300秒之内至少发生10次写操作、60秒之内发生至少10000次写操作都会触发发生快照操作 </span><br><span class=\"line\">save 900 1 </span><br><span class=\"line\">save 300 10 </span><br><span class=\"line\">save 60 10000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当Redis通过shutdown命令关闭服务器请求时，会执行SAVE命令创建一个快照，如果使用kill -9 PID将不会创建快照</p>\n</li>\n<li>主从同步时<h3 id=\"只追加文件（AOF）\"><a href=\"#只追加文件（AOF）\" class=\"headerlink\" title=\"只追加文件（AOF）\"></a>只追加文件（AOF）</h3>在执行写命令时，AOF(appendonly)持久化会将执行的写命令也写到AOF文件的末尾，以此来记录数据的变化。换句话说，将AOF文件中包含的内容重新执行一遍，就可以回复AOF文件所记录的数据集。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis默认关闭AOF机制，可以将no改成yes实现AOF持久化 </span><br><span class=\"line\">appendonly no </span><br><span class=\"line\"># AOF文件 </span><br><span class=\"line\">appendfilename &quot;appendonly.aof&quot; </span><br><span class=\"line\"># AOF持久化同步频率，always表示每个Redis写命令都要同步fsync写入到磁盘中，但是这种方式会严重降低redis的速度；everysec表示每秒执行一次同步fsync，显示的将多个写命令同步到磁盘中；no表示让操作系统来决定应该何时进行同步fsync，Linux系统往往可能30秒才会执行一次</span><br><span class=\"line\"># appendfsync always </span><br><span class=\"line\">appendfsync everysec </span><br><span class=\"line\"># appendfsync no </span><br><span class=\"line\"># 在日志进行BGREWRITEAOF时，如果设置为yes表示新写操作不进行同步fsync，只是暂存在缓冲区里，避免造成磁盘IO操作冲突，等重写完成后在写入。redis中默认为no </span><br><span class=\"line\">no-appendfsync-on-rewrite no </span><br><span class=\"line\"># 当前AOF文件大小是上次日志重写时的AOF文件大小两倍时，发生BGREWRITEAOF操作。 auto-aof-rewrite-percentage 100#当前AOF文件执行BGREWRITEAOF命令的最小值，避免刚开始启动Reids时由于文件尺寸较小导致频繁的BGREWRITEAOF。 </span><br><span class=\"line\">auto-aof-rewrite-min-size 64mb </span><br><span class=\"line\"># Redis再恢复时，忽略最后一条可能存在问题的指令(因为最后一条指令可能存在问题，比如写一半时突然断电了) aof-load-truncated yes</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"RDB-AOF混合持久化\"><a href=\"#RDB-AOF混合持久化\" class=\"headerlink\" title=\"RDB-AOF混合持久化\"></a>RDB-AOF混合持久化</h3><p>#Redis4.0新增RDB-AOF混合持久化格式，在开启了这个功能之后，AOF重写产生的文件将同时包含RDB格式的内容和AOF格式的内容，其中RDB格式的内容用于记录已有的数据，而AOF格式的内存则用于记录最近发生了变化的数据，这样Redis就可以同时兼有RDB持久化和AOF持久化的优点（既能够快速地生成重写文件，也能够在出现问题时，快速地载入数据）。<br>aof-use-rdb-preamble no</p>"},{"title":"Python后台开发ORM模型类自动生成神器","comments":1,"date":"2018-11-20T12:54:59.000Z","properties":["Python"],"_content":"今天介绍一个后台开发神器，很适合当我们数据库中已存在了这些表，然后你想得到它们的model类使用ORM技术进行CRUD操作(或者我根本就不知道怎么写modle类，但我会写create这个表的sql的时候)，手写100张表的model类？这是。。。。。。。。。\n是不可能的，这辈子都不可能的。\n因为我们有**sqlacodegen神器**，\n**一行命令获取数据库所有表的模型类**。\n<!--more-->\n### 应用场景\n1、后台开发中，需要经常对数据库进行CRUD操作；\n2、这个过程中，我们就经常借助ORM技术进行便利的CURD，比如成熟的SQLAlchemy；\n3、**但是，进行ORM操作前需要提供和table对应的模型类；**\n4、并且，很多历史table已经存在于数据库中；\n5、如果有**几百张table**呢？还自己一个个去写吗？\n6、我相信你心中会有个念头。。。\n### 福音\n还是那句话，Python大法好。\n这里就提供了一个根据已有数据库(表)结构生成对应SQLAlchemy模型类的神器：\n**sqlacodegen**\n> This is a tool that reads the structure of an existing database and generates the appropriate SQLAlchemy model code, using the declarative style if possible.\n\n安装方法：\n```\npip install sqlacodegen\n```\n### 快快使用\n使用方法也很简单，只需要在终端(命令行窗口)运行一行命令即可：\n常用数据库的使用方法：\n将会获取到整个数据库的model\n```\nsqlacodegen postgresql:///some_local_db\nsqlacodegen mysql+oursql://user:password@localhost/dbname\nsqlacodegen sqlite:///database.db\n```\n查看具体参数可以输入：\n```\nsqlacodegen --help\n```\n参数含义：\n```\noptional arguments:\n  -h, --help         show this help message and exit\n  --version          print the version number and exit\n  --schema SCHEMA    load tables from an alternate schema\n  --tables TABLES    tables to process (comma-separated, default: all)\n  --noviews          ignore views\n  --noindexes        ignore indexes\n  --noconstraints    ignore constraints\n  --nojoined         don't autodetect joined table inheritance\n  --noinflect        don't try to convert tables names to singular form\n  --noclasses        don't generate classes, only tables\n  --outfile OUTFILE  file to write output to (default: stdout)\n```\n目前我在postgresql的默认的postgres数据库中有个这样的表：\n```\ncreate table friends\n(\n  id   varchar(3) primary key ,\n  address  varchar(50) not null ,\n  name varchar(10) not null\n);\n\ncreate unique index name_address\non friends (name, address);\n```\n为了使用ORM进行操作，我需要获取它的modle类\n**但唯一索引的model类怎么写呢？**\n我们**借助sqlacodegen来自动生成**就好了\n```\nsqlacodegen postgresql://ridingroad:ridingroad@127.0.0.1:5432/postgres --outfile=models.py  --tables friends\n```\n### 模型类效果\n查看输出到models.py的内容\n```\n# coding: utf-8\nfrom sqlalchemy import Column, Index, String\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\nmetadata = Base.metadata\n\n\nclass Friend(Base):\n    __tablename__ = 'friends'\n    __table_args__ = (\n        Index('name_address', 'name', 'address', unique=True),\n    )\n\n    id = Column(String(3), primary_key=True)\n    address = Column(String(50), nullable=False)\n    name = Column(String(10), nullable=False)\n\n```\n如果你有很多表，就直接指定数据库呗(这是会生成整个数据库的ORM模型类哦),不具体到每张表就好了，\n后面就可以愉快的CRUD了，耶\n### 注意事项\nWhy does it sometimes generate classes and sometimes Tables?\n>Unless the --noclasses option is used, sqlacodegen tries to generate declarative model classes from each table. There are two circumstances in which a Table is generated instead:\n1、the table has no primary key constraint (which is required by SQLAlchemy for every model class)\n2、the table is an association table between two other tables\n\n当你的表的字段缺少primary key或这张表是有两个外键约束的时候，会生成table而不是模型类了。比如，我那张表是这样的结构：\n```\ncreate table friends\n(\n  id   varchar(3) ,\n  address  varchar(50) not null ,\n  name varchar(10) not null\n);\n\ncreate unique index name_address\n  on friends (name, address);\n```\n再执行同一个命令：\n```\nsqlacodegen postgresql://ridingroad:ridingroad@127.0.0.1:5432/postgres --outfile=models.py  --tables friends\n```\n获取到的是Table：\n```\n# coding: utf-8\nfrom sqlalchemy import Column, Index, MetaData, String, Table\n\nmetadata = MetaData()\n\n\nt_friends = Table(\n    'friends', metadata,\n    Column('id', String(3)),\n    Column('address', String(50), nullable=False),\n    Column('name', String(10), nullable=False),\n    Index('name_address', 'name', 'address', unique=True)\n)\n```\n其实和模型类差不多嘛，但是还是尽量带上primary key吧，免得手动修改成模型类\n### Python全面学习资料\n公众号\"Python孙行者\"后台回复”电子书“即可。如果你有什么好东西好神器，欢迎后台私信，以后总结随文分享，耶\n![](https://mmbiz.qpic.cn/mmbiz_png/1ndlcPm7Ab4p0zUxJ9N2icqVOPm4KaibT1XzumWCK636mibdwmUZFMEMNNiaYnxYlZCibdeKdiaCRIpCmicEiadNticPgtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n","source":"_posts/Python后台开发ORM模型类自动生成神器-md.md","raw":"---\ntitle: Python后台开发ORM模型类自动生成神器\ncomments: true\ndate: 2018-11-20 20:54:59\ntags:\n- 自动生成Model模型类\nproperties:\n- Python\n---\n今天介绍一个后台开发神器，很适合当我们数据库中已存在了这些表，然后你想得到它们的model类使用ORM技术进行CRUD操作(或者我根本就不知道怎么写modle类，但我会写create这个表的sql的时候)，手写100张表的model类？这是。。。。。。。。。\n是不可能的，这辈子都不可能的。\n因为我们有**sqlacodegen神器**，\n**一行命令获取数据库所有表的模型类**。\n<!--more-->\n### 应用场景\n1、后台开发中，需要经常对数据库进行CRUD操作；\n2、这个过程中，我们就经常借助ORM技术进行便利的CURD，比如成熟的SQLAlchemy；\n3、**但是，进行ORM操作前需要提供和table对应的模型类；**\n4、并且，很多历史table已经存在于数据库中；\n5、如果有**几百张table**呢？还自己一个个去写吗？\n6、我相信你心中会有个念头。。。\n### 福音\n还是那句话，Python大法好。\n这里就提供了一个根据已有数据库(表)结构生成对应SQLAlchemy模型类的神器：\n**sqlacodegen**\n> This is a tool that reads the structure of an existing database and generates the appropriate SQLAlchemy model code, using the declarative style if possible.\n\n安装方法：\n```\npip install sqlacodegen\n```\n### 快快使用\n使用方法也很简单，只需要在终端(命令行窗口)运行一行命令即可：\n常用数据库的使用方法：\n将会获取到整个数据库的model\n```\nsqlacodegen postgresql:///some_local_db\nsqlacodegen mysql+oursql://user:password@localhost/dbname\nsqlacodegen sqlite:///database.db\n```\n查看具体参数可以输入：\n```\nsqlacodegen --help\n```\n参数含义：\n```\noptional arguments:\n  -h, --help         show this help message and exit\n  --version          print the version number and exit\n  --schema SCHEMA    load tables from an alternate schema\n  --tables TABLES    tables to process (comma-separated, default: all)\n  --noviews          ignore views\n  --noindexes        ignore indexes\n  --noconstraints    ignore constraints\n  --nojoined         don't autodetect joined table inheritance\n  --noinflect        don't try to convert tables names to singular form\n  --noclasses        don't generate classes, only tables\n  --outfile OUTFILE  file to write output to (default: stdout)\n```\n目前我在postgresql的默认的postgres数据库中有个这样的表：\n```\ncreate table friends\n(\n  id   varchar(3) primary key ,\n  address  varchar(50) not null ,\n  name varchar(10) not null\n);\n\ncreate unique index name_address\non friends (name, address);\n```\n为了使用ORM进行操作，我需要获取它的modle类\n**但唯一索引的model类怎么写呢？**\n我们**借助sqlacodegen来自动生成**就好了\n```\nsqlacodegen postgresql://ridingroad:ridingroad@127.0.0.1:5432/postgres --outfile=models.py  --tables friends\n```\n### 模型类效果\n查看输出到models.py的内容\n```\n# coding: utf-8\nfrom sqlalchemy import Column, Index, String\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\nmetadata = Base.metadata\n\n\nclass Friend(Base):\n    __tablename__ = 'friends'\n    __table_args__ = (\n        Index('name_address', 'name', 'address', unique=True),\n    )\n\n    id = Column(String(3), primary_key=True)\n    address = Column(String(50), nullable=False)\n    name = Column(String(10), nullable=False)\n\n```\n如果你有很多表，就直接指定数据库呗(这是会生成整个数据库的ORM模型类哦),不具体到每张表就好了，\n后面就可以愉快的CRUD了，耶\n### 注意事项\nWhy does it sometimes generate classes and sometimes Tables?\n>Unless the --noclasses option is used, sqlacodegen tries to generate declarative model classes from each table. There are two circumstances in which a Table is generated instead:\n1、the table has no primary key constraint (which is required by SQLAlchemy for every model class)\n2、the table is an association table between two other tables\n\n当你的表的字段缺少primary key或这张表是有两个外键约束的时候，会生成table而不是模型类了。比如，我那张表是这样的结构：\n```\ncreate table friends\n(\n  id   varchar(3) ,\n  address  varchar(50) not null ,\n  name varchar(10) not null\n);\n\ncreate unique index name_address\n  on friends (name, address);\n```\n再执行同一个命令：\n```\nsqlacodegen postgresql://ridingroad:ridingroad@127.0.0.1:5432/postgres --outfile=models.py  --tables friends\n```\n获取到的是Table：\n```\n# coding: utf-8\nfrom sqlalchemy import Column, Index, MetaData, String, Table\n\nmetadata = MetaData()\n\n\nt_friends = Table(\n    'friends', metadata,\n    Column('id', String(3)),\n    Column('address', String(50), nullable=False),\n    Column('name', String(10), nullable=False),\n    Index('name_address', 'name', 'address', unique=True)\n)\n```\n其实和模型类差不多嘛，但是还是尽量带上primary key吧，免得手动修改成模型类\n### Python全面学习资料\n公众号\"Python孙行者\"后台回复”电子书“即可。如果你有什么好东西好神器，欢迎后台私信，以后总结随文分享，耶\n![](https://mmbiz.qpic.cn/mmbiz_png/1ndlcPm7Ab4p0zUxJ9N2icqVOPm4KaibT1XzumWCK636mibdwmUZFMEMNNiaYnxYlZCibdeKdiaCRIpCmicEiadNticPgtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n","slug":"Python后台开发ORM模型类自动生成神器-md","published":1,"updated":"2019-05-25T09:32:43.102Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtdi001ve5vx1pc8vxy2","content":"<p>今天介绍一个后台开发神器，很适合当我们数据库中已存在了这些表，然后你想得到它们的model类使用ORM技术进行CRUD操作(或者我根本就不知道怎么写modle类，但我会写create这个表的sql的时候)，手写100张表的model类？这是。。。。。。。。。<br>是不可能的，这辈子都不可能的。<br>因为我们有<strong>sqlacodegen神器</strong>，<br><strong>一行命令获取数据库所有表的模型类</strong>。<br><a id=\"more\"></a></p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>1、后台开发中，需要经常对数据库进行CRUD操作；<br>2、这个过程中，我们就经常借助ORM技术进行便利的CURD，比如成熟的SQLAlchemy；<br>3、<strong>但是，进行ORM操作前需要提供和table对应的模型类；</strong><br>4、并且，很多历史table已经存在于数据库中；<br>5、如果有<strong>几百张table</strong>呢？还自己一个个去写吗？<br>6、我相信你心中会有个念头。。。</p>\n<h3 id=\"福音\"><a href=\"#福音\" class=\"headerlink\" title=\"福音\"></a>福音</h3><p>还是那句话，Python大法好。<br>这里就提供了一个根据已有数据库(表)结构生成对应SQLAlchemy模型类的神器：<br><strong>sqlacodegen</strong></p>\n<blockquote>\n<p>This is a tool that reads the structure of an existing database and generates the appropriate SQLAlchemy model code, using the declarative style if possible.</p>\n</blockquote>\n<p>安装方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install sqlacodegen</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"快快使用\"><a href=\"#快快使用\" class=\"headerlink\" title=\"快快使用\"></a>快快使用</h3><p>使用方法也很简单，只需要在终端(命令行窗口)运行一行命令即可：<br>常用数据库的使用方法：<br>将会获取到整个数据库的model<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlacodegen postgresql:///some_local_db</span><br><span class=\"line\">sqlacodegen mysql+oursql://user:password@localhost/dbname</span><br><span class=\"line\">sqlacodegen sqlite:///database.db</span><br></pre></td></tr></table></figure></p>\n<p>查看具体参数可以输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlacodegen --help</span><br></pre></td></tr></table></figure></p>\n<p>参数含义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optional arguments:</span><br><span class=\"line\">  -h, --help         show this help message and exit</span><br><span class=\"line\">  --version          print the version number and exit</span><br><span class=\"line\">  --schema SCHEMA    load tables from an alternate schema</span><br><span class=\"line\">  --tables TABLES    tables to process (comma-separated, default: all)</span><br><span class=\"line\">  --noviews          ignore views</span><br><span class=\"line\">  --noindexes        ignore indexes</span><br><span class=\"line\">  --noconstraints    ignore constraints</span><br><span class=\"line\">  --nojoined         don&apos;t autodetect joined table inheritance</span><br><span class=\"line\">  --noinflect        don&apos;t try to convert tables names to singular form</span><br><span class=\"line\">  --noclasses        don&apos;t generate classes, only tables</span><br><span class=\"line\">  --outfile OUTFILE  file to write output to (default: stdout)</span><br></pre></td></tr></table></figure></p>\n<p>目前我在postgresql的默认的postgres数据库中有个这样的表：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table friends</span><br><span class=\"line\">(</span><br><span class=\"line\">  id   varchar(3) primary key ,</span><br><span class=\"line\">  address  varchar(50) not null ,</span><br><span class=\"line\">  name varchar(10) not null</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">create unique index name_address</span><br><span class=\"line\">on friends (name, address);</span><br></pre></td></tr></table></figure></p>\n<p>为了使用ORM进行操作，我需要获取它的modle类<br><strong>但唯一索引的model类怎么写呢？</strong><br>我们<strong>借助sqlacodegen来自动生成</strong>就好了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlacodegen postgresql://ridingroad:ridingroad@127.0.0.1:5432/postgres --outfile=models.py  --tables friends</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"模型类效果\"><a href=\"#模型类效果\" class=\"headerlink\" title=\"模型类效果\"></a>模型类效果</h3><p>查看输出到models.py的内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding: utf-8</span><br><span class=\"line\">from sqlalchemy import Column, Index, String</span><br><span class=\"line\">from sqlalchemy.ext.declarative import declarative_base</span><br><span class=\"line\"></span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\">metadata = Base.metadata</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Friend(Base):</span><br><span class=\"line\">    __tablename__ = &apos;friends&apos;</span><br><span class=\"line\">    __table_args__ = (</span><br><span class=\"line\">        Index(&apos;name_address&apos;, &apos;name&apos;, &apos;address&apos;, unique=True),</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    id = Column(String(3), primary_key=True)</span><br><span class=\"line\">    address = Column(String(50), nullable=False)</span><br><span class=\"line\">    name = Column(String(10), nullable=False)</span><br></pre></td></tr></table></figure></p>\n<p>如果你有很多表，就直接指定数据库呗(这是会生成整个数据库的ORM模型类哦),不具体到每张表就好了，<br>后面就可以愉快的CRUD了，耶</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>Why does it sometimes generate classes and sometimes Tables?</p>\n<blockquote>\n<p>Unless the –noclasses option is used, sqlacodegen tries to generate declarative model classes from each table. There are two circumstances in which a Table is generated instead:<br>1、the table has no primary key constraint (which is required by SQLAlchemy for every model class)<br>2、the table is an association table between two other tables</p>\n</blockquote>\n<p>当你的表的字段缺少primary key或这张表是有两个外键约束的时候，会生成table而不是模型类了。比如，我那张表是这样的结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table friends</span><br><span class=\"line\">(</span><br><span class=\"line\">  id   varchar(3) ,</span><br><span class=\"line\">  address  varchar(50) not null ,</span><br><span class=\"line\">  name varchar(10) not null</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">create unique index name_address</span><br><span class=\"line\">  on friends (name, address);</span><br></pre></td></tr></table></figure></p>\n<p>再执行同一个命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlacodegen postgresql://ridingroad:ridingroad@127.0.0.1:5432/postgres --outfile=models.py  --tables friends</span><br></pre></td></tr></table></figure></p>\n<p>获取到的是Table：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding: utf-8</span><br><span class=\"line\">from sqlalchemy import Column, Index, MetaData, String, Table</span><br><span class=\"line\"></span><br><span class=\"line\">metadata = MetaData()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">t_friends = Table(</span><br><span class=\"line\">    &apos;friends&apos;, metadata,</span><br><span class=\"line\">    Column(&apos;id&apos;, String(3)),</span><br><span class=\"line\">    Column(&apos;address&apos;, String(50), nullable=False),</span><br><span class=\"line\">    Column(&apos;name&apos;, String(10), nullable=False),</span><br><span class=\"line\">    Index(&apos;name_address&apos;, &apos;name&apos;, &apos;address&apos;, unique=True)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>其实和模型类差不多嘛，但是还是尽量带上primary key吧，免得手动修改成模型类</p>\n<h3 id=\"Python全面学习资料\"><a href=\"#Python全面学习资料\" class=\"headerlink\" title=\"Python全面学习资料\"></a>Python全面学习资料</h3><p>公众号”Python孙行者”后台回复”电子书“即可。如果你有什么好东西好神器，欢迎后台私信，以后总结随文分享，耶<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/1ndlcPm7Ab4p0zUxJ9N2icqVOPm4KaibT1XzumWCK636mibdwmUZFMEMNNiaYnxYlZCibdeKdiaCRIpCmicEiadNticPgtQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>今天介绍一个后台开发神器，很适合当我们数据库中已存在了这些表，然后你想得到它们的model类使用ORM技术进行CRUD操作(或者我根本就不知道怎么写modle类，但我会写create这个表的sql的时候)，手写100张表的model类？这是。。。。。。。。。<br>是不可能的，这辈子都不可能的。<br>因为我们有<strong>sqlacodegen神器</strong>，<br><strong>一行命令获取数据库所有表的模型类</strong>。<br>","more":"</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>1、后台开发中，需要经常对数据库进行CRUD操作；<br>2、这个过程中，我们就经常借助ORM技术进行便利的CURD，比如成熟的SQLAlchemy；<br>3、<strong>但是，进行ORM操作前需要提供和table对应的模型类；</strong><br>4、并且，很多历史table已经存在于数据库中；<br>5、如果有<strong>几百张table</strong>呢？还自己一个个去写吗？<br>6、我相信你心中会有个念头。。。</p>\n<h3 id=\"福音\"><a href=\"#福音\" class=\"headerlink\" title=\"福音\"></a>福音</h3><p>还是那句话，Python大法好。<br>这里就提供了一个根据已有数据库(表)结构生成对应SQLAlchemy模型类的神器：<br><strong>sqlacodegen</strong></p>\n<blockquote>\n<p>This is a tool that reads the structure of an existing database and generates the appropriate SQLAlchemy model code, using the declarative style if possible.</p>\n</blockquote>\n<p>安装方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install sqlacodegen</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"快快使用\"><a href=\"#快快使用\" class=\"headerlink\" title=\"快快使用\"></a>快快使用</h3><p>使用方法也很简单，只需要在终端(命令行窗口)运行一行命令即可：<br>常用数据库的使用方法：<br>将会获取到整个数据库的model<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlacodegen postgresql:///some_local_db</span><br><span class=\"line\">sqlacodegen mysql+oursql://user:password@localhost/dbname</span><br><span class=\"line\">sqlacodegen sqlite:///database.db</span><br></pre></td></tr></table></figure></p>\n<p>查看具体参数可以输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlacodegen --help</span><br></pre></td></tr></table></figure></p>\n<p>参数含义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optional arguments:</span><br><span class=\"line\">  -h, --help         show this help message and exit</span><br><span class=\"line\">  --version          print the version number and exit</span><br><span class=\"line\">  --schema SCHEMA    load tables from an alternate schema</span><br><span class=\"line\">  --tables TABLES    tables to process (comma-separated, default: all)</span><br><span class=\"line\">  --noviews          ignore views</span><br><span class=\"line\">  --noindexes        ignore indexes</span><br><span class=\"line\">  --noconstraints    ignore constraints</span><br><span class=\"line\">  --nojoined         don&apos;t autodetect joined table inheritance</span><br><span class=\"line\">  --noinflect        don&apos;t try to convert tables names to singular form</span><br><span class=\"line\">  --noclasses        don&apos;t generate classes, only tables</span><br><span class=\"line\">  --outfile OUTFILE  file to write output to (default: stdout)</span><br></pre></td></tr></table></figure></p>\n<p>目前我在postgresql的默认的postgres数据库中有个这样的表：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table friends</span><br><span class=\"line\">(</span><br><span class=\"line\">  id   varchar(3) primary key ,</span><br><span class=\"line\">  address  varchar(50) not null ,</span><br><span class=\"line\">  name varchar(10) not null</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">create unique index name_address</span><br><span class=\"line\">on friends (name, address);</span><br></pre></td></tr></table></figure></p>\n<p>为了使用ORM进行操作，我需要获取它的modle类<br><strong>但唯一索引的model类怎么写呢？</strong><br>我们<strong>借助sqlacodegen来自动生成</strong>就好了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlacodegen postgresql://ridingroad:ridingroad@127.0.0.1:5432/postgres --outfile=models.py  --tables friends</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"模型类效果\"><a href=\"#模型类效果\" class=\"headerlink\" title=\"模型类效果\"></a>模型类效果</h3><p>查看输出到models.py的内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding: utf-8</span><br><span class=\"line\">from sqlalchemy import Column, Index, String</span><br><span class=\"line\">from sqlalchemy.ext.declarative import declarative_base</span><br><span class=\"line\"></span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\">metadata = Base.metadata</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Friend(Base):</span><br><span class=\"line\">    __tablename__ = &apos;friends&apos;</span><br><span class=\"line\">    __table_args__ = (</span><br><span class=\"line\">        Index(&apos;name_address&apos;, &apos;name&apos;, &apos;address&apos;, unique=True),</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    id = Column(String(3), primary_key=True)</span><br><span class=\"line\">    address = Column(String(50), nullable=False)</span><br><span class=\"line\">    name = Column(String(10), nullable=False)</span><br></pre></td></tr></table></figure></p>\n<p>如果你有很多表，就直接指定数据库呗(这是会生成整个数据库的ORM模型类哦),不具体到每张表就好了，<br>后面就可以愉快的CRUD了，耶</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>Why does it sometimes generate classes and sometimes Tables?</p>\n<blockquote>\n<p>Unless the –noclasses option is used, sqlacodegen tries to generate declarative model classes from each table. There are two circumstances in which a Table is generated instead:<br>1、the table has no primary key constraint (which is required by SQLAlchemy for every model class)<br>2、the table is an association table between two other tables</p>\n</blockquote>\n<p>当你的表的字段缺少primary key或这张表是有两个外键约束的时候，会生成table而不是模型类了。比如，我那张表是这样的结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table friends</span><br><span class=\"line\">(</span><br><span class=\"line\">  id   varchar(3) ,</span><br><span class=\"line\">  address  varchar(50) not null ,</span><br><span class=\"line\">  name varchar(10) not null</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">create unique index name_address</span><br><span class=\"line\">  on friends (name, address);</span><br></pre></td></tr></table></figure></p>\n<p>再执行同一个命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlacodegen postgresql://ridingroad:ridingroad@127.0.0.1:5432/postgres --outfile=models.py  --tables friends</span><br></pre></td></tr></table></figure></p>\n<p>获取到的是Table：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding: utf-8</span><br><span class=\"line\">from sqlalchemy import Column, Index, MetaData, String, Table</span><br><span class=\"line\"></span><br><span class=\"line\">metadata = MetaData()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">t_friends = Table(</span><br><span class=\"line\">    &apos;friends&apos;, metadata,</span><br><span class=\"line\">    Column(&apos;id&apos;, String(3)),</span><br><span class=\"line\">    Column(&apos;address&apos;, String(50), nullable=False),</span><br><span class=\"line\">    Column(&apos;name&apos;, String(10), nullable=False),</span><br><span class=\"line\">    Index(&apos;name_address&apos;, &apos;name&apos;, &apos;address&apos;, unique=True)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>其实和模型类差不多嘛，但是还是尽量带上primary key吧，免得手动修改成模型类</p>\n<h3 id=\"Python全面学习资料\"><a href=\"#Python全面学习资料\" class=\"headerlink\" title=\"Python全面学习资料\"></a>Python全面学习资料</h3><p>公众号”Python孙行者”后台回复”电子书“即可。如果你有什么好东西好神器，欢迎后台私信，以后总结随文分享，耶<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/1ndlcPm7Ab4p0zUxJ9N2icqVOPm4KaibT1XzumWCK636mibdwmUZFMEMNNiaYnxYlZCibdeKdiaCRIpCmicEiadNticPgtQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"\"></p>"},{"title":"Ubuntu中一个网卡配置多个IP地址","comments":1,"date":"2018-08-16T09:36:56.000Z","toc":true,"_content":"一个网卡配置多个IP地址,也是分临时和永久<!--more-->\n### 临时配置\n重启后会失效\n```\nsudo ifconfig ens39:0 192.168.29.155 netmask 255.255.255.0 broadcast 192.168.29.255 up\nsudo ifconfig ens39:1 192.168.29.165 netmask 255.255.255.0 broadcast 192.168.29.255 up\n```\n![](https://pic3.zhimg.com/80/v2-a9fa7715ed9b203fbeb9087cf6ae39d6_hd.jpg)\n\n### 永久的配置\n把配置信息写到/etc/network/interfaces 文件里，可以实现永久修改\n重启服务或者重启电脑后都不会失效\n\n```\n\nauto ens39:0\niface ens39:0 inet static\naddress 192.168.29.155\nnetmask 255.255.255.0\ngateway 192.168.43.1\n\n\nauto ens39:1\niface ens39:1 inet static\naddress 192.168.29.165\nnetmask 255.255.255.0\ngateway 192.168.43.1\n```\n\n![](https://pic1.zhimg.com/80/v2-3d512ec7f0e4137dcb61a828025287bc_hd.jpg)\n","source":"_posts/Ubuntu中一个网卡配置多个IP地址.md","raw":"---\ntitle: Ubuntu中一个网卡配置多个IP地址\ncomments: true\ndate: 2018-08-16 17:36:56\ncategories:\n- Linux\ntags:\n- IP\ntoc: true\n\n---\n一个网卡配置多个IP地址,也是分临时和永久<!--more-->\n### 临时配置\n重启后会失效\n```\nsudo ifconfig ens39:0 192.168.29.155 netmask 255.255.255.0 broadcast 192.168.29.255 up\nsudo ifconfig ens39:1 192.168.29.165 netmask 255.255.255.0 broadcast 192.168.29.255 up\n```\n![](https://pic3.zhimg.com/80/v2-a9fa7715ed9b203fbeb9087cf6ae39d6_hd.jpg)\n\n### 永久的配置\n把配置信息写到/etc/network/interfaces 文件里，可以实现永久修改\n重启服务或者重启电脑后都不会失效\n\n```\n\nauto ens39:0\niface ens39:0 inet static\naddress 192.168.29.155\nnetmask 255.255.255.0\ngateway 192.168.43.1\n\n\nauto ens39:1\niface ens39:1 inet static\naddress 192.168.29.165\nnetmask 255.255.255.0\ngateway 192.168.43.1\n```\n\n![](https://pic1.zhimg.com/80/v2-3d512ec7f0e4137dcb61a828025287bc_hd.jpg)\n","slug":"Ubuntu中一个网卡配置多个IP地址","published":1,"updated":"2019-05-25T09:32:43.103Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtdk001ze5vxf3dkko77","content":"<p>一个网卡配置多个IP地址,也是分临时和永久<a id=\"more\"></a></p>\n<h3 id=\"临时配置\"><a href=\"#临时配置\" class=\"headerlink\" title=\"临时配置\"></a>临时配置</h3><p>重启后会失效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ifconfig ens39:0 192.168.29.155 netmask 255.255.255.0 broadcast 192.168.29.255 up</span><br><span class=\"line\">sudo ifconfig ens39:1 192.168.29.165 netmask 255.255.255.0 broadcast 192.168.29.255 up</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-a9fa7715ed9b203fbeb9087cf6ae39d6_hd.jpg\" alt=\"\"></p>\n<h3 id=\"永久的配置\"><a href=\"#永久的配置\" class=\"headerlink\" title=\"永久的配置\"></a>永久的配置</h3><p>把配置信息写到/etc/network/interfaces 文件里，可以实现永久修改<br>重启服务或者重启电脑后都不会失效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">auto ens39:0</span><br><span class=\"line\">iface ens39:0 inet static</span><br><span class=\"line\">address 192.168.29.155</span><br><span class=\"line\">netmask 255.255.255.0</span><br><span class=\"line\">gateway 192.168.43.1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">auto ens39:1</span><br><span class=\"line\">iface ens39:1 inet static</span><br><span class=\"line\">address 192.168.29.165</span><br><span class=\"line\">netmask 255.255.255.0</span><br><span class=\"line\">gateway 192.168.43.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pic1.zhimg.com/80/v2-3d512ec7f0e4137dcb61a828025287bc_hd.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>一个网卡配置多个IP地址,也是分临时和永久","more":"</p>\n<h3 id=\"临时配置\"><a href=\"#临时配置\" class=\"headerlink\" title=\"临时配置\"></a>临时配置</h3><p>重启后会失效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ifconfig ens39:0 192.168.29.155 netmask 255.255.255.0 broadcast 192.168.29.255 up</span><br><span class=\"line\">sudo ifconfig ens39:1 192.168.29.165 netmask 255.255.255.0 broadcast 192.168.29.255 up</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-a9fa7715ed9b203fbeb9087cf6ae39d6_hd.jpg\" alt=\"\"></p>\n<h3 id=\"永久的配置\"><a href=\"#永久的配置\" class=\"headerlink\" title=\"永久的配置\"></a>永久的配置</h3><p>把配置信息写到/etc/network/interfaces 文件里，可以实现永久修改<br>重启服务或者重启电脑后都不会失效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">auto ens39:0</span><br><span class=\"line\">iface ens39:0 inet static</span><br><span class=\"line\">address 192.168.29.155</span><br><span class=\"line\">netmask 255.255.255.0</span><br><span class=\"line\">gateway 192.168.43.1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">auto ens39:1</span><br><span class=\"line\">iface ens39:1 inet static</span><br><span class=\"line\">address 192.168.29.165</span><br><span class=\"line\">netmask 255.255.255.0</span><br><span class=\"line\">gateway 192.168.43.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pic1.zhimg.com/80/v2-3d512ec7f0e4137dcb61a828025287bc_hd.jpg\" alt=\"\"></p>"},{"title":"WSGI协议","comments":1,"date":"2018-07-24T13:36:39.000Z","toc":true,"_content":"了解WSGI协议对Web框架学习具有很重要的意义。<!--more-->\n### WSGI协议\n\n* 实现WSGI协议必须要有wsgi server和application。\n\n* WSGI协议其实是定义了一种server与application解耦的规范，即可以有多个实现WSGI server的服务器，也可以有多个实现WSGI application的框架，那么就可以选择任意的server和application组合实现自己的web应用。例如uWSGI和Gunicorn都是实现了WSGI server协议的服务器，Django，Flask是实现了WSGI application协议的web框架，可以根据项目实际情况搭配使用。\n\n### WSGI server\n\n\n准备 environ 参数\n\n定义 start_response 函数\n\n调用程序端的可调用对象\n\n### WSGI application\n\nWSGI 规定每个 python 程序（Application）必须是一个可调用的对象（实现了__call__ 函数的方法或者类），接受两个参数 environ（WSGI 的环境信息） 和 start_response（开始响应请求的函数），并且返回 iterable。\n\n\n```\n\ndef application(environ, start_response):\n\n    status = '200 OK'\n\n    response_headers = [('Content-Type', 'text/html')]\n\n    start_response(status, response_headers)\n\n    return str(environ)\n\n```\n\n\n* environ 和 start_response 由 http server 提供并实现\n\n* environ 变量是包含了环境信息的字典\n\n* Application 内部在返回前调用 start_response\n\n* start_response也是一个 callable，接受两个必须的参数，status（HTTP状态）和 response_headers（响应消息的头）, 数据格式为列表， 列表里面是一个个响应头元组\n\n* 可调用对象要返回一个值，这个值是可迭代的。\n","source":"_posts/WSGI协议.md","raw":"---\ntitle: WSGI协议\ncomments: true\ndate: 2018-07-24 21:36:39\ntoc: true\ncategories:\n- Python\ntags:\n- WSGI\n---\n了解WSGI协议对Web框架学习具有很重要的意义。<!--more-->\n### WSGI协议\n\n* 实现WSGI协议必须要有wsgi server和application。\n\n* WSGI协议其实是定义了一种server与application解耦的规范，即可以有多个实现WSGI server的服务器，也可以有多个实现WSGI application的框架，那么就可以选择任意的server和application组合实现自己的web应用。例如uWSGI和Gunicorn都是实现了WSGI server协议的服务器，Django，Flask是实现了WSGI application协议的web框架，可以根据项目实际情况搭配使用。\n\n### WSGI server\n\n\n准备 environ 参数\n\n定义 start_response 函数\n\n调用程序端的可调用对象\n\n### WSGI application\n\nWSGI 规定每个 python 程序（Application）必须是一个可调用的对象（实现了__call__ 函数的方法或者类），接受两个参数 environ（WSGI 的环境信息） 和 start_response（开始响应请求的函数），并且返回 iterable。\n\n\n```\n\ndef application(environ, start_response):\n\n    status = '200 OK'\n\n    response_headers = [('Content-Type', 'text/html')]\n\n    start_response(status, response_headers)\n\n    return str(environ)\n\n```\n\n\n* environ 和 start_response 由 http server 提供并实现\n\n* environ 变量是包含了环境信息的字典\n\n* Application 内部在返回前调用 start_response\n\n* start_response也是一个 callable，接受两个必须的参数，status（HTTP状态）和 response_headers（响应消息的头）, 数据格式为列表， 列表里面是一个个响应头元组\n\n* 可调用对象要返回一个值，这个值是可迭代的。\n","slug":"WSGI协议","published":1,"updated":"2019-05-25T09:32:43.103Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtdl0022e5vxzaadh9m9","content":"<p>了解WSGI协议对Web框架学习具有很重要的意义。<a id=\"more\"></a></p>\n<h3 id=\"WSGI协议\"><a href=\"#WSGI协议\" class=\"headerlink\" title=\"WSGI协议\"></a>WSGI协议</h3><ul>\n<li><p>实现WSGI协议必须要有wsgi server和application。</p>\n</li>\n<li><p>WSGI协议其实是定义了一种server与application解耦的规范，即可以有多个实现WSGI server的服务器，也可以有多个实现WSGI application的框架，那么就可以选择任意的server和application组合实现自己的web应用。例如uWSGI和Gunicorn都是实现了WSGI server协议的服务器，Django，Flask是实现了WSGI application协议的web框架，可以根据项目实际情况搭配使用。</p>\n</li>\n</ul>\n<h3 id=\"WSGI-server\"><a href=\"#WSGI-server\" class=\"headerlink\" title=\"WSGI server\"></a>WSGI server</h3><p>准备 environ 参数</p>\n<p>定义 start_response 函数</p>\n<p>调用程序端的可调用对象</p>\n<h3 id=\"WSGI-application\"><a href=\"#WSGI-application\" class=\"headerlink\" title=\"WSGI application\"></a>WSGI application</h3><p>WSGI 规定每个 python 程序（Application）必须是一个可调用的对象（实现了<strong>call</strong> 函数的方法或者类），接受两个参数 environ（WSGI 的环境信息） 和 start_response（开始响应请求的函数），并且返回 iterable。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">def application(environ, start_response):</span><br><span class=\"line\"></span><br><span class=\"line\">    status = &apos;200 OK&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    response_headers = [(&apos;Content-Type&apos;, &apos;text/html&apos;)]</span><br><span class=\"line\"></span><br><span class=\"line\">    start_response(status, response_headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    return str(environ)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>environ 和 start_response 由 http server 提供并实现</p>\n</li>\n<li><p>environ 变量是包含了环境信息的字典</p>\n</li>\n<li><p>Application 内部在返回前调用 start_response</p>\n</li>\n<li><p>start_response也是一个 callable，接受两个必须的参数，status（HTTP状态）和 response_headers（响应消息的头）, 数据格式为列表， 列表里面是一个个响应头元组</p>\n</li>\n<li><p>可调用对象要返回一个值，这个值是可迭代的。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>了解WSGI协议对Web框架学习具有很重要的意义。","more":"</p>\n<h3 id=\"WSGI协议\"><a href=\"#WSGI协议\" class=\"headerlink\" title=\"WSGI协议\"></a>WSGI协议</h3><ul>\n<li><p>实现WSGI协议必须要有wsgi server和application。</p>\n</li>\n<li><p>WSGI协议其实是定义了一种server与application解耦的规范，即可以有多个实现WSGI server的服务器，也可以有多个实现WSGI application的框架，那么就可以选择任意的server和application组合实现自己的web应用。例如uWSGI和Gunicorn都是实现了WSGI server协议的服务器，Django，Flask是实现了WSGI application协议的web框架，可以根据项目实际情况搭配使用。</p>\n</li>\n</ul>\n<h3 id=\"WSGI-server\"><a href=\"#WSGI-server\" class=\"headerlink\" title=\"WSGI server\"></a>WSGI server</h3><p>准备 environ 参数</p>\n<p>定义 start_response 函数</p>\n<p>调用程序端的可调用对象</p>\n<h3 id=\"WSGI-application\"><a href=\"#WSGI-application\" class=\"headerlink\" title=\"WSGI application\"></a>WSGI application</h3><p>WSGI 规定每个 python 程序（Application）必须是一个可调用的对象（实现了<strong>call</strong> 函数的方法或者类），接受两个参数 environ（WSGI 的环境信息） 和 start_response（开始响应请求的函数），并且返回 iterable。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">def application(environ, start_response):</span><br><span class=\"line\"></span><br><span class=\"line\">    status = &apos;200 OK&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    response_headers = [(&apos;Content-Type&apos;, &apos;text/html&apos;)]</span><br><span class=\"line\"></span><br><span class=\"line\">    start_response(status, response_headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    return str(environ)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>environ 和 start_response 由 http server 提供并实现</p>\n</li>\n<li><p>environ 变量是包含了环境信息的字典</p>\n</li>\n<li><p>Application 内部在返回前调用 start_response</p>\n</li>\n<li><p>start_response也是一个 callable，接受两个必须的参数，status（HTTP状态）和 response_headers（响应消息的头）, 数据格式为列表， 列表里面是一个个响应头元组</p>\n</li>\n<li><p>可调用对象要返回一个值，这个值是可迭代的。</p>\n</li>\n</ul>"},{"title":"open函数的errors参数的使用","comments":1,"date":"2018-08-09T13:30:28.000Z","toc":true,"_content":"\nopen函数一般只指定文件路径和打开模式，但有时候errors参数还是很好用的<!--more-->\n### open函数源码解释：\n```\ndef open(file, mode='r', buffering=None, encoding=None, errors=None, newline=None, closefd=True): # known special case of open\n    \"\"\"\n    Open file and return a stream.  Raise IOError upon failure.\n\n    file is either a text or byte string giving the name (and the path\n    if the file isn't in the current working directory) of the file to\n    be opened or an integer file descriptor of the file to be\n    wrapped. (If a file descriptor is given, it is closed when the\n    returned I/O object is closed, unless closefd is set to False.)\n\n    mode is an optional string that specifies the mode in which the file\n    is opened. It defaults to 'r' which means open for reading in text\n    mode.  Other common values are 'w' for writing (truncating the file if\n    it already exists), 'x' for creating and writing to a new file, and\n    'a' for appending (which on some Unix systems, means that all writes\n    append to the end of the file regardless of the current seek position).\n    In text mode, if encoding is not specified the encoding used is platform\n    dependent: locale.getpreferredencoding(False) is called to get the\n    current locale encoding. (For reading and writing raw bytes use binary\n    mode and leave encoding unspecified.) The available modes are:\n\n    ========= ===============================================================\n    Character Meaning\n    --------- ---------------------------------------------------------------\n    'r'       open for reading (default)\n    'w'       open for writing, truncating the file first\n    'x'       create a new file and open it for writing\n    'a'       open for writing, appending to the end of the file if it exists\n    'b'       binary mode\n    't'       text mode (default)\n    '+'       open a disk file for updating (reading and writing)\n    'U'       universal newline mode (deprecated)\n    ========= ===============================================================\n\n    The default mode is 'rt' (open for reading text). For binary random\n    access, the mode 'w+b' opens and truncates the file to 0 bytes, while\n    'r+b' opens the file without truncation. The 'x' mode implies 'w' and\n    raises an `FileExistsError` if the file already exists.\n\n    Python distinguishes between files opened in binary and text modes,\n    even when the underlying operating system doesn't. Files opened in\n    binary mode (appending 'b' to the mode argument) return contents as\n    bytes objects without any decoding. In text mode (the default, or when\n    't' is appended to the mode argument), the contents of the file are\n    returned as strings, the bytes having been first decoded using a\n    platform-dependent encoding or using the specified encoding if given.\n\n    'U' mode is deprecated and will raise an exception in future versions\n    of Python.  It has no effect in Python 3.  Use newline to control\n    universal newlines mode.\n\n    buffering is an optional integer used to set the buffering policy.\n    Pass 0 to switch buffering off (only allowed in binary mode), 1 to select\n    line buffering (only usable in text mode), and an integer > 1 to indicate\n    the size of a fixed-size chunk buffer.  When no buffering argument is\n    given, the default buffering policy works as follows:\n\n    * Binary files are buffered in fixed-size chunks; the size of the buffer\n      is chosen using a heuristic trying to determine the underlying device's\n      \"block size\" and falling back on `io.DEFAULT_BUFFER_SIZE`.\n      On many systems, the buffer will typically be 4096 or 8192 bytes long.\n\n    * \"Interactive\" text files (files for which isatty() returns True)\n      use line buffering.  Other text files use the policy described above\n      for binary files.\n\n    encoding is the name of the encoding used to decode or encode the\n    file. This should only be used in text mode. The default encoding is\n    platform dependent, but any encoding supported by Python can be\n    passed.  See the codecs module for the list of supported encodings.\n\n    errors is an optional string that specifies how encoding errors are to\n    be handled---this argument should not be used in binary mode. Pass\n    'strict' to raise a ValueError exception if there is an encoding error\n    (the default of None has the same effect), or pass 'ignore' to ignore\n    errors. (Note that ignoring encoding errors can lead to data loss.)\n    See the documentation for codecs.register or run 'help(codecs.Codec)'\n    for a list of the permitted encoding error strings.\n\n    newline controls how universal newlines works (it only applies to text\n    mode). It can be None, '', '\\n', '\\r', and '\\r\\n'.  It works as\n    follows:\n\n    * On input, if newline is None, universal newlines mode is\n      enabled. Lines in the input can end in '\\n', '\\r', or '\\r\\n', and\n      these are translated into '\\n' before being returned to the\n      caller. If it is '', universal newline mode is enabled, but line\n      endings are returned to the caller untranslated. If it has any of\n      the other legal values, input lines are only terminated by the given\n      string, and the line ending is returned to the caller untranslated.\n\n    * On output, if newline is None, any '\\n' characters written are\n      translated to the system default line separator, os.linesep. If\n      newline is '' or '\\n', no translation takes place. If newline is any\n      of the other legal values, any '\\n' characters written are translated\n      to the given string.\n\n    If closefd is False, the underlying file descriptor will be kept open\n    when the file is closed. This does not work when a file name is given\n    and must be True in that case.\n\n    A custom opener can be used by passing a callable as *opener*. The\n    underlying file descriptor for the file object is then obtained by\n    calling *opener* with (*file*, *flags*). *opener* must return an open\n    file descriptor (passing os.open as *opener* results in functionality\n    similar to passing None).\n\n    open() returns a file object whose type depends on the mode, and\n    through which the standard file operations such as reading and writing\n    are performed. When open() is used to open a file in a text mode ('w',\n    'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open\n    a file in a binary mode, the returned class varies: in read binary\n    mode, it returns a BufferedReader; in write binary and append binary\n    modes, it returns a BufferedWriter, and in read/write mode, it returns\n    a BufferedRandom.\n\n    It is also possible to use a string or bytearray as a file for both\n    reading and writing. For strings StringIO can be used like a file\n    opened in a text mode, and for bytes a BytesIO can be used like a file\n    opened in a binary mode.\n    \"\"\"\n\n```\n\n### errors参数的说明\n参数errors是用来指明编码和解码错误时怎么样处理。不能在二进制的模式下使用。\n\n1）当指明为’strict’时，编码出错则抛出异常ValueError。\n\n2）当指明为’ignore’时，忽略错误。\n\n3）当指明为’replace’时，使用某字符进行替代模式，比如使用’?’来替换出错的。\n\n4）其它相应还有surrogateescape/xmlcharrefreplacs/backslashreplace。\n","source":"_posts/open函数的errors参数的使用.md","raw":"---\ntitle: open函数的errors参数的使用\ncomments: true\ndate: 2018-08-09 21:30:28\ntoc: true\ncategories:\n- Python\ntags:\n- open\n---\n\nopen函数一般只指定文件路径和打开模式，但有时候errors参数还是很好用的<!--more-->\n### open函数源码解释：\n```\ndef open(file, mode='r', buffering=None, encoding=None, errors=None, newline=None, closefd=True): # known special case of open\n    \"\"\"\n    Open file and return a stream.  Raise IOError upon failure.\n\n    file is either a text or byte string giving the name (and the path\n    if the file isn't in the current working directory) of the file to\n    be opened or an integer file descriptor of the file to be\n    wrapped. (If a file descriptor is given, it is closed when the\n    returned I/O object is closed, unless closefd is set to False.)\n\n    mode is an optional string that specifies the mode in which the file\n    is opened. It defaults to 'r' which means open for reading in text\n    mode.  Other common values are 'w' for writing (truncating the file if\n    it already exists), 'x' for creating and writing to a new file, and\n    'a' for appending (which on some Unix systems, means that all writes\n    append to the end of the file regardless of the current seek position).\n    In text mode, if encoding is not specified the encoding used is platform\n    dependent: locale.getpreferredencoding(False) is called to get the\n    current locale encoding. (For reading and writing raw bytes use binary\n    mode and leave encoding unspecified.) The available modes are:\n\n    ========= ===============================================================\n    Character Meaning\n    --------- ---------------------------------------------------------------\n    'r'       open for reading (default)\n    'w'       open for writing, truncating the file first\n    'x'       create a new file and open it for writing\n    'a'       open for writing, appending to the end of the file if it exists\n    'b'       binary mode\n    't'       text mode (default)\n    '+'       open a disk file for updating (reading and writing)\n    'U'       universal newline mode (deprecated)\n    ========= ===============================================================\n\n    The default mode is 'rt' (open for reading text). For binary random\n    access, the mode 'w+b' opens and truncates the file to 0 bytes, while\n    'r+b' opens the file without truncation. The 'x' mode implies 'w' and\n    raises an `FileExistsError` if the file already exists.\n\n    Python distinguishes between files opened in binary and text modes,\n    even when the underlying operating system doesn't. Files opened in\n    binary mode (appending 'b' to the mode argument) return contents as\n    bytes objects without any decoding. In text mode (the default, or when\n    't' is appended to the mode argument), the contents of the file are\n    returned as strings, the bytes having been first decoded using a\n    platform-dependent encoding or using the specified encoding if given.\n\n    'U' mode is deprecated and will raise an exception in future versions\n    of Python.  It has no effect in Python 3.  Use newline to control\n    universal newlines mode.\n\n    buffering is an optional integer used to set the buffering policy.\n    Pass 0 to switch buffering off (only allowed in binary mode), 1 to select\n    line buffering (only usable in text mode), and an integer > 1 to indicate\n    the size of a fixed-size chunk buffer.  When no buffering argument is\n    given, the default buffering policy works as follows:\n\n    * Binary files are buffered in fixed-size chunks; the size of the buffer\n      is chosen using a heuristic trying to determine the underlying device's\n      \"block size\" and falling back on `io.DEFAULT_BUFFER_SIZE`.\n      On many systems, the buffer will typically be 4096 or 8192 bytes long.\n\n    * \"Interactive\" text files (files for which isatty() returns True)\n      use line buffering.  Other text files use the policy described above\n      for binary files.\n\n    encoding is the name of the encoding used to decode or encode the\n    file. This should only be used in text mode. The default encoding is\n    platform dependent, but any encoding supported by Python can be\n    passed.  See the codecs module for the list of supported encodings.\n\n    errors is an optional string that specifies how encoding errors are to\n    be handled---this argument should not be used in binary mode. Pass\n    'strict' to raise a ValueError exception if there is an encoding error\n    (the default of None has the same effect), or pass 'ignore' to ignore\n    errors. (Note that ignoring encoding errors can lead to data loss.)\n    See the documentation for codecs.register or run 'help(codecs.Codec)'\n    for a list of the permitted encoding error strings.\n\n    newline controls how universal newlines works (it only applies to text\n    mode). It can be None, '', '\\n', '\\r', and '\\r\\n'.  It works as\n    follows:\n\n    * On input, if newline is None, universal newlines mode is\n      enabled. Lines in the input can end in '\\n', '\\r', or '\\r\\n', and\n      these are translated into '\\n' before being returned to the\n      caller. If it is '', universal newline mode is enabled, but line\n      endings are returned to the caller untranslated. If it has any of\n      the other legal values, input lines are only terminated by the given\n      string, and the line ending is returned to the caller untranslated.\n\n    * On output, if newline is None, any '\\n' characters written are\n      translated to the system default line separator, os.linesep. If\n      newline is '' or '\\n', no translation takes place. If newline is any\n      of the other legal values, any '\\n' characters written are translated\n      to the given string.\n\n    If closefd is False, the underlying file descriptor will be kept open\n    when the file is closed. This does not work when a file name is given\n    and must be True in that case.\n\n    A custom opener can be used by passing a callable as *opener*. The\n    underlying file descriptor for the file object is then obtained by\n    calling *opener* with (*file*, *flags*). *opener* must return an open\n    file descriptor (passing os.open as *opener* results in functionality\n    similar to passing None).\n\n    open() returns a file object whose type depends on the mode, and\n    through which the standard file operations such as reading and writing\n    are performed. When open() is used to open a file in a text mode ('w',\n    'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open\n    a file in a binary mode, the returned class varies: in read binary\n    mode, it returns a BufferedReader; in write binary and append binary\n    modes, it returns a BufferedWriter, and in read/write mode, it returns\n    a BufferedRandom.\n\n    It is also possible to use a string or bytearray as a file for both\n    reading and writing. For strings StringIO can be used like a file\n    opened in a text mode, and for bytes a BytesIO can be used like a file\n    opened in a binary mode.\n    \"\"\"\n\n```\n\n### errors参数的说明\n参数errors是用来指明编码和解码错误时怎么样处理。不能在二进制的模式下使用。\n\n1）当指明为’strict’时，编码出错则抛出异常ValueError。\n\n2）当指明为’ignore’时，忽略错误。\n\n3）当指明为’replace’时，使用某字符进行替代模式，比如使用’?’来替换出错的。\n\n4）其它相应还有surrogateescape/xmlcharrefreplacs/backslashreplace。\n","slug":"open函数的errors参数的使用","published":1,"updated":"2019-05-25T09:32:43.105Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtdn0024e5vx299ot8ud","content":"<p>open函数一般只指定文件路径和打开模式，但有时候errors参数还是很好用的<a id=\"more\"></a></p>\n<h3 id=\"open函数源码解释：\"><a href=\"#open函数源码解释：\" class=\"headerlink\" title=\"open函数源码解释：\"></a>open函数源码解释：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def open(file, mode=&apos;r&apos;, buffering=None, encoding=None, errors=None, newline=None, closefd=True): # known special case of open</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Open file and return a stream.  Raise IOError upon failure.</span><br><span class=\"line\"></span><br><span class=\"line\">    file is either a text or byte string giving the name (and the path</span><br><span class=\"line\">    if the file isn&apos;t in the current working directory) of the file to</span><br><span class=\"line\">    be opened or an integer file descriptor of the file to be</span><br><span class=\"line\">    wrapped. (If a file descriptor is given, it is closed when the</span><br><span class=\"line\">    returned I/O object is closed, unless closefd is set to False.)</span><br><span class=\"line\"></span><br><span class=\"line\">    mode is an optional string that specifies the mode in which the file</span><br><span class=\"line\">    is opened. It defaults to &apos;r&apos; which means open for reading in text</span><br><span class=\"line\">    mode.  Other common values are &apos;w&apos; for writing (truncating the file if</span><br><span class=\"line\">    it already exists), &apos;x&apos; for creating and writing to a new file, and</span><br><span class=\"line\">    &apos;a&apos; for appending (which on some Unix systems, means that all writes</span><br><span class=\"line\">    append to the end of the file regardless of the current seek position).</span><br><span class=\"line\">    In text mode, if encoding is not specified the encoding used is platform</span><br><span class=\"line\">    dependent: locale.getpreferredencoding(False) is called to get the</span><br><span class=\"line\">    current locale encoding. (For reading and writing raw bytes use binary</span><br><span class=\"line\">    mode and leave encoding unspecified.) The available modes are:</span><br><span class=\"line\"></span><br><span class=\"line\">    ========= ===============================================================</span><br><span class=\"line\">    Character Meaning</span><br><span class=\"line\">    --------- ---------------------------------------------------------------</span><br><span class=\"line\">    &apos;r&apos;       open for reading (default)</span><br><span class=\"line\">    &apos;w&apos;       open for writing, truncating the file first</span><br><span class=\"line\">    &apos;x&apos;       create a new file and open it for writing</span><br><span class=\"line\">    &apos;a&apos;       open for writing, appending to the end of the file if it exists</span><br><span class=\"line\">    &apos;b&apos;       binary mode</span><br><span class=\"line\">    &apos;t&apos;       text mode (default)</span><br><span class=\"line\">    &apos;+&apos;       open a disk file for updating (reading and writing)</span><br><span class=\"line\">    &apos;U&apos;       universal newline mode (deprecated)</span><br><span class=\"line\">    ========= ===============================================================</span><br><span class=\"line\"></span><br><span class=\"line\">    The default mode is &apos;rt&apos; (open for reading text). For binary random</span><br><span class=\"line\">    access, the mode &apos;w+b&apos; opens and truncates the file to 0 bytes, while</span><br><span class=\"line\">    &apos;r+b&apos; opens the file without truncation. The &apos;x&apos; mode implies &apos;w&apos; and</span><br><span class=\"line\">    raises an `FileExistsError` if the file already exists.</span><br><span class=\"line\"></span><br><span class=\"line\">    Python distinguishes between files opened in binary and text modes,</span><br><span class=\"line\">    even when the underlying operating system doesn&apos;t. Files opened in</span><br><span class=\"line\">    binary mode (appending &apos;b&apos; to the mode argument) return contents as</span><br><span class=\"line\">    bytes objects without any decoding. In text mode (the default, or when</span><br><span class=\"line\">    &apos;t&apos; is appended to the mode argument), the contents of the file are</span><br><span class=\"line\">    returned as strings, the bytes having been first decoded using a</span><br><span class=\"line\">    platform-dependent encoding or using the specified encoding if given.</span><br><span class=\"line\"></span><br><span class=\"line\">    &apos;U&apos; mode is deprecated and will raise an exception in future versions</span><br><span class=\"line\">    of Python.  It has no effect in Python 3.  Use newline to control</span><br><span class=\"line\">    universal newlines mode.</span><br><span class=\"line\"></span><br><span class=\"line\">    buffering is an optional integer used to set the buffering policy.</span><br><span class=\"line\">    Pass 0 to switch buffering off (only allowed in binary mode), 1 to select</span><br><span class=\"line\">    line buffering (only usable in text mode), and an integer &gt; 1 to indicate</span><br><span class=\"line\">    the size of a fixed-size chunk buffer.  When no buffering argument is</span><br><span class=\"line\">    given, the default buffering policy works as follows:</span><br><span class=\"line\"></span><br><span class=\"line\">    * Binary files are buffered in fixed-size chunks; the size of the buffer</span><br><span class=\"line\">      is chosen using a heuristic trying to determine the underlying device&apos;s</span><br><span class=\"line\">      &quot;block size&quot; and falling back on `io.DEFAULT_BUFFER_SIZE`.</span><br><span class=\"line\">      On many systems, the buffer will typically be 4096 or 8192 bytes long.</span><br><span class=\"line\"></span><br><span class=\"line\">    * &quot;Interactive&quot; text files (files for which isatty() returns True)</span><br><span class=\"line\">      use line buffering.  Other text files use the policy described above</span><br><span class=\"line\">      for binary files.</span><br><span class=\"line\"></span><br><span class=\"line\">    encoding is the name of the encoding used to decode or encode the</span><br><span class=\"line\">    file. This should only be used in text mode. The default encoding is</span><br><span class=\"line\">    platform dependent, but any encoding supported by Python can be</span><br><span class=\"line\">    passed.  See the codecs module for the list of supported encodings.</span><br><span class=\"line\"></span><br><span class=\"line\">    errors is an optional string that specifies how encoding errors are to</span><br><span class=\"line\">    be handled---this argument should not be used in binary mode. Pass</span><br><span class=\"line\">    &apos;strict&apos; to raise a ValueError exception if there is an encoding error</span><br><span class=\"line\">    (the default of None has the same effect), or pass &apos;ignore&apos; to ignore</span><br><span class=\"line\">    errors. (Note that ignoring encoding errors can lead to data loss.)</span><br><span class=\"line\">    See the documentation for codecs.register or run &apos;help(codecs.Codec)&apos;</span><br><span class=\"line\">    for a list of the permitted encoding error strings.</span><br><span class=\"line\"></span><br><span class=\"line\">    newline controls how universal newlines works (it only applies to text</span><br><span class=\"line\">    mode). It can be None, &apos;&apos;, &apos;\\n&apos;, &apos;\\r&apos;, and &apos;\\r\\n&apos;.  It works as</span><br><span class=\"line\">    follows:</span><br><span class=\"line\"></span><br><span class=\"line\">    * On input, if newline is None, universal newlines mode is</span><br><span class=\"line\">      enabled. Lines in the input can end in &apos;\\n&apos;, &apos;\\r&apos;, or &apos;\\r\\n&apos;, and</span><br><span class=\"line\">      these are translated into &apos;\\n&apos; before being returned to the</span><br><span class=\"line\">      caller. If it is &apos;&apos;, universal newline mode is enabled, but line</span><br><span class=\"line\">      endings are returned to the caller untranslated. If it has any of</span><br><span class=\"line\">      the other legal values, input lines are only terminated by the given</span><br><span class=\"line\">      string, and the line ending is returned to the caller untranslated.</span><br><span class=\"line\"></span><br><span class=\"line\">    * On output, if newline is None, any &apos;\\n&apos; characters written are</span><br><span class=\"line\">      translated to the system default line separator, os.linesep. If</span><br><span class=\"line\">      newline is &apos;&apos; or &apos;\\n&apos;, no translation takes place. If newline is any</span><br><span class=\"line\">      of the other legal values, any &apos;\\n&apos; characters written are translated</span><br><span class=\"line\">      to the given string.</span><br><span class=\"line\"></span><br><span class=\"line\">    If closefd is False, the underlying file descriptor will be kept open</span><br><span class=\"line\">    when the file is closed. This does not work when a file name is given</span><br><span class=\"line\">    and must be True in that case.</span><br><span class=\"line\"></span><br><span class=\"line\">    A custom opener can be used by passing a callable as *opener*. The</span><br><span class=\"line\">    underlying file descriptor for the file object is then obtained by</span><br><span class=\"line\">    calling *opener* with (*file*, *flags*). *opener* must return an open</span><br><span class=\"line\">    file descriptor (passing os.open as *opener* results in functionality</span><br><span class=\"line\">    similar to passing None).</span><br><span class=\"line\"></span><br><span class=\"line\">    open() returns a file object whose type depends on the mode, and</span><br><span class=\"line\">    through which the standard file operations such as reading and writing</span><br><span class=\"line\">    are performed. When open() is used to open a file in a text mode (&apos;w&apos;,</span><br><span class=\"line\">    &apos;r&apos;, &apos;wt&apos;, &apos;rt&apos;, etc.), it returns a TextIOWrapper. When used to open</span><br><span class=\"line\">    a file in a binary mode, the returned class varies: in read binary</span><br><span class=\"line\">    mode, it returns a BufferedReader; in write binary and append binary</span><br><span class=\"line\">    modes, it returns a BufferedWriter, and in read/write mode, it returns</span><br><span class=\"line\">    a BufferedRandom.</span><br><span class=\"line\"></span><br><span class=\"line\">    It is also possible to use a string or bytearray as a file for both</span><br><span class=\"line\">    reading and writing. For strings StringIO can be used like a file</span><br><span class=\"line\">    opened in a text mode, and for bytes a BytesIO can be used like a file</span><br><span class=\"line\">    opened in a binary mode.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"errors参数的说明\"><a href=\"#errors参数的说明\" class=\"headerlink\" title=\"errors参数的说明\"></a>errors参数的说明</h3><p>参数errors是用来指明编码和解码错误时怎么样处理。不能在二进制的模式下使用。</p>\n<p>1）当指明为’strict’时，编码出错则抛出异常ValueError。</p>\n<p>2）当指明为’ignore’时，忽略错误。</p>\n<p>3）当指明为’replace’时，使用某字符进行替代模式，比如使用’?’来替换出错的。</p>\n<p>4）其它相应还有surrogateescape/xmlcharrefreplacs/backslashreplace。</p>\n","site":{"data":{}},"excerpt":"<p>open函数一般只指定文件路径和打开模式，但有时候errors参数还是很好用的","more":"</p>\n<h3 id=\"open函数源码解释：\"><a href=\"#open函数源码解释：\" class=\"headerlink\" title=\"open函数源码解释：\"></a>open函数源码解释：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def open(file, mode=&apos;r&apos;, buffering=None, encoding=None, errors=None, newline=None, closefd=True): # known special case of open</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Open file and return a stream.  Raise IOError upon failure.</span><br><span class=\"line\"></span><br><span class=\"line\">    file is either a text or byte string giving the name (and the path</span><br><span class=\"line\">    if the file isn&apos;t in the current working directory) of the file to</span><br><span class=\"line\">    be opened or an integer file descriptor of the file to be</span><br><span class=\"line\">    wrapped. (If a file descriptor is given, it is closed when the</span><br><span class=\"line\">    returned I/O object is closed, unless closefd is set to False.)</span><br><span class=\"line\"></span><br><span class=\"line\">    mode is an optional string that specifies the mode in which the file</span><br><span class=\"line\">    is opened. It defaults to &apos;r&apos; which means open for reading in text</span><br><span class=\"line\">    mode.  Other common values are &apos;w&apos; for writing (truncating the file if</span><br><span class=\"line\">    it already exists), &apos;x&apos; for creating and writing to a new file, and</span><br><span class=\"line\">    &apos;a&apos; for appending (which on some Unix systems, means that all writes</span><br><span class=\"line\">    append to the end of the file regardless of the current seek position).</span><br><span class=\"line\">    In text mode, if encoding is not specified the encoding used is platform</span><br><span class=\"line\">    dependent: locale.getpreferredencoding(False) is called to get the</span><br><span class=\"line\">    current locale encoding. (For reading and writing raw bytes use binary</span><br><span class=\"line\">    mode and leave encoding unspecified.) The available modes are:</span><br><span class=\"line\"></span><br><span class=\"line\">    ========= ===============================================================</span><br><span class=\"line\">    Character Meaning</span><br><span class=\"line\">    --------- ---------------------------------------------------------------</span><br><span class=\"line\">    &apos;r&apos;       open for reading (default)</span><br><span class=\"line\">    &apos;w&apos;       open for writing, truncating the file first</span><br><span class=\"line\">    &apos;x&apos;       create a new file and open it for writing</span><br><span class=\"line\">    &apos;a&apos;       open for writing, appending to the end of the file if it exists</span><br><span class=\"line\">    &apos;b&apos;       binary mode</span><br><span class=\"line\">    &apos;t&apos;       text mode (default)</span><br><span class=\"line\">    &apos;+&apos;       open a disk file for updating (reading and writing)</span><br><span class=\"line\">    &apos;U&apos;       universal newline mode (deprecated)</span><br><span class=\"line\">    ========= ===============================================================</span><br><span class=\"line\"></span><br><span class=\"line\">    The default mode is &apos;rt&apos; (open for reading text). For binary random</span><br><span class=\"line\">    access, the mode &apos;w+b&apos; opens and truncates the file to 0 bytes, while</span><br><span class=\"line\">    &apos;r+b&apos; opens the file without truncation. The &apos;x&apos; mode implies &apos;w&apos; and</span><br><span class=\"line\">    raises an `FileExistsError` if the file already exists.</span><br><span class=\"line\"></span><br><span class=\"line\">    Python distinguishes between files opened in binary and text modes,</span><br><span class=\"line\">    even when the underlying operating system doesn&apos;t. Files opened in</span><br><span class=\"line\">    binary mode (appending &apos;b&apos; to the mode argument) return contents as</span><br><span class=\"line\">    bytes objects without any decoding. In text mode (the default, or when</span><br><span class=\"line\">    &apos;t&apos; is appended to the mode argument), the contents of the file are</span><br><span class=\"line\">    returned as strings, the bytes having been first decoded using a</span><br><span class=\"line\">    platform-dependent encoding or using the specified encoding if given.</span><br><span class=\"line\"></span><br><span class=\"line\">    &apos;U&apos; mode is deprecated and will raise an exception in future versions</span><br><span class=\"line\">    of Python.  It has no effect in Python 3.  Use newline to control</span><br><span class=\"line\">    universal newlines mode.</span><br><span class=\"line\"></span><br><span class=\"line\">    buffering is an optional integer used to set the buffering policy.</span><br><span class=\"line\">    Pass 0 to switch buffering off (only allowed in binary mode), 1 to select</span><br><span class=\"line\">    line buffering (only usable in text mode), and an integer &gt; 1 to indicate</span><br><span class=\"line\">    the size of a fixed-size chunk buffer.  When no buffering argument is</span><br><span class=\"line\">    given, the default buffering policy works as follows:</span><br><span class=\"line\"></span><br><span class=\"line\">    * Binary files are buffered in fixed-size chunks; the size of the buffer</span><br><span class=\"line\">      is chosen using a heuristic trying to determine the underlying device&apos;s</span><br><span class=\"line\">      &quot;block size&quot; and falling back on `io.DEFAULT_BUFFER_SIZE`.</span><br><span class=\"line\">      On many systems, the buffer will typically be 4096 or 8192 bytes long.</span><br><span class=\"line\"></span><br><span class=\"line\">    * &quot;Interactive&quot; text files (files for which isatty() returns True)</span><br><span class=\"line\">      use line buffering.  Other text files use the policy described above</span><br><span class=\"line\">      for binary files.</span><br><span class=\"line\"></span><br><span class=\"line\">    encoding is the name of the encoding used to decode or encode the</span><br><span class=\"line\">    file. This should only be used in text mode. The default encoding is</span><br><span class=\"line\">    platform dependent, but any encoding supported by Python can be</span><br><span class=\"line\">    passed.  See the codecs module for the list of supported encodings.</span><br><span class=\"line\"></span><br><span class=\"line\">    errors is an optional string that specifies how encoding errors are to</span><br><span class=\"line\">    be handled---this argument should not be used in binary mode. Pass</span><br><span class=\"line\">    &apos;strict&apos; to raise a ValueError exception if there is an encoding error</span><br><span class=\"line\">    (the default of None has the same effect), or pass &apos;ignore&apos; to ignore</span><br><span class=\"line\">    errors. (Note that ignoring encoding errors can lead to data loss.)</span><br><span class=\"line\">    See the documentation for codecs.register or run &apos;help(codecs.Codec)&apos;</span><br><span class=\"line\">    for a list of the permitted encoding error strings.</span><br><span class=\"line\"></span><br><span class=\"line\">    newline controls how universal newlines works (it only applies to text</span><br><span class=\"line\">    mode). It can be None, &apos;&apos;, &apos;\\n&apos;, &apos;\\r&apos;, and &apos;\\r\\n&apos;.  It works as</span><br><span class=\"line\">    follows:</span><br><span class=\"line\"></span><br><span class=\"line\">    * On input, if newline is None, universal newlines mode is</span><br><span class=\"line\">      enabled. Lines in the input can end in &apos;\\n&apos;, &apos;\\r&apos;, or &apos;\\r\\n&apos;, and</span><br><span class=\"line\">      these are translated into &apos;\\n&apos; before being returned to the</span><br><span class=\"line\">      caller. If it is &apos;&apos;, universal newline mode is enabled, but line</span><br><span class=\"line\">      endings are returned to the caller untranslated. If it has any of</span><br><span class=\"line\">      the other legal values, input lines are only terminated by the given</span><br><span class=\"line\">      string, and the line ending is returned to the caller untranslated.</span><br><span class=\"line\"></span><br><span class=\"line\">    * On output, if newline is None, any &apos;\\n&apos; characters written are</span><br><span class=\"line\">      translated to the system default line separator, os.linesep. If</span><br><span class=\"line\">      newline is &apos;&apos; or &apos;\\n&apos;, no translation takes place. If newline is any</span><br><span class=\"line\">      of the other legal values, any &apos;\\n&apos; characters written are translated</span><br><span class=\"line\">      to the given string.</span><br><span class=\"line\"></span><br><span class=\"line\">    If closefd is False, the underlying file descriptor will be kept open</span><br><span class=\"line\">    when the file is closed. This does not work when a file name is given</span><br><span class=\"line\">    and must be True in that case.</span><br><span class=\"line\"></span><br><span class=\"line\">    A custom opener can be used by passing a callable as *opener*. The</span><br><span class=\"line\">    underlying file descriptor for the file object is then obtained by</span><br><span class=\"line\">    calling *opener* with (*file*, *flags*). *opener* must return an open</span><br><span class=\"line\">    file descriptor (passing os.open as *opener* results in functionality</span><br><span class=\"line\">    similar to passing None).</span><br><span class=\"line\"></span><br><span class=\"line\">    open() returns a file object whose type depends on the mode, and</span><br><span class=\"line\">    through which the standard file operations such as reading and writing</span><br><span class=\"line\">    are performed. When open() is used to open a file in a text mode (&apos;w&apos;,</span><br><span class=\"line\">    &apos;r&apos;, &apos;wt&apos;, &apos;rt&apos;, etc.), it returns a TextIOWrapper. When used to open</span><br><span class=\"line\">    a file in a binary mode, the returned class varies: in read binary</span><br><span class=\"line\">    mode, it returns a BufferedReader; in write binary and append binary</span><br><span class=\"line\">    modes, it returns a BufferedWriter, and in read/write mode, it returns</span><br><span class=\"line\">    a BufferedRandom.</span><br><span class=\"line\"></span><br><span class=\"line\">    It is also possible to use a string or bytearray as a file for both</span><br><span class=\"line\">    reading and writing. For strings StringIO can be used like a file</span><br><span class=\"line\">    opened in a text mode, and for bytes a BytesIO can be used like a file</span><br><span class=\"line\">    opened in a binary mode.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"errors参数的说明\"><a href=\"#errors参数的说明\" class=\"headerlink\" title=\"errors参数的说明\"></a>errors参数的说明</h3><p>参数errors是用来指明编码和解码错误时怎么样处理。不能在二进制的模式下使用。</p>\n<p>1）当指明为’strict’时，编码出错则抛出异常ValueError。</p>\n<p>2）当指明为’ignore’时，忽略错误。</p>\n<p>3）当指明为’replace’时，使用某字符进行替代模式，比如使用’?’来替换出错的。</p>\n<p>4）其它相应还有surrogateescape/xmlcharrefreplacs/backslashreplace。</p>"},{"title":"logging日志模块配置/使用/禁用","comments":1,"toc":true,"date":"2018-08-02T06:02:03.000Z","_content":"在项目开发中，调试是必不可少的，logging模块为我们调试提供了极大的便利。<!--more-->\n### logging模块的简单配置\n#### 日志等级\nlogging提供了5个日志等级，利用不同的日志函数，消息可以按某个等级记入日志\n\n|级别|日志函数|描述|\n|-----|----|----|\n|DEBUG|logging.debug()|最低级别。用于小细节。通常只有在诊断问题时，你才会关心这些消息|\n|INFO|logging.info()|用于记录程序中一般事件的信息，或确认一切工作正常|\n|WARNNING|logging.warning()|用于表示可能的问题，它不会阻止程序的工作，但将来可能会|\n|ERROR|logging.error()|用于记录错误，它导致程序做某事失败|\n|CRITICAL|logging.critical()|最高级别。用于表示致命的错误，它导致或将要导致程序完全停止工作|\n\n```\nimport logging\n# logging初始化\nlogging.basicConfig()\n```\n#### 创建logging实例对象\n```\nlogger = logging.getLogger()\n```\n#### 设置级别\n```\nlogger.setLevel(logging.DEBUG)\n```\n#### 指定logger实例对象的handler\n在日志文件达到指定的大小后将清空原来的日志文件，比如log.1设置了1M，满1M后将新建log.2进行记录日志，如此循环\n```\nfrom logging import handlers\n# 创建handler对象，指定日志文件位置以及大小，日志份数\nhandler = handlers.RotatingFileHandler(\"logs/log\", maxBytes=1024*50, backupCount=5)\n# 指定handler对象的日志输出格式\nhandler.setFormatter(logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(lineno)s - %(message)s\"))\n```\n#### logger实例对象添加handler\n```\nlogger.addHandler(handler)\n```\n#### 完整代码\n```\nimport logging\nfrom logging import handlers\n# logging初始化\nlogging.basicConfig()\n# 创建logger实例对象\nlogger = logging.getLogger()\n# 设置logger对象调试级别\nlogger.setLevel(logging.DEBUG)\n# 为logger对象创建handler对象，指定日志文件位置以及大小，日志份数\nhandler = handlers.RotatingFileHandler(\"logs/log\", maxBytes=1024*50, backupCount=5)\n# 指定handler对象的日志输出格式\nhandler.setFormatter(logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(lineno)s - %(message)s\"))\n# 把handler绑定到logger对象中\nlogger.addHandler(handler)\n```\n### logger日志使用\n现在我们就可以把需要的日志信息通过调用logging提供的函数写入到日志文件中\n```\nn = 0\ntry:\n    print(10 / n)\nexcept Exception as e:\n    print('e:',e)\n    logging.error(e)\nlogger.error(\"发生错误\")\n\n```\n查看日志文件\n```\n2018-08-02 13:54:30,576 - root - ERROR - 24 - division by zero\n2018-08-02 13:54:30,576 - root - ERROR - 25 - 发生错误\n\n```\n#### 日志禁用\n只需要在需要禁用日志的地方插入logging.disable(logging.logging_level)即可，后面的logging对应的loggle_level函数都会失效，禁用的级别一定要对应代码中你写的那个级别对应\n##### 当没禁用时\n```\nn = 0\n    try:\n        print(10 / n)\n    except Exception as e:\n        print('e:',e)\n        logging.error(e)\nlogger.error(\"发生错误1\")\n# logging.disable(logging.ERROR)\nlogger.error(\"发生错误2\")\n--------------查看日志文件-----------\n2018-08-02 15:44:35,524 - root - ERROR - 24 - division by zero\n2018-08-02 15:44:35,524 - root - ERROR - 25 - 发生错误\n2018-08-02 15:44:35,524 - root - ERROR - 27 - 发生错误2\n\n```\n##### 禁用后\n```\nn = 0\n    try:\n        print(10 / n)\n    except Exception as e:\n        print('e:',e)\n        logging.error(e)\nlogger.error(\"发生错误1\")\nlogging.disable(logging.ERROR)\nlogger.error(\"发生错误2\")\n--------------查看日志文件-----------\n2018-08-02 15:48:09,237 - root - ERROR - 24 - division by zero\n2018-08-02 15:48:09,237 - root - ERROR - 25 - 发生错误\n\n\n```\n","source":"_posts/logging日志模块配置-使用-禁用.md","raw":"---\ntitle: logging日志模块配置/使用/禁用\ncomments: true\ntoc: true\ncategories:\n- Python\ndate: 2018-08-02 14:02:03\ntags:\n- logging 日志\n---\n在项目开发中，调试是必不可少的，logging模块为我们调试提供了极大的便利。<!--more-->\n### logging模块的简单配置\n#### 日志等级\nlogging提供了5个日志等级，利用不同的日志函数，消息可以按某个等级记入日志\n\n|级别|日志函数|描述|\n|-----|----|----|\n|DEBUG|logging.debug()|最低级别。用于小细节。通常只有在诊断问题时，你才会关心这些消息|\n|INFO|logging.info()|用于记录程序中一般事件的信息，或确认一切工作正常|\n|WARNNING|logging.warning()|用于表示可能的问题，它不会阻止程序的工作，但将来可能会|\n|ERROR|logging.error()|用于记录错误，它导致程序做某事失败|\n|CRITICAL|logging.critical()|最高级别。用于表示致命的错误，它导致或将要导致程序完全停止工作|\n\n```\nimport logging\n# logging初始化\nlogging.basicConfig()\n```\n#### 创建logging实例对象\n```\nlogger = logging.getLogger()\n```\n#### 设置级别\n```\nlogger.setLevel(logging.DEBUG)\n```\n#### 指定logger实例对象的handler\n在日志文件达到指定的大小后将清空原来的日志文件，比如log.1设置了1M，满1M后将新建log.2进行记录日志，如此循环\n```\nfrom logging import handlers\n# 创建handler对象，指定日志文件位置以及大小，日志份数\nhandler = handlers.RotatingFileHandler(\"logs/log\", maxBytes=1024*50, backupCount=5)\n# 指定handler对象的日志输出格式\nhandler.setFormatter(logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(lineno)s - %(message)s\"))\n```\n#### logger实例对象添加handler\n```\nlogger.addHandler(handler)\n```\n#### 完整代码\n```\nimport logging\nfrom logging import handlers\n# logging初始化\nlogging.basicConfig()\n# 创建logger实例对象\nlogger = logging.getLogger()\n# 设置logger对象调试级别\nlogger.setLevel(logging.DEBUG)\n# 为logger对象创建handler对象，指定日志文件位置以及大小，日志份数\nhandler = handlers.RotatingFileHandler(\"logs/log\", maxBytes=1024*50, backupCount=5)\n# 指定handler对象的日志输出格式\nhandler.setFormatter(logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(lineno)s - %(message)s\"))\n# 把handler绑定到logger对象中\nlogger.addHandler(handler)\n```\n### logger日志使用\n现在我们就可以把需要的日志信息通过调用logging提供的函数写入到日志文件中\n```\nn = 0\ntry:\n    print(10 / n)\nexcept Exception as e:\n    print('e:',e)\n    logging.error(e)\nlogger.error(\"发生错误\")\n\n```\n查看日志文件\n```\n2018-08-02 13:54:30,576 - root - ERROR - 24 - division by zero\n2018-08-02 13:54:30,576 - root - ERROR - 25 - 发生错误\n\n```\n#### 日志禁用\n只需要在需要禁用日志的地方插入logging.disable(logging.logging_level)即可，后面的logging对应的loggle_level函数都会失效，禁用的级别一定要对应代码中你写的那个级别对应\n##### 当没禁用时\n```\nn = 0\n    try:\n        print(10 / n)\n    except Exception as e:\n        print('e:',e)\n        logging.error(e)\nlogger.error(\"发生错误1\")\n# logging.disable(logging.ERROR)\nlogger.error(\"发生错误2\")\n--------------查看日志文件-----------\n2018-08-02 15:44:35,524 - root - ERROR - 24 - division by zero\n2018-08-02 15:44:35,524 - root - ERROR - 25 - 发生错误\n2018-08-02 15:44:35,524 - root - ERROR - 27 - 发生错误2\n\n```\n##### 禁用后\n```\nn = 0\n    try:\n        print(10 / n)\n    except Exception as e:\n        print('e:',e)\n        logging.error(e)\nlogger.error(\"发生错误1\")\nlogging.disable(logging.ERROR)\nlogger.error(\"发生错误2\")\n--------------查看日志文件-----------\n2018-08-02 15:48:09,237 - root - ERROR - 24 - division by zero\n2018-08-02 15:48:09,237 - root - ERROR - 25 - 发生错误\n\n\n```\n","slug":"logging日志模块配置-使用-禁用","published":1,"updated":"2019-05-25T09:32:43.104Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtdq0029e5vxs71n79n9","content":"<p>在项目开发中，调试是必不可少的，logging模块为我们调试提供了极大的便利。<a id=\"more\"></a></p>\n<h3 id=\"logging模块的简单配置\"><a href=\"#logging模块的简单配置\" class=\"headerlink\" title=\"logging模块的简单配置\"></a>logging模块的简单配置</h3><h4 id=\"日志等级\"><a href=\"#日志等级\" class=\"headerlink\" title=\"日志等级\"></a>日志等级</h4><p>logging提供了5个日志等级，利用不同的日志函数，消息可以按某个等级记入日志</p>\n<table>\n<thead>\n<tr>\n<th>级别</th>\n<th>日志函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEBUG</td>\n<td>logging.debug()</td>\n<td>最低级别。用于小细节。通常只有在诊断问题时，你才会关心这些消息</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td>logging.info()</td>\n<td>用于记录程序中一般事件的信息，或确认一切工作正常</td>\n</tr>\n<tr>\n<td>WARNNING</td>\n<td>logging.warning()</td>\n<td>用于表示可能的问题，它不会阻止程序的工作，但将来可能会</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>logging.error()</td>\n<td>用于记录错误，它导致程序做某事失败</td>\n</tr>\n<tr>\n<td>CRITICAL</td>\n<td>logging.critical()</td>\n<td>最高级别。用于表示致命的错误，它导致或将要导致程序完全停止工作</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"># logging初始化</span><br><span class=\"line\">logging.basicConfig()</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建logging实例对象\"><a href=\"#创建logging实例对象\" class=\"headerlink\" title=\"创建logging实例对象\"></a>创建logging实例对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger = logging.getLogger()</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置级别\"><a href=\"#设置级别\" class=\"headerlink\" title=\"设置级别\"></a>设置级别</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.setLevel(logging.DEBUG)</span><br></pre></td></tr></table></figure>\n<h4 id=\"指定logger实例对象的handler\"><a href=\"#指定logger实例对象的handler\" class=\"headerlink\" title=\"指定logger实例对象的handler\"></a>指定logger实例对象的handler</h4><p>在日志文件达到指定的大小后将清空原来的日志文件，比如log.1设置了1M，满1M后将新建log.2进行记录日志，如此循环<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from logging import handlers</span><br><span class=\"line\"># 创建handler对象，指定日志文件位置以及大小，日志份数</span><br><span class=\"line\">handler = handlers.RotatingFileHandler(&quot;logs/log&quot;, maxBytes=1024*50, backupCount=5)</span><br><span class=\"line\"># 指定handler对象的日志输出格式</span><br><span class=\"line\">handler.setFormatter(logging.Formatter(&quot;%(asctime)s - %(name)s - %(levelname)s - %(lineno)s - %(message)s&quot;))</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"logger实例对象添加handler\"><a href=\"#logger实例对象添加handler\" class=\"headerlink\" title=\"logger实例对象添加handler\"></a>logger实例对象添加handler</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.addHandler(handler)</span><br></pre></td></tr></table></figure>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\">from logging import handlers</span><br><span class=\"line\"># logging初始化</span><br><span class=\"line\">logging.basicConfig()</span><br><span class=\"line\"># 创建logger实例对象</span><br><span class=\"line\">logger = logging.getLogger()</span><br><span class=\"line\"># 设置logger对象调试级别</span><br><span class=\"line\">logger.setLevel(logging.DEBUG)</span><br><span class=\"line\"># 为logger对象创建handler对象，指定日志文件位置以及大小，日志份数</span><br><span class=\"line\">handler = handlers.RotatingFileHandler(&quot;logs/log&quot;, maxBytes=1024*50, backupCount=5)</span><br><span class=\"line\"># 指定handler对象的日志输出格式</span><br><span class=\"line\">handler.setFormatter(logging.Formatter(&quot;%(asctime)s - %(name)s - %(levelname)s - %(lineno)s - %(message)s&quot;))</span><br><span class=\"line\"># 把handler绑定到logger对象中</span><br><span class=\"line\">logger.addHandler(handler)</span><br></pre></td></tr></table></figure>\n<h3 id=\"logger日志使用\"><a href=\"#logger日志使用\" class=\"headerlink\" title=\"logger日志使用\"></a>logger日志使用</h3><p>现在我们就可以把需要的日志信息通过调用logging提供的函数写入到日志文件中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = 0</span><br><span class=\"line\">try:</span><br><span class=\"line\">    print(10 / n)</span><br><span class=\"line\">except Exception as e:</span><br><span class=\"line\">    print(&apos;e:&apos;,e)</span><br><span class=\"line\">    logging.error(e)</span><br><span class=\"line\">logger.error(&quot;发生错误&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>查看日志文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-08-02 13:54:30,576 - root - ERROR - 24 - division by zero</span><br><span class=\"line\">2018-08-02 13:54:30,576 - root - ERROR - 25 - 发生错误</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"日志禁用\"><a href=\"#日志禁用\" class=\"headerlink\" title=\"日志禁用\"></a>日志禁用</h4><p>只需要在需要禁用日志的地方插入logging.disable(logging.logging_level)即可，后面的logging对应的loggle_level函数都会失效，禁用的级别一定要对应代码中你写的那个级别对应</p>\n<h5 id=\"当没禁用时\"><a href=\"#当没禁用时\" class=\"headerlink\" title=\"当没禁用时\"></a>当没禁用时</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = 0</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        print(10 / n)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(&apos;e:&apos;,e)</span><br><span class=\"line\">        logging.error(e)</span><br><span class=\"line\">logger.error(&quot;发生错误1&quot;)</span><br><span class=\"line\"># logging.disable(logging.ERROR)</span><br><span class=\"line\">logger.error(&quot;发生错误2&quot;)</span><br><span class=\"line\">--------------查看日志文件-----------</span><br><span class=\"line\">2018-08-02 15:44:35,524 - root - ERROR - 24 - division by zero</span><br><span class=\"line\">2018-08-02 15:44:35,524 - root - ERROR - 25 - 发生错误</span><br><span class=\"line\">2018-08-02 15:44:35,524 - root - ERROR - 27 - 发生错误2</span><br></pre></td></tr></table></figure>\n<h5 id=\"禁用后\"><a href=\"#禁用后\" class=\"headerlink\" title=\"禁用后\"></a>禁用后</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = 0</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        print(10 / n)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(&apos;e:&apos;,e)</span><br><span class=\"line\">        logging.error(e)</span><br><span class=\"line\">logger.error(&quot;发生错误1&quot;)</span><br><span class=\"line\">logging.disable(logging.ERROR)</span><br><span class=\"line\">logger.error(&quot;发生错误2&quot;)</span><br><span class=\"line\">--------------查看日志文件-----------</span><br><span class=\"line\">2018-08-02 15:48:09,237 - root - ERROR - 24 - division by zero</span><br><span class=\"line\">2018-08-02 15:48:09,237 - root - ERROR - 25 - 发生错误</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在项目开发中，调试是必不可少的，logging模块为我们调试提供了极大的便利。","more":"</p>\n<h3 id=\"logging模块的简单配置\"><a href=\"#logging模块的简单配置\" class=\"headerlink\" title=\"logging模块的简单配置\"></a>logging模块的简单配置</h3><h4 id=\"日志等级\"><a href=\"#日志等级\" class=\"headerlink\" title=\"日志等级\"></a>日志等级</h4><p>logging提供了5个日志等级，利用不同的日志函数，消息可以按某个等级记入日志</p>\n<table>\n<thead>\n<tr>\n<th>级别</th>\n<th>日志函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEBUG</td>\n<td>logging.debug()</td>\n<td>最低级别。用于小细节。通常只有在诊断问题时，你才会关心这些消息</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td>logging.info()</td>\n<td>用于记录程序中一般事件的信息，或确认一切工作正常</td>\n</tr>\n<tr>\n<td>WARNNING</td>\n<td>logging.warning()</td>\n<td>用于表示可能的问题，它不会阻止程序的工作，但将来可能会</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>logging.error()</td>\n<td>用于记录错误，它导致程序做某事失败</td>\n</tr>\n<tr>\n<td>CRITICAL</td>\n<td>logging.critical()</td>\n<td>最高级别。用于表示致命的错误，它导致或将要导致程序完全停止工作</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"># logging初始化</span><br><span class=\"line\">logging.basicConfig()</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建logging实例对象\"><a href=\"#创建logging实例对象\" class=\"headerlink\" title=\"创建logging实例对象\"></a>创建logging实例对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger = logging.getLogger()</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置级别\"><a href=\"#设置级别\" class=\"headerlink\" title=\"设置级别\"></a>设置级别</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.setLevel(logging.DEBUG)</span><br></pre></td></tr></table></figure>\n<h4 id=\"指定logger实例对象的handler\"><a href=\"#指定logger实例对象的handler\" class=\"headerlink\" title=\"指定logger实例对象的handler\"></a>指定logger实例对象的handler</h4><p>在日志文件达到指定的大小后将清空原来的日志文件，比如log.1设置了1M，满1M后将新建log.2进行记录日志，如此循环<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from logging import handlers</span><br><span class=\"line\"># 创建handler对象，指定日志文件位置以及大小，日志份数</span><br><span class=\"line\">handler = handlers.RotatingFileHandler(&quot;logs/log&quot;, maxBytes=1024*50, backupCount=5)</span><br><span class=\"line\"># 指定handler对象的日志输出格式</span><br><span class=\"line\">handler.setFormatter(logging.Formatter(&quot;%(asctime)s - %(name)s - %(levelname)s - %(lineno)s - %(message)s&quot;))</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"logger实例对象添加handler\"><a href=\"#logger实例对象添加handler\" class=\"headerlink\" title=\"logger实例对象添加handler\"></a>logger实例对象添加handler</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.addHandler(handler)</span><br></pre></td></tr></table></figure>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\">from logging import handlers</span><br><span class=\"line\"># logging初始化</span><br><span class=\"line\">logging.basicConfig()</span><br><span class=\"line\"># 创建logger实例对象</span><br><span class=\"line\">logger = logging.getLogger()</span><br><span class=\"line\"># 设置logger对象调试级别</span><br><span class=\"line\">logger.setLevel(logging.DEBUG)</span><br><span class=\"line\"># 为logger对象创建handler对象，指定日志文件位置以及大小，日志份数</span><br><span class=\"line\">handler = handlers.RotatingFileHandler(&quot;logs/log&quot;, maxBytes=1024*50, backupCount=5)</span><br><span class=\"line\"># 指定handler对象的日志输出格式</span><br><span class=\"line\">handler.setFormatter(logging.Formatter(&quot;%(asctime)s - %(name)s - %(levelname)s - %(lineno)s - %(message)s&quot;))</span><br><span class=\"line\"># 把handler绑定到logger对象中</span><br><span class=\"line\">logger.addHandler(handler)</span><br></pre></td></tr></table></figure>\n<h3 id=\"logger日志使用\"><a href=\"#logger日志使用\" class=\"headerlink\" title=\"logger日志使用\"></a>logger日志使用</h3><p>现在我们就可以把需要的日志信息通过调用logging提供的函数写入到日志文件中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = 0</span><br><span class=\"line\">try:</span><br><span class=\"line\">    print(10 / n)</span><br><span class=\"line\">except Exception as e:</span><br><span class=\"line\">    print(&apos;e:&apos;,e)</span><br><span class=\"line\">    logging.error(e)</span><br><span class=\"line\">logger.error(&quot;发生错误&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>查看日志文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-08-02 13:54:30,576 - root - ERROR - 24 - division by zero</span><br><span class=\"line\">2018-08-02 13:54:30,576 - root - ERROR - 25 - 发生错误</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"日志禁用\"><a href=\"#日志禁用\" class=\"headerlink\" title=\"日志禁用\"></a>日志禁用</h4><p>只需要在需要禁用日志的地方插入logging.disable(logging.logging_level)即可，后面的logging对应的loggle_level函数都会失效，禁用的级别一定要对应代码中你写的那个级别对应</p>\n<h5 id=\"当没禁用时\"><a href=\"#当没禁用时\" class=\"headerlink\" title=\"当没禁用时\"></a>当没禁用时</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = 0</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        print(10 / n)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(&apos;e:&apos;,e)</span><br><span class=\"line\">        logging.error(e)</span><br><span class=\"line\">logger.error(&quot;发生错误1&quot;)</span><br><span class=\"line\"># logging.disable(logging.ERROR)</span><br><span class=\"line\">logger.error(&quot;发生错误2&quot;)</span><br><span class=\"line\">--------------查看日志文件-----------</span><br><span class=\"line\">2018-08-02 15:44:35,524 - root - ERROR - 24 - division by zero</span><br><span class=\"line\">2018-08-02 15:44:35,524 - root - ERROR - 25 - 发生错误</span><br><span class=\"line\">2018-08-02 15:44:35,524 - root - ERROR - 27 - 发生错误2</span><br></pre></td></tr></table></figure>\n<h5 id=\"禁用后\"><a href=\"#禁用后\" class=\"headerlink\" title=\"禁用后\"></a>禁用后</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = 0</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        print(10 / n)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(&apos;e:&apos;,e)</span><br><span class=\"line\">        logging.error(e)</span><br><span class=\"line\">logger.error(&quot;发生错误1&quot;)</span><br><span class=\"line\">logging.disable(logging.ERROR)</span><br><span class=\"line\">logger.error(&quot;发生错误2&quot;)</span><br><span class=\"line\">--------------查看日志文件-----------</span><br><span class=\"line\">2018-08-02 15:48:09,237 - root - ERROR - 24 - division by zero</span><br><span class=\"line\">2018-08-02 15:48:09,237 - root - ERROR - 25 - 发生错误</span><br></pre></td></tr></table></figure>"},{"title":"namedtuple的妙用","comments":1,"date":"2018-11-27T11:17:22.000Z","_content":"\n上一次介绍了后台开发神器，**sqlacodegen神器**，**一行命令获取数据库所有表的模型类**。\n今天介绍**collections里面的一个好用的小函数: namedtuple函数(不创类而可以拥有类的便利)**，例如可以使用**object.attribute**\n<!--more-->\n### 先看演示\n**像类一样的访问属性**\n```\nfrom collections import namedtuple\n\nFriend = namedtuple('Friend', ['name', 'gender', 'address', 'star', 'signature'])\n\nRidingRoad = Friend('RidingRoad', 'male', 'Mars', 'The five-star high praise',\n                    'Change the world by Program!\\n'\n                    'Do what you like!\\n'\n                    'Live what you want!')\n\nprint(RidingRoad.name)\nprint(RidingRoad.gender)\nprint(RidingRoad.address)\nprint(RidingRoad.star)\nprint(RidingRoad.signature)\n\nRidingRoad\nmale\nMars\nThe five-star high praise\nChange the world by Program!\nDo what you like!\nLive what you want!\n```\n### 类似字典的访问\n**像字典一样访问items、keys、values**\n```\nfor key, value in RidingRoad.__dict__.items():\n    print(key, value)\n\nprint(\"*\" * 30)\n\nfor key in RidingRoad.__dict__.keys():\n    print('{}: '.format(key), eval('RidingRoad.{}'.format(key)))\n\nprint(\"*\" * 30)\n\nfor value in RidingRoad.__dict__.values():\n    print(value)\n\n('name', 'RidingRoad')\n('gender', 'male')\n('address', 'Mars')\n('star', 'The five-star high praise')\n('signature', 'Change the world by Program!\\nDo what you like!\\nLive what you want!')\n******************************\n('name: ', 'RidingRoad')\n('gender: ', 'male')\n('address: ', 'Mars')\n('star: ', 'The five-star high praise')\n('signature: ', 'Change the world by Program!\\nDo what you like!\\nLive what you want!')\n******************************\nRidingRoad\nmale\nMars\nThe five-star high praise\nChange the world by Program!\nDo what you like!\nLive what you want!\n\n```\n### 为什么可以这样？\n到这里，你应该会有两个疑问：\n1. **为什么有类的影子？**\n2. **为什么有字典的影子？**\n### 源码解析\n#### 为什么有类的影子？\n看源码的_class_template部分，其实函数内部为我们创了一个类了\n```\n# Fill-in the class template\n    class_definition = _class_template.format(\n        typename = typename,\n        field_names = tuple(field_names),\n        num_fields = len(field_names),\n        arg_list = repr(tuple(field_names)).replace(\"'\", \"\")[1:-1],\n        repr_fmt = ', '.join(_repr_template.format(name=name)\n                             for name in field_names),\n        field_defs = '\\n'.join(_field_template.format(index=index, name=name)\n                               for index, name in enumerate(field_names))\n    )\n    if verbose:\n        print class_definition\n```\n**然后_class_template干了什么？对类进行定义**\n```\n_class_template = '''\\\nclass {typename}(tuple):\n    '{typename}({arg_list})'\n\n    __slots__ = ()\n\n    _fields = {field_names!r}\n\n    def __new__(_cls, {arg_list}):\n        'Create new instance of {typename}({arg_list})'\n        return _tuple.__new__(_cls, ({arg_list}))\n\n    @classmethod\n    def _make(cls, iterable, new=tuple.__new__, len=len):\n        'Make a new {typename} object from a sequence or iterable'\n        result = new(cls, iterable)\n        if len(result) != {num_fields:d}:\n            raise TypeError('Expected {num_fields:d} arguments, got %d' % len(result))\n        return result\n\n    def __repr__(self):\n        'Return a nicely formatted representation string'\n        return '{typename}({repr_fmt})' % self\n\n    def _asdict(self):\n        'Return a new OrderedDict which maps field names to their values'\n        return OrderedDict(zip(self._fields, self))\n\n    def _replace(_self, **kwds):\n        'Return a new {typename} object replacing specified fields with new values'\n        result = _self._make(map(kwds.pop, {field_names!r}, _self))\n        if kwds:\n            raise ValueError('Got unexpected field names: %r' % kwds.keys())\n        return result\n\n    def __getnewargs__(self):\n        'Return self as a plain tuple.  Used by copy and pickle.'\n        return tuple(self)\n\n    __dict__ = _property(_asdict)\n\n    def __getstate__(self):\n        'Exclude the OrderedDict from pickling'\n        pass\n\n{field_defs}\n'''\n```\n#### 为什么有字典的影子？\n看源码的 _asdict部分，这里封装成了有序字典，所以我们可以通过\\_\\_dict\\_\\_访问字典的特性了\n```\n__dict__ = _property(_asdict)\n def _asdict(self):\n        'Return a new OrderedDict which maps field names to their values'\n        return OrderedDict(zip(self._fields, self))\n```\n### Python全面学习资料\n公众号\"Python孙行者\"后台回复”电子书“即可。如果你有什么好东西好神器，欢迎后台私信，以后总结随文分享，一个人很渺小，有你的参与==>人从众众众众众众众\n![](https://i.loli.net/2018/11/27/5bfd27354b6d3.png)\n\n\n\n\n","source":"_posts/namedtuple的妙用.md","raw":"---\ntitle: namedtuple的妙用\ncomments: true\ndate: 2018-11-27 19:17:22\ntags:\n- namedtuple\ncategories:\n- Python\n---\n\n上一次介绍了后台开发神器，**sqlacodegen神器**，**一行命令获取数据库所有表的模型类**。\n今天介绍**collections里面的一个好用的小函数: namedtuple函数(不创类而可以拥有类的便利)**，例如可以使用**object.attribute**\n<!--more-->\n### 先看演示\n**像类一样的访问属性**\n```\nfrom collections import namedtuple\n\nFriend = namedtuple('Friend', ['name', 'gender', 'address', 'star', 'signature'])\n\nRidingRoad = Friend('RidingRoad', 'male', 'Mars', 'The five-star high praise',\n                    'Change the world by Program!\\n'\n                    'Do what you like!\\n'\n                    'Live what you want!')\n\nprint(RidingRoad.name)\nprint(RidingRoad.gender)\nprint(RidingRoad.address)\nprint(RidingRoad.star)\nprint(RidingRoad.signature)\n\nRidingRoad\nmale\nMars\nThe five-star high praise\nChange the world by Program!\nDo what you like!\nLive what you want!\n```\n### 类似字典的访问\n**像字典一样访问items、keys、values**\n```\nfor key, value in RidingRoad.__dict__.items():\n    print(key, value)\n\nprint(\"*\" * 30)\n\nfor key in RidingRoad.__dict__.keys():\n    print('{}: '.format(key), eval('RidingRoad.{}'.format(key)))\n\nprint(\"*\" * 30)\n\nfor value in RidingRoad.__dict__.values():\n    print(value)\n\n('name', 'RidingRoad')\n('gender', 'male')\n('address', 'Mars')\n('star', 'The five-star high praise')\n('signature', 'Change the world by Program!\\nDo what you like!\\nLive what you want!')\n******************************\n('name: ', 'RidingRoad')\n('gender: ', 'male')\n('address: ', 'Mars')\n('star: ', 'The five-star high praise')\n('signature: ', 'Change the world by Program!\\nDo what you like!\\nLive what you want!')\n******************************\nRidingRoad\nmale\nMars\nThe five-star high praise\nChange the world by Program!\nDo what you like!\nLive what you want!\n\n```\n### 为什么可以这样？\n到这里，你应该会有两个疑问：\n1. **为什么有类的影子？**\n2. **为什么有字典的影子？**\n### 源码解析\n#### 为什么有类的影子？\n看源码的_class_template部分，其实函数内部为我们创了一个类了\n```\n# Fill-in the class template\n    class_definition = _class_template.format(\n        typename = typename,\n        field_names = tuple(field_names),\n        num_fields = len(field_names),\n        arg_list = repr(tuple(field_names)).replace(\"'\", \"\")[1:-1],\n        repr_fmt = ', '.join(_repr_template.format(name=name)\n                             for name in field_names),\n        field_defs = '\\n'.join(_field_template.format(index=index, name=name)\n                               for index, name in enumerate(field_names))\n    )\n    if verbose:\n        print class_definition\n```\n**然后_class_template干了什么？对类进行定义**\n```\n_class_template = '''\\\nclass {typename}(tuple):\n    '{typename}({arg_list})'\n\n    __slots__ = ()\n\n    _fields = {field_names!r}\n\n    def __new__(_cls, {arg_list}):\n        'Create new instance of {typename}({arg_list})'\n        return _tuple.__new__(_cls, ({arg_list}))\n\n    @classmethod\n    def _make(cls, iterable, new=tuple.__new__, len=len):\n        'Make a new {typename} object from a sequence or iterable'\n        result = new(cls, iterable)\n        if len(result) != {num_fields:d}:\n            raise TypeError('Expected {num_fields:d} arguments, got %d' % len(result))\n        return result\n\n    def __repr__(self):\n        'Return a nicely formatted representation string'\n        return '{typename}({repr_fmt})' % self\n\n    def _asdict(self):\n        'Return a new OrderedDict which maps field names to their values'\n        return OrderedDict(zip(self._fields, self))\n\n    def _replace(_self, **kwds):\n        'Return a new {typename} object replacing specified fields with new values'\n        result = _self._make(map(kwds.pop, {field_names!r}, _self))\n        if kwds:\n            raise ValueError('Got unexpected field names: %r' % kwds.keys())\n        return result\n\n    def __getnewargs__(self):\n        'Return self as a plain tuple.  Used by copy and pickle.'\n        return tuple(self)\n\n    __dict__ = _property(_asdict)\n\n    def __getstate__(self):\n        'Exclude the OrderedDict from pickling'\n        pass\n\n{field_defs}\n'''\n```\n#### 为什么有字典的影子？\n看源码的 _asdict部分，这里封装成了有序字典，所以我们可以通过\\_\\_dict\\_\\_访问字典的特性了\n```\n__dict__ = _property(_asdict)\n def _asdict(self):\n        'Return a new OrderedDict which maps field names to their values'\n        return OrderedDict(zip(self._fields, self))\n```\n### Python全面学习资料\n公众号\"Python孙行者\"后台回复”电子书“即可。如果你有什么好东西好神器，欢迎后台私信，以后总结随文分享，一个人很渺小，有你的参与==>人从众众众众众众众\n![](https://i.loli.net/2018/11/27/5bfd27354b6d3.png)\n\n\n\n\n","slug":"namedtuple的妙用","published":1,"updated":"2019-05-25T09:32:43.105Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtds002be5vxw7pq5fb4","content":"<p>上一次介绍了后台开发神器，<strong>sqlacodegen神器</strong>，<strong>一行命令获取数据库所有表的模型类</strong>。<br>今天介绍<strong>collections里面的一个好用的小函数: namedtuple函数(不创类而可以拥有类的便利)</strong>，例如可以使用<strong>object.attribute</strong><br><a id=\"more\"></a></p>\n<h3 id=\"先看演示\"><a href=\"#先看演示\" class=\"headerlink\" title=\"先看演示\"></a>先看演示</h3><p><strong>像类一样的访问属性</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Friend = namedtuple(&apos;Friend&apos;, [&apos;name&apos;, &apos;gender&apos;, &apos;address&apos;, &apos;star&apos;, &apos;signature&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">RidingRoad = Friend(&apos;RidingRoad&apos;, &apos;male&apos;, &apos;Mars&apos;, &apos;The five-star high praise&apos;,</span><br><span class=\"line\">                    &apos;Change the world by Program!\\n&apos;</span><br><span class=\"line\">                    &apos;Do what you like!\\n&apos;</span><br><span class=\"line\">                    &apos;Live what you want!&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(RidingRoad.name)</span><br><span class=\"line\">print(RidingRoad.gender)</span><br><span class=\"line\">print(RidingRoad.address)</span><br><span class=\"line\">print(RidingRoad.star)</span><br><span class=\"line\">print(RidingRoad.signature)</span><br><span class=\"line\"></span><br><span class=\"line\">RidingRoad</span><br><span class=\"line\">male</span><br><span class=\"line\">Mars</span><br><span class=\"line\">The five-star high praise</span><br><span class=\"line\">Change the world by Program!</span><br><span class=\"line\">Do what you like!</span><br><span class=\"line\">Live what you want!</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"类似字典的访问\"><a href=\"#类似字典的访问\" class=\"headerlink\" title=\"类似字典的访问\"></a>类似字典的访问</h3><p><strong>像字典一样访问items、keys、values</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for key, value in RidingRoad.__dict__.items():</span><br><span class=\"line\">    print(key, value)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot; * 30)</span><br><span class=\"line\"></span><br><span class=\"line\">for key in RidingRoad.__dict__.keys():</span><br><span class=\"line\">    print(&apos;&#123;&#125;: &apos;.format(key), eval(&apos;RidingRoad.&#123;&#125;&apos;.format(key)))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot; * 30)</span><br><span class=\"line\"></span><br><span class=\"line\">for value in RidingRoad.__dict__.values():</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\"></span><br><span class=\"line\">(&apos;name&apos;, &apos;RidingRoad&apos;)</span><br><span class=\"line\">(&apos;gender&apos;, &apos;male&apos;)</span><br><span class=\"line\">(&apos;address&apos;, &apos;Mars&apos;)</span><br><span class=\"line\">(&apos;star&apos;, &apos;The five-star high praise&apos;)</span><br><span class=\"line\">(&apos;signature&apos;, &apos;Change the world by Program!\\nDo what you like!\\nLive what you want!&apos;)</span><br><span class=\"line\">******************************</span><br><span class=\"line\">(&apos;name: &apos;, &apos;RidingRoad&apos;)</span><br><span class=\"line\">(&apos;gender: &apos;, &apos;male&apos;)</span><br><span class=\"line\">(&apos;address: &apos;, &apos;Mars&apos;)</span><br><span class=\"line\">(&apos;star: &apos;, &apos;The five-star high praise&apos;)</span><br><span class=\"line\">(&apos;signature: &apos;, &apos;Change the world by Program!\\nDo what you like!\\nLive what you want!&apos;)</span><br><span class=\"line\">******************************</span><br><span class=\"line\">RidingRoad</span><br><span class=\"line\">male</span><br><span class=\"line\">Mars</span><br><span class=\"line\">The five-star high praise</span><br><span class=\"line\">Change the world by Program!</span><br><span class=\"line\">Do what you like!</span><br><span class=\"line\">Live what you want!</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"为什么可以这样？\"><a href=\"#为什么可以这样？\" class=\"headerlink\" title=\"为什么可以这样？\"></a>为什么可以这样？</h3><p>到这里，你应该会有两个疑问：</p>\n<ol>\n<li><strong>为什么有类的影子？</strong></li>\n<li><strong>为什么有字典的影子？</strong><h3 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h3><h4 id=\"为什么有类的影子？\"><a href=\"#为什么有类的影子？\" class=\"headerlink\" title=\"为什么有类的影子？\"></a>为什么有类的影子？</h4>看源码的_class_template部分，其实函数内部为我们创了一个类了<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Fill-in the class template</span><br><span class=\"line\">    class_definition = _class_template.format(</span><br><span class=\"line\">        typename = typename,</span><br><span class=\"line\">        field_names = tuple(field_names),</span><br><span class=\"line\">        num_fields = len(field_names),</span><br><span class=\"line\">        arg_list = repr(tuple(field_names)).replace(&quot;&apos;&quot;, &quot;&quot;)[1:-1],</span><br><span class=\"line\">        repr_fmt = &apos;, &apos;.join(_repr_template.format(name=name)</span><br><span class=\"line\">                             for name in field_names),</span><br><span class=\"line\">        field_defs = &apos;\\n&apos;.join(_field_template.format(index=index, name=name)</span><br><span class=\"line\">                               for index, name in enumerate(field_names))</span><br><span class=\"line\">    )</span><br><span class=\"line\">    if verbose:</span><br><span class=\"line\">        print class_definition</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>然后_class_template干了什么？对类进行定义</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_class_template = &apos;&apos;&apos;\\</span><br><span class=\"line\">class &#123;typename&#125;(tuple):</span><br><span class=\"line\">    &apos;&#123;typename&#125;(&#123;arg_list&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    __slots__ = ()</span><br><span class=\"line\"></span><br><span class=\"line\">    _fields = &#123;field_names!r&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    def __new__(_cls, &#123;arg_list&#125;):</span><br><span class=\"line\">        &apos;Create new instance of &#123;typename&#125;(&#123;arg_list&#125;)&apos;</span><br><span class=\"line\">        return _tuple.__new__(_cls, (&#123;arg_list&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def _make(cls, iterable, new=tuple.__new__, len=len):</span><br><span class=\"line\">        &apos;Make a new &#123;typename&#125; object from a sequence or iterable&apos;</span><br><span class=\"line\">        result = new(cls, iterable)</span><br><span class=\"line\">        if len(result) != &#123;num_fields:d&#125;:</span><br><span class=\"line\">            raise TypeError(&apos;Expected &#123;num_fields:d&#125; arguments, got %d&apos; % len(result))</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        &apos;Return a nicely formatted representation string&apos;</span><br><span class=\"line\">        return &apos;&#123;typename&#125;(&#123;repr_fmt&#125;)&apos; % self</span><br><span class=\"line\"></span><br><span class=\"line\">    def _asdict(self):</span><br><span class=\"line\">        &apos;Return a new OrderedDict which maps field names to their values&apos;</span><br><span class=\"line\">        return OrderedDict(zip(self._fields, self))</span><br><span class=\"line\"></span><br><span class=\"line\">    def _replace(_self, **kwds):</span><br><span class=\"line\">        &apos;Return a new &#123;typename&#125; object replacing specified fields with new values&apos;</span><br><span class=\"line\">        result = _self._make(map(kwds.pop, &#123;field_names!r&#125;, _self))</span><br><span class=\"line\">        if kwds:</span><br><span class=\"line\">            raise ValueError(&apos;Got unexpected field names: %r&apos; % kwds.keys())</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def __getnewargs__(self):</span><br><span class=\"line\">        &apos;Return self as a plain tuple.  Used by copy and pickle.&apos;</span><br><span class=\"line\">        return tuple(self)</span><br><span class=\"line\"></span><br><span class=\"line\">    __dict__ = _property(_asdict)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __getstate__(self):</span><br><span class=\"line\">        &apos;Exclude the OrderedDict from pickling&apos;</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;field_defs&#125;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"为什么有字典的影子？\"><a href=\"#为什么有字典的影子？\" class=\"headerlink\" title=\"为什么有字典的影子？\"></a>为什么有字典的影子？</h4><p>看源码的 <em>asdict部分，这里封装成了有序字典，所以我们可以通过\\</em>_dict__访问字典的特性了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__dict__ = _property(_asdict)</span><br><span class=\"line\"> def _asdict(self):</span><br><span class=\"line\">        &apos;Return a new OrderedDict which maps field names to their values&apos;</span><br><span class=\"line\">        return OrderedDict(zip(self._fields, self))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python全面学习资料\"><a href=\"#Python全面学习资料\" class=\"headerlink\" title=\"Python全面学习资料\"></a>Python全面学习资料</h3><p>公众号”Python孙行者”后台回复”电子书“即可。如果你有什么好东西好神器，欢迎后台私信，以后总结随文分享，一个人很渺小，有你的参与==&gt;人从众众众众众众众<br><img src=\"https://i.loli.net/2018/11/27/5bfd27354b6d3.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>上一次介绍了后台开发神器，<strong>sqlacodegen神器</strong>，<strong>一行命令获取数据库所有表的模型类</strong>。<br>今天介绍<strong>collections里面的一个好用的小函数: namedtuple函数(不创类而可以拥有类的便利)</strong>，例如可以使用<strong>object.attribute</strong><br>","more":"</p>\n<h3 id=\"先看演示\"><a href=\"#先看演示\" class=\"headerlink\" title=\"先看演示\"></a>先看演示</h3><p><strong>像类一样的访问属性</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Friend = namedtuple(&apos;Friend&apos;, [&apos;name&apos;, &apos;gender&apos;, &apos;address&apos;, &apos;star&apos;, &apos;signature&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">RidingRoad = Friend(&apos;RidingRoad&apos;, &apos;male&apos;, &apos;Mars&apos;, &apos;The five-star high praise&apos;,</span><br><span class=\"line\">                    &apos;Change the world by Program!\\n&apos;</span><br><span class=\"line\">                    &apos;Do what you like!\\n&apos;</span><br><span class=\"line\">                    &apos;Live what you want!&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(RidingRoad.name)</span><br><span class=\"line\">print(RidingRoad.gender)</span><br><span class=\"line\">print(RidingRoad.address)</span><br><span class=\"line\">print(RidingRoad.star)</span><br><span class=\"line\">print(RidingRoad.signature)</span><br><span class=\"line\"></span><br><span class=\"line\">RidingRoad</span><br><span class=\"line\">male</span><br><span class=\"line\">Mars</span><br><span class=\"line\">The five-star high praise</span><br><span class=\"line\">Change the world by Program!</span><br><span class=\"line\">Do what you like!</span><br><span class=\"line\">Live what you want!</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"类似字典的访问\"><a href=\"#类似字典的访问\" class=\"headerlink\" title=\"类似字典的访问\"></a>类似字典的访问</h3><p><strong>像字典一样访问items、keys、values</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for key, value in RidingRoad.__dict__.items():</span><br><span class=\"line\">    print(key, value)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot; * 30)</span><br><span class=\"line\"></span><br><span class=\"line\">for key in RidingRoad.__dict__.keys():</span><br><span class=\"line\">    print(&apos;&#123;&#125;: &apos;.format(key), eval(&apos;RidingRoad.&#123;&#125;&apos;.format(key)))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot; * 30)</span><br><span class=\"line\"></span><br><span class=\"line\">for value in RidingRoad.__dict__.values():</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\"></span><br><span class=\"line\">(&apos;name&apos;, &apos;RidingRoad&apos;)</span><br><span class=\"line\">(&apos;gender&apos;, &apos;male&apos;)</span><br><span class=\"line\">(&apos;address&apos;, &apos;Mars&apos;)</span><br><span class=\"line\">(&apos;star&apos;, &apos;The five-star high praise&apos;)</span><br><span class=\"line\">(&apos;signature&apos;, &apos;Change the world by Program!\\nDo what you like!\\nLive what you want!&apos;)</span><br><span class=\"line\">******************************</span><br><span class=\"line\">(&apos;name: &apos;, &apos;RidingRoad&apos;)</span><br><span class=\"line\">(&apos;gender: &apos;, &apos;male&apos;)</span><br><span class=\"line\">(&apos;address: &apos;, &apos;Mars&apos;)</span><br><span class=\"line\">(&apos;star: &apos;, &apos;The five-star high praise&apos;)</span><br><span class=\"line\">(&apos;signature: &apos;, &apos;Change the world by Program!\\nDo what you like!\\nLive what you want!&apos;)</span><br><span class=\"line\">******************************</span><br><span class=\"line\">RidingRoad</span><br><span class=\"line\">male</span><br><span class=\"line\">Mars</span><br><span class=\"line\">The five-star high praise</span><br><span class=\"line\">Change the world by Program!</span><br><span class=\"line\">Do what you like!</span><br><span class=\"line\">Live what you want!</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"为什么可以这样？\"><a href=\"#为什么可以这样？\" class=\"headerlink\" title=\"为什么可以这样？\"></a>为什么可以这样？</h3><p>到这里，你应该会有两个疑问：</p>\n<ol>\n<li><strong>为什么有类的影子？</strong></li>\n<li><strong>为什么有字典的影子？</strong><h3 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h3><h4 id=\"为什么有类的影子？\"><a href=\"#为什么有类的影子？\" class=\"headerlink\" title=\"为什么有类的影子？\"></a>为什么有类的影子？</h4>看源码的_class_template部分，其实函数内部为我们创了一个类了<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Fill-in the class template</span><br><span class=\"line\">    class_definition = _class_template.format(</span><br><span class=\"line\">        typename = typename,</span><br><span class=\"line\">        field_names = tuple(field_names),</span><br><span class=\"line\">        num_fields = len(field_names),</span><br><span class=\"line\">        arg_list = repr(tuple(field_names)).replace(&quot;&apos;&quot;, &quot;&quot;)[1:-1],</span><br><span class=\"line\">        repr_fmt = &apos;, &apos;.join(_repr_template.format(name=name)</span><br><span class=\"line\">                             for name in field_names),</span><br><span class=\"line\">        field_defs = &apos;\\n&apos;.join(_field_template.format(index=index, name=name)</span><br><span class=\"line\">                               for index, name in enumerate(field_names))</span><br><span class=\"line\">    )</span><br><span class=\"line\">    if verbose:</span><br><span class=\"line\">        print class_definition</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>然后_class_template干了什么？对类进行定义</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_class_template = &apos;&apos;&apos;\\</span><br><span class=\"line\">class &#123;typename&#125;(tuple):</span><br><span class=\"line\">    &apos;&#123;typename&#125;(&#123;arg_list&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    __slots__ = ()</span><br><span class=\"line\"></span><br><span class=\"line\">    _fields = &#123;field_names!r&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    def __new__(_cls, &#123;arg_list&#125;):</span><br><span class=\"line\">        &apos;Create new instance of &#123;typename&#125;(&#123;arg_list&#125;)&apos;</span><br><span class=\"line\">        return _tuple.__new__(_cls, (&#123;arg_list&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def _make(cls, iterable, new=tuple.__new__, len=len):</span><br><span class=\"line\">        &apos;Make a new &#123;typename&#125; object from a sequence or iterable&apos;</span><br><span class=\"line\">        result = new(cls, iterable)</span><br><span class=\"line\">        if len(result) != &#123;num_fields:d&#125;:</span><br><span class=\"line\">            raise TypeError(&apos;Expected &#123;num_fields:d&#125; arguments, got %d&apos; % len(result))</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        &apos;Return a nicely formatted representation string&apos;</span><br><span class=\"line\">        return &apos;&#123;typename&#125;(&#123;repr_fmt&#125;)&apos; % self</span><br><span class=\"line\"></span><br><span class=\"line\">    def _asdict(self):</span><br><span class=\"line\">        &apos;Return a new OrderedDict which maps field names to their values&apos;</span><br><span class=\"line\">        return OrderedDict(zip(self._fields, self))</span><br><span class=\"line\"></span><br><span class=\"line\">    def _replace(_self, **kwds):</span><br><span class=\"line\">        &apos;Return a new &#123;typename&#125; object replacing specified fields with new values&apos;</span><br><span class=\"line\">        result = _self._make(map(kwds.pop, &#123;field_names!r&#125;, _self))</span><br><span class=\"line\">        if kwds:</span><br><span class=\"line\">            raise ValueError(&apos;Got unexpected field names: %r&apos; % kwds.keys())</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def __getnewargs__(self):</span><br><span class=\"line\">        &apos;Return self as a plain tuple.  Used by copy and pickle.&apos;</span><br><span class=\"line\">        return tuple(self)</span><br><span class=\"line\"></span><br><span class=\"line\">    __dict__ = _property(_asdict)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __getstate__(self):</span><br><span class=\"line\">        &apos;Exclude the OrderedDict from pickling&apos;</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;field_defs&#125;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"为什么有字典的影子？\"><a href=\"#为什么有字典的影子？\" class=\"headerlink\" title=\"为什么有字典的影子？\"></a>为什么有字典的影子？</h4><p>看源码的 <em>asdict部分，这里封装成了有序字典，所以我们可以通过\\</em>_dict__访问字典的特性了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__dict__ = _property(_asdict)</span><br><span class=\"line\"> def _asdict(self):</span><br><span class=\"line\">        &apos;Return a new OrderedDict which maps field names to their values&apos;</span><br><span class=\"line\">        return OrderedDict(zip(self._fields, self))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python全面学习资料\"><a href=\"#Python全面学习资料\" class=\"headerlink\" title=\"Python全面学习资料\"></a>Python全面学习资料</h3><p>公众号”Python孙行者”后台回复”电子书“即可。如果你有什么好东西好神器，欢迎后台私信，以后总结随文分享，一个人很渺小，有你的参与==&gt;人从众众众众众众众<br><img src=\"https://i.loli.net/2018/11/27/5bfd27354b6d3.png\" alt=\"\"></p>"},{"title":"Python后台开发笔试题0513","comments":1,"date":"2019-05-14T04:54:47.000Z","_content":"自己尝试做了一些常见的Python后台开发笔试题，其中第3题，希望有更好的解决方案，欢迎评论区留言留下你的方法。\n<!--more-->\n1. 用Python实现Fibonacci数列\n这里使用迭代器进行实现\n```\n# fabonacci数列：后面的数字等于前面两个数之和，第一个数是0， 第二个数是1\n\n\ndef fabonacci(length):\n    a = 0\n    b = 1\n    counter = 0\n    while counter < length:\n        counter += 1\n        yield a\n        a, b = b, a + b\n\n\ndef fixed_length_fabonacci(length):\n    return [i for i in fabonacci(length)]\n\n\nprint(fixed_length_fabonacci(10))\n# [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n2. 使用装饰器实现统计函数执行时间\n```\nimport time\n\n\ndef time_counter(func):\n    def wrapper():\n        start_time = time.time()\n        func()\n        end_time = time.time()\n        running_time = end_time - start_time\n        print(\"func running time is {}\".format(running_time))\n        return running_time\n\n    return wrapper\n\n\n@time_counter\ndef some_func():  # 需要被统计运行时间的函数, some_func = time_counter(some_func)\n    # do something\n    time.sleep(1.11)\n\n\nsome_func()\n```\n3. 输入一个ip地址，返回下一个连续的ip地址.例如：输入192.168.1.23，返回192.168.1.24\n```\nMAX_IP = '255.255.255.255'\n\n\ndef get_next_valid_ip(ip):\n    \"\"\"\n    ip字符串 --> 二进制数字 --> 十进制数字\n            --> 十进制数字 + 1 --> next_ip字符串\n    \"\"\"\n    current_ip = ip.strip()[:]\n    if current_ip == MAX_IP:\n        return '0.0.0.0'\n\n    ip = ip.split('.')\n    # 判断是否存在非法ip数字\n    invalid_ip_nums = [i for i in ip if (int(i) > 2 ** 8 - 1) or (int(i) < 0)]\n    if invalid_ip_nums:\n        # print(\"{} is invalid ip, please check\".format(current_ip))\n        raise Exception(\"{} is invalid ip, please check\".format(current_ip))\n\n    # 转为二进制数字\n    old_ip = [bin(int(i)) for i in ip[:]]\n    for i, value in enumerate(old_ip):  # 补齐八位\n        length = len(value)\n        if length != 10:\n            old_ip[i] = '0b' + ''.join(['0' for _ in range(0, 10-length)]) + old_ip[i][2:]\n    # 转为十进制数字\n    old_ip_binary = old_ip[0] + ''.join([i[2:] for i in old_ip[1:4]])\n    old_ip_decimal = int(old_ip_binary, 2)\n\n    # 十进制数字加1获得下一个ip\n    next_ip_decimal = old_ip_decimal + 1\n    # 十进制转为二进制\n    next_ip_binary = bin(next_ip_decimal)[2:]\n    # 以步长为8进行切割\n    next_ip_binary_list = ['0b' + next_ip_binary[8*i:8*(i+1)] for i in range(0,4)]\n    # 二进制转为十进制\n    next_ip_decimal_list = [int(i, 2) for i in next_ip_binary_list]\n    next_ip = '.'.join([str(i) for i in next_ip_decimal_list])\n\n    return next_ip\n```\n4. 使用Python实现单例模式\n```\nclass Singleton(object):\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance\n```\n5. 假如有以下函数\n```\n\ndef return_list(val, list=[]):\n    list.append(val)\n    return list\n```\n（1）写出相应的运行结果，并解释为什么\n```\nprint(return_list(1))\nprint(return_list(2, []))\nprint(return_list(3))\n# [1]\n# [2]\n# [1, 3]\n# 使用可变对象为默认参数时，只会初始化一次\n```\n(2)如果希望预期输出如下，应该怎么修改？\n预期结果\n```\n[1]\n[2]\n[3]\n```\n代码修改：\n```\ndef return_list(val, lists=None):\n    if not lists:\n        lists = []\n    lists.append(val)\n    return lists\n```\n\n","source":"_posts/python-backend-pen-questions-0513.md","raw":"---\ntitle: Python后台开发笔试题0513\ncomments: true\ndate: 2019-05-14 12:54:47\ntags:\n- pen_questions\ncategories:\n- Python\n---\n自己尝试做了一些常见的Python后台开发笔试题，其中第3题，希望有更好的解决方案，欢迎评论区留言留下你的方法。\n<!--more-->\n1. 用Python实现Fibonacci数列\n这里使用迭代器进行实现\n```\n# fabonacci数列：后面的数字等于前面两个数之和，第一个数是0， 第二个数是1\n\n\ndef fabonacci(length):\n    a = 0\n    b = 1\n    counter = 0\n    while counter < length:\n        counter += 1\n        yield a\n        a, b = b, a + b\n\n\ndef fixed_length_fabonacci(length):\n    return [i for i in fabonacci(length)]\n\n\nprint(fixed_length_fabonacci(10))\n# [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n2. 使用装饰器实现统计函数执行时间\n```\nimport time\n\n\ndef time_counter(func):\n    def wrapper():\n        start_time = time.time()\n        func()\n        end_time = time.time()\n        running_time = end_time - start_time\n        print(\"func running time is {}\".format(running_time))\n        return running_time\n\n    return wrapper\n\n\n@time_counter\ndef some_func():  # 需要被统计运行时间的函数, some_func = time_counter(some_func)\n    # do something\n    time.sleep(1.11)\n\n\nsome_func()\n```\n3. 输入一个ip地址，返回下一个连续的ip地址.例如：输入192.168.1.23，返回192.168.1.24\n```\nMAX_IP = '255.255.255.255'\n\n\ndef get_next_valid_ip(ip):\n    \"\"\"\n    ip字符串 --> 二进制数字 --> 十进制数字\n            --> 十进制数字 + 1 --> next_ip字符串\n    \"\"\"\n    current_ip = ip.strip()[:]\n    if current_ip == MAX_IP:\n        return '0.0.0.0'\n\n    ip = ip.split('.')\n    # 判断是否存在非法ip数字\n    invalid_ip_nums = [i for i in ip if (int(i) > 2 ** 8 - 1) or (int(i) < 0)]\n    if invalid_ip_nums:\n        # print(\"{} is invalid ip, please check\".format(current_ip))\n        raise Exception(\"{} is invalid ip, please check\".format(current_ip))\n\n    # 转为二进制数字\n    old_ip = [bin(int(i)) for i in ip[:]]\n    for i, value in enumerate(old_ip):  # 补齐八位\n        length = len(value)\n        if length != 10:\n            old_ip[i] = '0b' + ''.join(['0' for _ in range(0, 10-length)]) + old_ip[i][2:]\n    # 转为十进制数字\n    old_ip_binary = old_ip[0] + ''.join([i[2:] for i in old_ip[1:4]])\n    old_ip_decimal = int(old_ip_binary, 2)\n\n    # 十进制数字加1获得下一个ip\n    next_ip_decimal = old_ip_decimal + 1\n    # 十进制转为二进制\n    next_ip_binary = bin(next_ip_decimal)[2:]\n    # 以步长为8进行切割\n    next_ip_binary_list = ['0b' + next_ip_binary[8*i:8*(i+1)] for i in range(0,4)]\n    # 二进制转为十进制\n    next_ip_decimal_list = [int(i, 2) for i in next_ip_binary_list]\n    next_ip = '.'.join([str(i) for i in next_ip_decimal_list])\n\n    return next_ip\n```\n4. 使用Python实现单例模式\n```\nclass Singleton(object):\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance\n```\n5. 假如有以下函数\n```\n\ndef return_list(val, list=[]):\n    list.append(val)\n    return list\n```\n（1）写出相应的运行结果，并解释为什么\n```\nprint(return_list(1))\nprint(return_list(2, []))\nprint(return_list(3))\n# [1]\n# [2]\n# [1, 3]\n# 使用可变对象为默认参数时，只会初始化一次\n```\n(2)如果希望预期输出如下，应该怎么修改？\n预期结果\n```\n[1]\n[2]\n[3]\n```\n代码修改：\n```\ndef return_list(val, lists=None):\n    if not lists:\n        lists = []\n    lists.append(val)\n    return lists\n```\n\n","slug":"python-backend-pen-questions-0513","published":1,"updated":"2019-05-25T09:32:43.107Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtdu002fe5vx598i41dc","content":"<p>自己尝试做了一些常见的Python后台开发笔试题，其中第3题，希望有更好的解决方案，欢迎评论区留言留下你的方法。<br><a id=\"more\"></a></p>\n<ol>\n<li><p>用Python实现Fibonacci数列<br>这里使用迭代器进行实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># fabonacci数列：后面的数字等于前面两个数之和，第一个数是0， 第二个数是1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def fabonacci(length):</span><br><span class=\"line\">    a = 0</span><br><span class=\"line\">    b = 1</span><br><span class=\"line\">    counter = 0</span><br><span class=\"line\">    while counter &lt; length:</span><br><span class=\"line\">        counter += 1</span><br><span class=\"line\">        yield a</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def fixed_length_fabonacci(length):</span><br><span class=\"line\">    return [i for i in fabonacci(length)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(fixed_length_fabonacci(10))</span><br><span class=\"line\"># [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用装饰器实现统计函数执行时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def time_counter(func):</span><br><span class=\"line\">    def wrapper():</span><br><span class=\"line\">        start_time = time.time()</span><br><span class=\"line\">        func()</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        running_time = end_time - start_time</span><br><span class=\"line\">        print(&quot;func running time is &#123;&#125;&quot;.format(running_time))</span><br><span class=\"line\">        return running_time</span><br><span class=\"line\"></span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@time_counter</span><br><span class=\"line\">def some_func():  # 需要被统计运行时间的函数, some_func = time_counter(some_func)</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">    time.sleep(1.11)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">some_func()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入一个ip地址，返回下一个连续的ip地址.例如：输入192.168.1.23，返回192.168.1.24</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAX_IP = &apos;255.255.255.255&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def get_next_valid_ip(ip):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    ip字符串 --&gt; 二进制数字 --&gt; 十进制数字</span><br><span class=\"line\">            --&gt; 十进制数字 + 1 --&gt; next_ip字符串</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    current_ip = ip.strip()[:]</span><br><span class=\"line\">    if current_ip == MAX_IP:</span><br><span class=\"line\">        return &apos;0.0.0.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    ip = ip.split(&apos;.&apos;)</span><br><span class=\"line\">    # 判断是否存在非法ip数字</span><br><span class=\"line\">    invalid_ip_nums = [i for i in ip if (int(i) &gt; 2 ** 8 - 1) or (int(i) &lt; 0)]</span><br><span class=\"line\">    if invalid_ip_nums:</span><br><span class=\"line\">        # print(&quot;&#123;&#125; is invalid ip, please check&quot;.format(current_ip))</span><br><span class=\"line\">        raise Exception(&quot;&#123;&#125; is invalid ip, please check&quot;.format(current_ip))</span><br><span class=\"line\"></span><br><span class=\"line\">    # 转为二进制数字</span><br><span class=\"line\">    old_ip = [bin(int(i)) for i in ip[:]]</span><br><span class=\"line\">    for i, value in enumerate(old_ip):  # 补齐八位</span><br><span class=\"line\">        length = len(value)</span><br><span class=\"line\">        if length != 10:</span><br><span class=\"line\">            old_ip[i] = &apos;0b&apos; + &apos;&apos;.join([&apos;0&apos; for _ in range(0, 10-length)]) + old_ip[i][2:]</span><br><span class=\"line\">    # 转为十进制数字</span><br><span class=\"line\">    old_ip_binary = old_ip[0] + &apos;&apos;.join([i[2:] for i in old_ip[1:4]])</span><br><span class=\"line\">    old_ip_decimal = int(old_ip_binary, 2)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 十进制数字加1获得下一个ip</span><br><span class=\"line\">    next_ip_decimal = old_ip_decimal + 1</span><br><span class=\"line\">    # 十进制转为二进制</span><br><span class=\"line\">    next_ip_binary = bin(next_ip_decimal)[2:]</span><br><span class=\"line\">    # 以步长为8进行切割</span><br><span class=\"line\">    next_ip_binary_list = [&apos;0b&apos; + next_ip_binary[8*i:8*(i+1)] for i in range(0,4)]</span><br><span class=\"line\">    # 二进制转为十进制</span><br><span class=\"line\">    next_ip_decimal_list = [int(i, 2) for i in next_ip_binary_list]</span><br><span class=\"line\">    next_ip = &apos;.&apos;.join([str(i) for i in next_ip_decimal_list])</span><br><span class=\"line\"></span><br><span class=\"line\">    return next_ip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用Python实现单例模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton(object):</span><br><span class=\"line\">    _instance = None</span><br><span class=\"line\"></span><br><span class=\"line\">    def __new__(cls):</span><br><span class=\"line\">        if not cls._instance:</span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__new__(cls)</span><br><span class=\"line\">        return cls._instance</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>假如有以下函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">def return_list(val, list=[]):</span><br><span class=\"line\">    list.append(val)</span><br><span class=\"line\">    return list</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>（1）写出相应的运行结果，并解释为什么<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(return_list(1))</span><br><span class=\"line\">print(return_list(2, []))</span><br><span class=\"line\">print(return_list(3))</span><br><span class=\"line\"># [1]</span><br><span class=\"line\"># [2]</span><br><span class=\"line\"># [1, 3]</span><br><span class=\"line\"># 使用可变对象为默认参数时，只会初始化一次</span><br></pre></td></tr></table></figure></p>\n<p>(2)如果希望预期输出如下，应该怎么修改？<br>预期结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]</span><br><span class=\"line\">[2]</span><br><span class=\"line\">[3]</span><br></pre></td></tr></table></figure></p>\n<p>代码修改：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def return_list(val, lists=None):</span><br><span class=\"line\">    if not lists:</span><br><span class=\"line\">        lists = []</span><br><span class=\"line\">    lists.append(val)</span><br><span class=\"line\">    return lists</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>自己尝试做了一些常见的Python后台开发笔试题，其中第3题，希望有更好的解决方案，欢迎评论区留言留下你的方法。<br>","more":"</p>\n<ol>\n<li><p>用Python实现Fibonacci数列<br>这里使用迭代器进行实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># fabonacci数列：后面的数字等于前面两个数之和，第一个数是0， 第二个数是1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def fabonacci(length):</span><br><span class=\"line\">    a = 0</span><br><span class=\"line\">    b = 1</span><br><span class=\"line\">    counter = 0</span><br><span class=\"line\">    while counter &lt; length:</span><br><span class=\"line\">        counter += 1</span><br><span class=\"line\">        yield a</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def fixed_length_fabonacci(length):</span><br><span class=\"line\">    return [i for i in fabonacci(length)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(fixed_length_fabonacci(10))</span><br><span class=\"line\"># [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用装饰器实现统计函数执行时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def time_counter(func):</span><br><span class=\"line\">    def wrapper():</span><br><span class=\"line\">        start_time = time.time()</span><br><span class=\"line\">        func()</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        running_time = end_time - start_time</span><br><span class=\"line\">        print(&quot;func running time is &#123;&#125;&quot;.format(running_time))</span><br><span class=\"line\">        return running_time</span><br><span class=\"line\"></span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@time_counter</span><br><span class=\"line\">def some_func():  # 需要被统计运行时间的函数, some_func = time_counter(some_func)</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">    time.sleep(1.11)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">some_func()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入一个ip地址，返回下一个连续的ip地址.例如：输入192.168.1.23，返回192.168.1.24</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAX_IP = &apos;255.255.255.255&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def get_next_valid_ip(ip):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    ip字符串 --&gt; 二进制数字 --&gt; 十进制数字</span><br><span class=\"line\">            --&gt; 十进制数字 + 1 --&gt; next_ip字符串</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    current_ip = ip.strip()[:]</span><br><span class=\"line\">    if current_ip == MAX_IP:</span><br><span class=\"line\">        return &apos;0.0.0.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    ip = ip.split(&apos;.&apos;)</span><br><span class=\"line\">    # 判断是否存在非法ip数字</span><br><span class=\"line\">    invalid_ip_nums = [i for i in ip if (int(i) &gt; 2 ** 8 - 1) or (int(i) &lt; 0)]</span><br><span class=\"line\">    if invalid_ip_nums:</span><br><span class=\"line\">        # print(&quot;&#123;&#125; is invalid ip, please check&quot;.format(current_ip))</span><br><span class=\"line\">        raise Exception(&quot;&#123;&#125; is invalid ip, please check&quot;.format(current_ip))</span><br><span class=\"line\"></span><br><span class=\"line\">    # 转为二进制数字</span><br><span class=\"line\">    old_ip = [bin(int(i)) for i in ip[:]]</span><br><span class=\"line\">    for i, value in enumerate(old_ip):  # 补齐八位</span><br><span class=\"line\">        length = len(value)</span><br><span class=\"line\">        if length != 10:</span><br><span class=\"line\">            old_ip[i] = &apos;0b&apos; + &apos;&apos;.join([&apos;0&apos; for _ in range(0, 10-length)]) + old_ip[i][2:]</span><br><span class=\"line\">    # 转为十进制数字</span><br><span class=\"line\">    old_ip_binary = old_ip[0] + &apos;&apos;.join([i[2:] for i in old_ip[1:4]])</span><br><span class=\"line\">    old_ip_decimal = int(old_ip_binary, 2)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 十进制数字加1获得下一个ip</span><br><span class=\"line\">    next_ip_decimal = old_ip_decimal + 1</span><br><span class=\"line\">    # 十进制转为二进制</span><br><span class=\"line\">    next_ip_binary = bin(next_ip_decimal)[2:]</span><br><span class=\"line\">    # 以步长为8进行切割</span><br><span class=\"line\">    next_ip_binary_list = [&apos;0b&apos; + next_ip_binary[8*i:8*(i+1)] for i in range(0,4)]</span><br><span class=\"line\">    # 二进制转为十进制</span><br><span class=\"line\">    next_ip_decimal_list = [int(i, 2) for i in next_ip_binary_list]</span><br><span class=\"line\">    next_ip = &apos;.&apos;.join([str(i) for i in next_ip_decimal_list])</span><br><span class=\"line\"></span><br><span class=\"line\">    return next_ip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用Python实现单例模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton(object):</span><br><span class=\"line\">    _instance = None</span><br><span class=\"line\"></span><br><span class=\"line\">    def __new__(cls):</span><br><span class=\"line\">        if not cls._instance:</span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__new__(cls)</span><br><span class=\"line\">        return cls._instance</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>假如有以下函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">def return_list(val, list=[]):</span><br><span class=\"line\">    list.append(val)</span><br><span class=\"line\">    return list</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>（1）写出相应的运行结果，并解释为什么<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(return_list(1))</span><br><span class=\"line\">print(return_list(2, []))</span><br><span class=\"line\">print(return_list(3))</span><br><span class=\"line\"># [1]</span><br><span class=\"line\"># [2]</span><br><span class=\"line\"># [1, 3]</span><br><span class=\"line\"># 使用可变对象为默认参数时，只会初始化一次</span><br></pre></td></tr></table></figure></p>\n<p>(2)如果希望预期输出如下，应该怎么修改？<br>预期结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]</span><br><span class=\"line\">[2]</span><br><span class=\"line\">[3]</span><br></pre></td></tr></table></figure></p>\n<p>代码修改：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def return_list(val, lists=None):</span><br><span class=\"line\">    if not lists:</span><br><span class=\"line\">        lists = []</span><br><span class=\"line\">    lists.append(val)</span><br><span class=\"line\">    return lists</span><br></pre></td></tr></table></figure></p>"},{"layout":"pythoninteview","title":"【Python基础系列1】","date":"2018-07-19T13:29:22.000Z","comments":1,"toc":true,"_content":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 16px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">【今天有坑】</strong>如有更有的解答，欢迎一起交流进步。</p><!--more-->\n<h3 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-top: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 4px; border-bottom: 2px solid rgb(0, 96, 100); border-right: 3px solid rgb(0, 96, 100); margin-left: 5px; margin-right: 2px;\">开放性题目</span></h3>\n<ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">简述解释型和编译型编程语言</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）解释型语言编写的程序不需要编译，在执行的时候，专门有一个解释器能够将VB语言翻译成机器语言，每个语句都是执行的时候才翻译。这样解释型语言每执行一次就要翻译一次，效率比较低。<br>2）用编译型语言写的程序执行之前，需要一个专门的编译过程，通过编译系统，把源高级程序编译成为机器语言文件，翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高，但也不能一概而论，<br>3）部分解释型语言的解释器通过在运行时动态优化代码，甚至能够使解释型语言的性能超过编译型语言。</p>\n</blockquote>\n<ol start=\"2\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Python解释器种类以及特点</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">CPython<br>当 从Python官方网站下载并安装好Python2.7后，就直接获得了一个官方版本的解释器：Cpython，这个解释器是用C语言开发的，所以叫 CPython，在命名行下运行python，就是启动CPython解释器，CPython是使用最广的Python解释器。<br>IPython<br>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的，好比很多国产浏览器虽然外观不同，但内核其实是调用了IE。<br>PyPy<br>PyPy是另一个Python解释器，它的目标是执行速度，PyPy采用JIT技术，对Python代码进行动态编译，所以可以显著提高Python代码的执行速度。<br>Jython<br>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。<br>IronPython<br>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</p>\n</blockquote>\n<ol start=\"3\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">b、B、KB、MB、GB 的关系</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1B = 8b<br>1KB = 1024B<br>1MB = 1024KB<br>1GB = 1024MB</p>\n</blockquote>\n<ol start=\"4\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">机器码和字节码的区别</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）机器码(machine code)，学名机器语言指令，有时也被称为原生码（Native Code），是电脑的CPU可直接解读的数据<br>2）字节码是一种中间状态（中间码）的二进制代码（文件）。需要直译器转译后才能成为机器码。</p>\n</blockquote>\n<ol start=\"5\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">列举布尔值为False的常见值</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1、None；<br>    2、False；<br>    3、任何为0的数字类型，如：0，0.0，0j；<br>    4、任何空序列，如：''，()，[]；<br>    5、任何空字典，例如：{};</p>\n</blockquote>\n<ol start=\"6\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">pass的作用</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）pass是空语句，是为了保持程序结构的完整性。<br>2）pass 不做任何事情，一般用做占位语句。</p>\n</blockquote>\n<ol start=\"7\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">*arg和**kwarg作用</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）定义函数时：<br>*arg会把多出来的位置参数转化为tuple<br>**kwarg会把关键字参数转化为dict<br>2）调用函数时:<br>*arg会把序列参数解包<br>**kwarg会把dict转化为关键字参数形式</p>\n</blockquote>\n<ol start=\"8\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">lambda表达式格式以及应用场景</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">表达式格式:lambda arg1,arg2….argN:expression using args<br>一般是在def不能出现的地方，例如列表常量或者函数调用的参数中</p>\n</blockquote>\n<ol start=\"9\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">is和==的区别</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">is: 判断是否是同一个对象<br>==: 判断是否值相等</p>\n</blockquote>\n<ol start=\"10\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">简述Python的深浅拷贝以及应用场景</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）浅拷贝:会新开辟一片空间存储,但只进行表层的复制,如果存在嵌套的话,当嵌套数据改变时,两边数据同时跟着发生变化,因为只是进行了地址引用.<br>2）深拷贝:也会开辟一片空间进行存储,但会进行彻底的递归复制,源数据的变化不会影响新复制的数据.</p>\n</blockquote>\n<h3 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-top: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 4px; border-bottom: 2px solid rgb(0, 96, 100); border-right: 3px solid rgb(0, 96, 100); margin-left: 5px; margin-right: 2px;\">代码题</span></h3>\n<ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">写出以下代码的输出结果<br>提示：考察列表与字典等<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">可变类型数据的引用特性</strong></li>\n</ol>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs go\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">v&nbsp;=&nbsp;dict.fromkeys([<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'k1'</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'k2'</span>],[])<br><br>v[‘k1’].<span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">append</span>(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>)<br><span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">print</span>(v)&nbsp;&nbsp;&nbsp;#&nbsp;{<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'k1'</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>],&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'k2'</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>]}<br><br>v[‘k1’]&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">777</span><br><span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">print</span>(v)&nbsp;&nbsp;&nbsp;#&nbsp;{<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'k1'</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">777</span>,&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'k2'</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>]}<br></code></pre>\n<ol start=\"2\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">用一行代码实现数值交换<br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">组包拆包</strong></li>\n</ol>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs ini\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-attr\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">a</span>&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br><span class=\"hljs-attr\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">b</span>&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;(a,&nbsp;b)&nbsp;=&nbsp;(b,&nbsp;a)</span><br></code></pre>\n<ol start=\"3\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">用<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">一行代码</strong>实现输出<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">九九乘法表</strong><br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">循环与字符串拼接处理</strong></li>\n</ol>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs cs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'\\n'</span>.<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">join</span>((<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'\\t'</span>.<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">join</span>([<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"%d*%d=%d\"</span>&nbsp;%&nbsp;(x,&nbsp;y,&nbsp;x&nbsp;*&nbsp;y)&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;y&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">range</span>(<span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;x&nbsp;+&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span></span>)])&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;x&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">range</span>(<span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">10</span></span>))))<br></span></code></pre>\n<ol start=\"4\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">写出以下代码的输出结果<br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">注意关键字参数的坑</strong>.在参数的默认值中检测到<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">可变值作为列表或字典</strong>,默认参数值<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">仅在函数定义时计算一次</strong>，这意味着修改参数的默认值将影响函数的所有后续调用</li>\n</ol>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs python\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">Foo</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(a,&nbsp;b=[])</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;b.append(a)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(a,&nbsp;b)<br><br>Foo(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;6&nbsp;[6]</span><br>Foo(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;6&nbsp;[6,&nbsp;6]</span><br>Foo(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;6&nbsp;[6,&nbsp;6,&nbsp;6]</span><br></code></pre>\n<ol start=\"5\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">写出以下代码的输出结果<br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">有大坑</strong></li>\n</ol>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs python\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">num</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;[<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">lambda</span>&nbsp;y:x*y&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;x&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)]<br>print([m(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">3</span>)&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;m&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;num()])<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;[15,&nbsp;15,&nbsp;15,&nbsp;15,&nbsp;15,&nbsp;15]</span><br></code></pre>\n<h3 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-top: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 4px; border-bottom: 2px solid rgb(0, 96, 100); border-right: 3px solid rgb(0, 96, 100); margin-left: 5px; margin-right: 2px;\">持续更新，一起进步。</span></h3></div>\n","source":"_posts/【Python基础系列1】.md","raw":"---\nlayout: pythoninteview\ntitle: 【Python基础系列1】\ndate: 2018-07-19 21:29:22\ncomments: true\ntoc: true\ntags:\n- Python\n- Interview\ncategories:\n- Python\n- Interview\n---\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 16px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">【今天有坑】</strong>如有更有的解答，欢迎一起交流进步。</p><!--more-->\n<h3 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-top: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 4px; border-bottom: 2px solid rgb(0, 96, 100); border-right: 3px solid rgb(0, 96, 100); margin-left: 5px; margin-right: 2px;\">开放性题目</span></h3>\n<ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">简述解释型和编译型编程语言</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）解释型语言编写的程序不需要编译，在执行的时候，专门有一个解释器能够将VB语言翻译成机器语言，每个语句都是执行的时候才翻译。这样解释型语言每执行一次就要翻译一次，效率比较低。<br>2）用编译型语言写的程序执行之前，需要一个专门的编译过程，通过编译系统，把源高级程序编译成为机器语言文件，翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高，但也不能一概而论，<br>3）部分解释型语言的解释器通过在运行时动态优化代码，甚至能够使解释型语言的性能超过编译型语言。</p>\n</blockquote>\n<ol start=\"2\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Python解释器种类以及特点</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">CPython<br>当 从Python官方网站下载并安装好Python2.7后，就直接获得了一个官方版本的解释器：Cpython，这个解释器是用C语言开发的，所以叫 CPython，在命名行下运行python，就是启动CPython解释器，CPython是使用最广的Python解释器。<br>IPython<br>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的，好比很多国产浏览器虽然外观不同，但内核其实是调用了IE。<br>PyPy<br>PyPy是另一个Python解释器，它的目标是执行速度，PyPy采用JIT技术，对Python代码进行动态编译，所以可以显著提高Python代码的执行速度。<br>Jython<br>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。<br>IronPython<br>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</p>\n</blockquote>\n<ol start=\"3\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">b、B、KB、MB、GB 的关系</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1B = 8b<br>1KB = 1024B<br>1MB = 1024KB<br>1GB = 1024MB</p>\n</blockquote>\n<ol start=\"4\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">机器码和字节码的区别</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）机器码(machine code)，学名机器语言指令，有时也被称为原生码（Native Code），是电脑的CPU可直接解读的数据<br>2）字节码是一种中间状态（中间码）的二进制代码（文件）。需要直译器转译后才能成为机器码。</p>\n</blockquote>\n<ol start=\"5\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">列举布尔值为False的常见值</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1、None；<br>    2、False；<br>    3、任何为0的数字类型，如：0，0.0，0j；<br>    4、任何空序列，如：''，()，[]；<br>    5、任何空字典，例如：{};</p>\n</blockquote>\n<ol start=\"6\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">pass的作用</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）pass是空语句，是为了保持程序结构的完整性。<br>2）pass 不做任何事情，一般用做占位语句。</p>\n</blockquote>\n<ol start=\"7\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">*arg和**kwarg作用</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）定义函数时：<br>*arg会把多出来的位置参数转化为tuple<br>**kwarg会把关键字参数转化为dict<br>2）调用函数时:<br>*arg会把序列参数解包<br>**kwarg会把dict转化为关键字参数形式</p>\n</blockquote>\n<ol start=\"8\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">lambda表达式格式以及应用场景</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">表达式格式:lambda arg1,arg2….argN:expression using args<br>一般是在def不能出现的地方，例如列表常量或者函数调用的参数中</p>\n</blockquote>\n<ol start=\"9\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">is和==的区别</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">is: 判断是否是同一个对象<br>==: 判断是否值相等</p>\n</blockquote>\n<ol start=\"10\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">简述Python的深浅拷贝以及应用场景</span></li>\n</ol>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）浅拷贝:会新开辟一片空间存储,但只进行表层的复制,如果存在嵌套的话,当嵌套数据改变时,两边数据同时跟着发生变化,因为只是进行了地址引用.<br>2）深拷贝:也会开辟一片空间进行存储,但会进行彻底的递归复制,源数据的变化不会影响新复制的数据.</p>\n</blockquote>\n<h3 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-top: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 4px; border-bottom: 2px solid rgb(0, 96, 100); border-right: 3px solid rgb(0, 96, 100); margin-left: 5px; margin-right: 2px;\">代码题</span></h3>\n<ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">写出以下代码的输出结果<br>提示：考察列表与字典等<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">可变类型数据的引用特性</strong></li>\n</ol>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs go\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">v&nbsp;=&nbsp;dict.fromkeys([<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'k1'</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'k2'</span>],[])<br><br>v[‘k1’].<span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">append</span>(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>)<br><span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">print</span>(v)&nbsp;&nbsp;&nbsp;#&nbsp;{<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'k1'</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>],&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'k2'</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>]}<br><br>v[‘k1’]&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">777</span><br><span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">print</span>(v)&nbsp;&nbsp;&nbsp;#&nbsp;{<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'k1'</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">777</span>,&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'k2'</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>]}<br></code></pre>\n<ol start=\"2\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">用一行代码实现数值交换<br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">组包拆包</strong></li>\n</ol>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs ini\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-attr\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">a</span>&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br><span class=\"hljs-attr\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">b</span>&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;(a,&nbsp;b)&nbsp;=&nbsp;(b,&nbsp;a)</span><br></code></pre>\n<ol start=\"3\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">用<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">一行代码</strong>实现输出<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">九九乘法表</strong><br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">循环与字符串拼接处理</strong></li>\n</ol>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs cs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'\\n'</span>.<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">join</span>((<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'\\t'</span>.<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">join</span>([<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"%d*%d=%d\"</span>&nbsp;%&nbsp;(x,&nbsp;y,&nbsp;x&nbsp;*&nbsp;y)&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;y&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">range</span>(<span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;x&nbsp;+&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span></span>)])&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;x&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">range</span>(<span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">10</span></span>))))<br></span></code></pre>\n<ol start=\"4\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">写出以下代码的输出结果<br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">注意关键字参数的坑</strong>.在参数的默认值中检测到<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">可变值作为列表或字典</strong>,默认参数值<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">仅在函数定义时计算一次</strong>，这意味着修改参数的默认值将影响函数的所有后续调用</li>\n</ol>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs python\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">Foo</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(a,&nbsp;b=[])</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;b.append(a)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(a,&nbsp;b)<br><br>Foo(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;6&nbsp;[6]</span><br>Foo(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;6&nbsp;[6,&nbsp;6]</span><br>Foo(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;6&nbsp;[6,&nbsp;6,&nbsp;6]</span><br></code></pre>\n<ol start=\"5\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">写出以下代码的输出结果<br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">有大坑</strong></li>\n</ol>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs python\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">num</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;[<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">lambda</span>&nbsp;y:x*y&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;x&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)]<br>print([m(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">3</span>)&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;m&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;num()])<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;[15,&nbsp;15,&nbsp;15,&nbsp;15,&nbsp;15,&nbsp;15]</span><br></code></pre>\n<h3 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-top: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 4px; border-bottom: 2px solid rgb(0, 96, 100); border-right: 3px solid rgb(0, 96, 100); margin-left: 5px; margin-right: 2px;\">持续更新，一起进步。</span></h3></div>\n","slug":"【Python基础系列1】","published":1,"updated":"2019-05-25T09:32:43.108Z","photos":[],"link":"","_id":"cjw3bjtdv002ie5vxbnlhrijx","content":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 16px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">【今天有坑】</strong>如有更有的解答，欢迎一起交流进步。</p><a id=\"more\"></a><br><h3 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-top: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 4px; border-bottom: 2px solid rgb(0, 96, 100); border-right: 3px solid rgb(0, 96, 100); margin-left: 5px; margin-right: 2px;\">开放性题目</span></h3><br><ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">简述解释型和编译型编程语言</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）解释型语言编写的程序不需要编译，在执行的时候，专门有一个解释器能够将VB语言翻译成机器语言，每个语句都是执行的时候才翻译。这样解释型语言每执行一次就要翻译一次，效率比较低。<br>2）用编译型语言写的程序执行之前，需要一个专门的编译过程，通过编译系统，把源高级程序编译成为机器语言文件，翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高，但也不能一概而论，<br>3）部分解释型语言的解释器通过在运行时动态优化代码，甚至能够使解释型语言的性能超过编译型语言。</p><br></blockquote><br><ol start=\"2\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Python解释器种类以及特点</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">CPython<br>当 从Python官方网站下载并安装好Python2.7后，就直接获得了一个官方版本的解释器：Cpython，这个解释器是用C语言开发的，所以叫 CPython，在命名行下运行python，就是启动CPython解释器，CPython是使用最广的Python解释器。<br>IPython<br>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的，好比很多国产浏览器虽然外观不同，但内核其实是调用了IE。<br>PyPy<br>PyPy是另一个Python解释器，它的目标是执行速度，PyPy采用JIT技术，对Python代码进行动态编译，所以可以显著提高Python代码的执行速度。<br>Jython<br>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。<br>IronPython<br>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</p><br></blockquote><br><ol start=\"3\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">b、B、KB、MB、GB 的关系</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1B = 8b<br>1KB = 1024B<br>1MB = 1024KB<br>1GB = 1024MB</p><br></blockquote><br><ol start=\"4\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">机器码和字节码的区别</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）机器码(machine code)，学名机器语言指令，有时也被称为原生码（Native Code），是电脑的CPU可直接解读的数据<br>2）字节码是一种中间状态（中间码）的二进制代码（文件）。需要直译器转译后才能成为机器码。</p><br></blockquote><br><ol start=\"5\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">列举布尔值为False的常见值</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1、None；<br>    2、False；<br>    3、任何为0的数字类型，如：0，0.0，0j；<br>    4、任何空序列，如：’’，()，[]；<br>    5、任何空字典，例如：{};</p><br></blockquote><br><ol start=\"6\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">pass的作用</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）pass是空语句，是为了保持程序结构的完整性。<br>2）pass 不做任何事情，一般用做占位语句。</p><br></blockquote><br><ol start=\"7\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><em>arg和**kwarg作用</em></span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）定义函数时：<br>arg会把多出来的位置参数转化为tuple<br><strong>kwarg会把关键字参数转化为dict<br>2）调用函数时:<br>*arg会把序列参数解包<br></strong>kwarg会把dict转化为关键字参数形式</p><br></blockquote><br><ol start=\"8\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">lambda表达式格式以及应用场景</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">表达式格式:lambda arg1,arg2….argN:expression using args<br>一般是在def不能出现的地方，例如列表常量或者函数调用的参数中</p><br></blockquote><br><ol start=\"9\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">is和==的区别</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">is: 判断是否是同一个对象<br>==: 判断是否值相等</p><br></blockquote><br><ol start=\"10\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">简述Python的深浅拷贝以及应用场景</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）浅拷贝:会新开辟一片空间存储,但只进行表层的复制,如果存在嵌套的话,当嵌套数据改变时,两边数据同时跟着发生变化,因为只是进行了地址引用.<br>2）深拷贝:也会开辟一片空间进行存储,但会进行彻底的递归复制,源数据的变化不会影响新复制的数据.</p><br></blockquote><br><h3 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-top: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 4px; border-bottom: 2px solid rgb(0, 96, 100); border-right: 3px solid rgb(0, 96, 100); margin-left: 5px; margin-right: 2px;\">代码题</span></h3><br><ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">写出以下代码的输出结果<br>提示：考察列表与字典等<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">可变类型数据的引用特性</strong></li><br></ol><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs go\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">v&nbsp;=&nbsp;dict.fromkeys([<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘k1’</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘k2’</span>],[])<br><br>v[‘k1’].<span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">append</span>(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>)<br><span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">print</span>(v)&nbsp;&nbsp;&nbsp;#&nbsp;{<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘k1’</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>],&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘k2’</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>]}<br><br>v[‘k1’]&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">777</span><br><span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">print</span>(v)&nbsp;&nbsp;&nbsp;#&nbsp;{<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘k1’</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">777</span>,&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘k2’</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>]}<br></code></pre><br><ol start=\"2\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">用一行代码实现数值交换<br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">组包拆包</strong></li><br></ol><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs ini\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-attr\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">a</span>&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br><span class=\"hljs-attr\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">b</span>&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;(a,&nbsp;b)&nbsp;=&nbsp;(b,&nbsp;a)</span><br></code></pre><br><ol start=\"3\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">用<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">一行代码</strong>实现输出<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">九九乘法表</strong><br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">循环与字符串拼接处理</strong></li><br></ol><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs cs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘\\n’</span>.<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">join</span>((<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘\\t’</span>.<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">join</span>([<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“%d<em>%d=%d”</em></span>&nbsp;%&nbsp;(x,&nbsp;y,&nbsp;x&nbsp;&nbsp;y)&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;y&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">range</span>(<span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;x&nbsp;+&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span></span>)])&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;x&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">range</span>(<span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">10</span></span>))))<br></span></code></pre><br><ol start=\"4\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">写出以下代码的输出结果<br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">注意关键字参数的坑</strong>.在参数的默认值中检测到<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">可变值作为列表或字典</strong>,默认参数值<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">仅在函数定义时计算一次</strong>，这意味着修改参数的默认值将影响函数的所有后续调用</li><br></ol><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs python\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">Foo</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(a,&nbsp;b=[])</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;b.append(a)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(a,&nbsp;b)<br><br>Foo(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;6&nbsp;[6]</span><br>Foo(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;6&nbsp;[6,&nbsp;6]</span><br>Foo(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;6&nbsp;[6,&nbsp;6,&nbsp;6]</span><br></code></pre><br><ol start=\"5\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">写出以下代码的输出结果<br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">有大坑</strong></li><br></ol><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs python\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">num</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;[<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">lambda</span>&nbsp;y:x*y&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;x&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)]<br>print([m(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">3</span>)&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;m&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;num()])<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;[15,&nbsp;15,&nbsp;15,&nbsp;15,&nbsp;15,&nbsp;15]</span><br></code></pre><br><h3 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-top: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 4px; border-bottom: 2px solid rgb(0, 96, 100); border-right: 3px solid rgb(0, 96, 100); margin-left: 5px; margin-right: 2px;\">持续更新，一起进步。</span></h3></div>\n","site":{"data":{}},"excerpt":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 16px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">【今天有坑】</strong>如有更有的解答，欢迎一起交流进步。</p>","more":"<br><h3 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-top: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 4px; border-bottom: 2px solid rgb(0, 96, 100); border-right: 3px solid rgb(0, 96, 100); margin-left: 5px; margin-right: 2px;\">开放性题目</span></h3><br><ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">简述解释型和编译型编程语言</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）解释型语言编写的程序不需要编译，在执行的时候，专门有一个解释器能够将VB语言翻译成机器语言，每个语句都是执行的时候才翻译。这样解释型语言每执行一次就要翻译一次，效率比较低。<br>2）用编译型语言写的程序执行之前，需要一个专门的编译过程，通过编译系统，把源高级程序编译成为机器语言文件，翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高，但也不能一概而论，<br>3）部分解释型语言的解释器通过在运行时动态优化代码，甚至能够使解释型语言的性能超过编译型语言。</p><br></blockquote><br><ol start=\"2\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Python解释器种类以及特点</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">CPython<br>当 从Python官方网站下载并安装好Python2.7后，就直接获得了一个官方版本的解释器：Cpython，这个解释器是用C语言开发的，所以叫 CPython，在命名行下运行python，就是启动CPython解释器，CPython是使用最广的Python解释器。<br>IPython<br>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的，好比很多国产浏览器虽然外观不同，但内核其实是调用了IE。<br>PyPy<br>PyPy是另一个Python解释器，它的目标是执行速度，PyPy采用JIT技术，对Python代码进行动态编译，所以可以显著提高Python代码的执行速度。<br>Jython<br>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。<br>IronPython<br>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</p><br></blockquote><br><ol start=\"3\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">b、B、KB、MB、GB 的关系</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1B = 8b<br>1KB = 1024B<br>1MB = 1024KB<br>1GB = 1024MB</p><br></blockquote><br><ol start=\"4\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">机器码和字节码的区别</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）机器码(machine code)，学名机器语言指令，有时也被称为原生码（Native Code），是电脑的CPU可直接解读的数据<br>2）字节码是一种中间状态（中间码）的二进制代码（文件）。需要直译器转译后才能成为机器码。</p><br></blockquote><br><ol start=\"5\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">列举布尔值为False的常见值</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1、None；<br>    2、False；<br>    3、任何为0的数字类型，如：0，0.0，0j；<br>    4、任何空序列，如：’’，()，[]；<br>    5、任何空字典，例如：{};</p><br></blockquote><br><ol start=\"6\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">pass的作用</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）pass是空语句，是为了保持程序结构的完整性。<br>2）pass 不做任何事情，一般用做占位语句。</p><br></blockquote><br><ol start=\"7\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><em>arg和**kwarg作用</em></span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）定义函数时：<br>arg会把多出来的位置参数转化为tuple<br><strong>kwarg会把关键字参数转化为dict<br>2）调用函数时:<br>*arg会把序列参数解包<br></strong>kwarg会把dict转化为关键字参数形式</p><br></blockquote><br><ol start=\"8\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">lambda表达式格式以及应用场景</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">表达式格式:lambda arg1,arg2….argN:expression using args<br>一般是在def不能出现的地方，例如列表常量或者函数调用的参数中</p><br></blockquote><br><ol start=\"9\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">is和==的区别</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">is: 判断是否是同一个对象<br>==: 判断是否值相等</p><br></blockquote><br><ol start=\"10\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">简述Python的深浅拷贝以及应用场景</span></li><br></ol><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">1）浅拷贝:会新开辟一片空间存储,但只进行表层的复制,如果存在嵌套的话,当嵌套数据改变时,两边数据同时跟着发生变化,因为只是进行了地址引用.<br>2）深拷贝:也会开辟一片空间进行存储,但会进行彻底的递归复制,源数据的变化不会影响新复制的数据.</p><br></blockquote><br><h3 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-top: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 4px; border-bottom: 2px solid rgb(0, 96, 100); border-right: 3px solid rgb(0, 96, 100); margin-left: 5px; margin-right: 2px;\">代码题</span></h3><br><ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">写出以下代码的输出结果<br>提示：考察列表与字典等<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">可变类型数据的引用特性</strong></li><br></ol><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs go\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">v&nbsp;=&nbsp;dict.fromkeys([<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘k1’</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘k2’</span>],[])<br><br>v[‘k1’].<span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">append</span>(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>)<br><span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">print</span>(v)&nbsp;&nbsp;&nbsp;#&nbsp;{<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘k1’</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>],&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘k2’</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>]}<br><br>v[‘k1’]&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">777</span><br><span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">print</span>(v)&nbsp;&nbsp;&nbsp;#&nbsp;{<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘k1’</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">777</span>,&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘k2’</span>:&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">666</span>]}<br></code></pre><br><ol start=\"2\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">用一行代码实现数值交换<br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">组包拆包</strong></li><br></ol><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs ini\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-attr\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">a</span>&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br><span class=\"hljs-attr\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">b</span>&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;(a,&nbsp;b)&nbsp;=&nbsp;(b,&nbsp;a)</span><br></code></pre><br><ol start=\"3\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">用<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">一行代码</strong>实现输出<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">九九乘法表</strong><br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">循环与字符串拼接处理</strong></li><br></ol><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs cs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘\\n’</span>.<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">join</span>((<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘\\t’</span>.<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">join</span>([<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“%d<em>%d=%d”</em></span>&nbsp;%&nbsp;(x,&nbsp;y,&nbsp;x&nbsp;&nbsp;y)&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;y&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">range</span>(<span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;x&nbsp;+&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span></span>)])&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;x&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">range</span>(<span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">10</span></span>))))<br></span></code></pre><br><ol start=\"4\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">写出以下代码的输出结果<br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">注意关键字参数的坑</strong>.在参数的默认值中检测到<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">可变值作为列表或字典</strong>,默认参数值<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">仅在函数定义时计算一次</strong>，这意味着修改参数的默认值将影响函数的所有后续调用</li><br></ol><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs python\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">Foo</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(a,&nbsp;b=[])</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;b.append(a)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(a,&nbsp;b)<br><br>Foo(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;6&nbsp;[6]</span><br>Foo(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;6&nbsp;[6,&nbsp;6]</span><br>Foo(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;6&nbsp;[6,&nbsp;6,&nbsp;6]</span><br></code></pre><br><ol start=\"5\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">写出以下代码的输出结果<br>提示：<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">有大坑</strong></li><br></ol><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs python\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">num</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;[<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">lambda</span>&nbsp;y:x*y&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;x&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">6</span>)]<br>print([m(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">3</span>)&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;m&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;num()])<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;[15,&nbsp;15,&nbsp;15,&nbsp;15,&nbsp;15,&nbsp;15]</span><br></code></pre><br><h3 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-top: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 4px; border-bottom: 2px solid rgb(0, 96, 100); border-right: 3px solid rgb(0, 96, 100); margin-left: 5px; margin-right: 2px;\">持续更新，一起进步。</span></h3></div>"},{"title":"修改Redis数据库个数的方法","comments":1,"toc":true,"date":"2018-08-15T08:04:57.000Z","_content":"Redis的数据库个数默认是16个（0-15），既然是默认，那么肯定可以修改<!--more-->\n修改方法：\n#### 备份配置文件\n```\ncd /etc/redis/\nsudo cp redis.conf redis.conf.backup\n```\n\n#### 修改数据库个数\n打开配置文件，修改databases 参数后面的个数即可\n\n![](https://pic3.zhimg.com/80/v2-491be7313f144f15b4ca67e5da8213e7_hd.jpg)\n\n#### 重启Redis数据库\n重启数据库并查看数据库数量\n```\nsudo service redis restart\nredis-cli\nconfig get databases\n```\n![](https://pic4.zhimg.com/80/v2-8a8b12e2f44d6eb58bdf61f3205c9b60_hd.jpg)\n\n[小知识点]Redis的hash槽的个数是2**14=16384个\n","source":"_posts/修改Redis数据库个数的方法.md","raw":"---\ntitle: 修改Redis数据库个数的方法\ncomments: true\ntoc: true\ncategories:\n- DataBase\ndate: 2018-08-15 16:04:57\ntags:\n- Redis\n---\nRedis的数据库个数默认是16个（0-15），既然是默认，那么肯定可以修改<!--more-->\n修改方法：\n#### 备份配置文件\n```\ncd /etc/redis/\nsudo cp redis.conf redis.conf.backup\n```\n\n#### 修改数据库个数\n打开配置文件，修改databases 参数后面的个数即可\n\n![](https://pic3.zhimg.com/80/v2-491be7313f144f15b4ca67e5da8213e7_hd.jpg)\n\n#### 重启Redis数据库\n重启数据库并查看数据库数量\n```\nsudo service redis restart\nredis-cli\nconfig get databases\n```\n![](https://pic4.zhimg.com/80/v2-8a8b12e2f44d6eb58bdf61f3205c9b60_hd.jpg)\n\n[小知识点]Redis的hash槽的个数是2**14=16384个\n","slug":"修改Redis数据库个数的方法","published":1,"updated":"2019-05-25T09:32:43.110Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtdy002le5vxmssh2po4","content":"<p>Redis的数据库个数默认是16个（0-15），既然是默认，那么肯定可以修改<a id=\"more\"></a><br>修改方法：</p>\n<h4 id=\"备份配置文件\"><a href=\"#备份配置文件\" class=\"headerlink\" title=\"备份配置文件\"></a>备份配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/redis/</span><br><span class=\"line\">sudo cp redis.conf redis.conf.backup</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改数据库个数\"><a href=\"#修改数据库个数\" class=\"headerlink\" title=\"修改数据库个数\"></a>修改数据库个数</h4><p>打开配置文件，修改databases 参数后面的个数即可</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-491be7313f144f15b4ca67e5da8213e7_hd.jpg\" alt=\"\"></p>\n<h4 id=\"重启Redis数据库\"><a href=\"#重启Redis数据库\" class=\"headerlink\" title=\"重启Redis数据库\"></a>重启Redis数据库</h4><p>重启数据库并查看数据库数量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service redis restart</span><br><span class=\"line\">redis-cli</span><br><span class=\"line\">config get databases</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-8a8b12e2f44d6eb58bdf61f3205c9b60_hd.jpg\" alt=\"\"></p>\n<p>[小知识点]Redis的hash槽的个数是2**14=16384个</p>\n","site":{"data":{}},"excerpt":"<p>Redis的数据库个数默认是16个（0-15），既然是默认，那么肯定可以修改","more":"<br>修改方法：</p>\n<h4 id=\"备份配置文件\"><a href=\"#备份配置文件\" class=\"headerlink\" title=\"备份配置文件\"></a>备份配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/redis/</span><br><span class=\"line\">sudo cp redis.conf redis.conf.backup</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改数据库个数\"><a href=\"#修改数据库个数\" class=\"headerlink\" title=\"修改数据库个数\"></a>修改数据库个数</h4><p>打开配置文件，修改databases 参数后面的个数即可</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-491be7313f144f15b4ca67e5da8213e7_hd.jpg\" alt=\"\"></p>\n<h4 id=\"重启Redis数据库\"><a href=\"#重启Redis数据库\" class=\"headerlink\" title=\"重启Redis数据库\"></a>重启Redis数据库</h4><p>重启数据库并查看数据库数量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service redis restart</span><br><span class=\"line\">redis-cli</span><br><span class=\"line\">config get databases</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-8a8b12e2f44d6eb58bdf61f3205c9b60_hd.jpg\" alt=\"\"></p>\n<p>[小知识点]Redis的hash槽的个数是2**14=16384个</p>"},{"title":"使用正则校验密码强度以及正则版的Python字符串strip处理函数","comments":1,"date":"2018-07-24T00:51:12.000Z","toc":true,"_content":"\n\n# 在Python中正则这么玩\n<!--more-->\n## 正则,就是用来匹配字符串的.但总是显得深不可测,那么通过下面两个例子,希望你会喜欢上正则.\n\n### strip字符串处理函数正则版\n#### Python自带的字符串处理函数strip()效果\n总的来说,就是当strip()不带参数时,去掉两端空格;带参数时,将把字符串中与参数一样的字符删除但两端的空格不做处理.\n```python\nprint('  12334 536 738  '.strip())\nprint('  12334 536 738  '.strip('3'))\n# 输出结果\n12334 536 738\n  12334 536 738  \n```\n#### 那么,我们用正则怎么实现呢?\n> 解题思路\na.如果没有参数,那么删除两端的空白\n     * 通过分组的形式,分离两端空白部分和需要保留的部分\n     * 正则部分:r'(\\s\\*)(.+\\w)(\\s*)'\nb. 如果有两个参数,那么删除指定字符,使用re.sub进行替换即可\n\n```python\ndef strip_regex_version(string_data,delete=None):\n    if delete == None:\n        # 删除两侧空白\n        string_data_regex = re.compile(r'(\\s*)(.+\\w)(\\s*)') # 分组提取需要保留的部分\n        result = string_data_regex.match(string_data).group(2) # 第二个括号匹配出来的值是我们需要的\n    else:\n        # 删除指定的字符,直接用空字符替换就好\n        result = re.sub(delete,'',string_data)\n    return result\n```\n\n### 校验强口令正则版\n> 强口令:长度不少于8个字符,同时包含大小写字母,至少有一位数字\n\n> 解决思路:\n    1.使用len() 检测密码的长度\n    2.使用一个正则检测是否有至少一位数字\n    3.使用一个正则检测是否有大写字母\n    4.使用一个正则检测是否有小写字母\n    5.上面四个条件都为真的话,就返回True,否则返回False\n```python\ndef strong_password_detection(password):\n    length_flag = False # 长度标志\n    digit_flag = False  # 数字标志\n    upper_flag = False  # 大写标志\n    lower_flag = False  # 小写标志\n\n    # 匹配数字的正则\n    digit_regex = re.compile(r'\\d')\n    # 匹配大写字母的正则\n    upper_regex = re.compile(r'[A-Z]')\n    # 匹配小写字母的正则\n    lower_regex = re.compile(r'[a-z]')\n\n    if len(password) >= 8: # 判断长度\n        length_flag = True\n\n    if len(digit_regex.findall(password)) >= 1: # 判断是否包含至少一位数字\n        digit_flag = True\n\n    if len(upper_regex.findall(password)) > 0: # 判断是否包含大写字母\n        upper_flag = True\n\n    if len(lower_regex.findall(password)) > 0: # 判断是否包含小写字母\n        lower_flag = True\n\n    if length_flag and digit_flag and upper_flag and lower_flag: # 判断是否同时满足4个条件\n        return True\n    else:\n        return False\n```\n### 正则,可以实现的东西超出你我的想象\n公众号Python孙行者回复\"strip\"获取完整代码\n","source":"_posts/使用正则校验密码强度以及正则版的Python字符串strip处理函数.md","raw":"---\ntitle: 使用正则校验密码强度以及正则版的Python字符串strip处理函数\ncomments: true\ndate: 2018-07-24 08:51:12\ntoc: true\ncategories:\n- Python\n- Fun\ntags:\n- 正则\n- 密码强度校验\n---\n\n\n# 在Python中正则这么玩\n<!--more-->\n## 正则,就是用来匹配字符串的.但总是显得深不可测,那么通过下面两个例子,希望你会喜欢上正则.\n\n### strip字符串处理函数正则版\n#### Python自带的字符串处理函数strip()效果\n总的来说,就是当strip()不带参数时,去掉两端空格;带参数时,将把字符串中与参数一样的字符删除但两端的空格不做处理.\n```python\nprint('  12334 536 738  '.strip())\nprint('  12334 536 738  '.strip('3'))\n# 输出结果\n12334 536 738\n  12334 536 738  \n```\n#### 那么,我们用正则怎么实现呢?\n> 解题思路\na.如果没有参数,那么删除两端的空白\n     * 通过分组的形式,分离两端空白部分和需要保留的部分\n     * 正则部分:r'(\\s\\*)(.+\\w)(\\s*)'\nb. 如果有两个参数,那么删除指定字符,使用re.sub进行替换即可\n\n```python\ndef strip_regex_version(string_data,delete=None):\n    if delete == None:\n        # 删除两侧空白\n        string_data_regex = re.compile(r'(\\s*)(.+\\w)(\\s*)') # 分组提取需要保留的部分\n        result = string_data_regex.match(string_data).group(2) # 第二个括号匹配出来的值是我们需要的\n    else:\n        # 删除指定的字符,直接用空字符替换就好\n        result = re.sub(delete,'',string_data)\n    return result\n```\n\n### 校验强口令正则版\n> 强口令:长度不少于8个字符,同时包含大小写字母,至少有一位数字\n\n> 解决思路:\n    1.使用len() 检测密码的长度\n    2.使用一个正则检测是否有至少一位数字\n    3.使用一个正则检测是否有大写字母\n    4.使用一个正则检测是否有小写字母\n    5.上面四个条件都为真的话,就返回True,否则返回False\n```python\ndef strong_password_detection(password):\n    length_flag = False # 长度标志\n    digit_flag = False  # 数字标志\n    upper_flag = False  # 大写标志\n    lower_flag = False  # 小写标志\n\n    # 匹配数字的正则\n    digit_regex = re.compile(r'\\d')\n    # 匹配大写字母的正则\n    upper_regex = re.compile(r'[A-Z]')\n    # 匹配小写字母的正则\n    lower_regex = re.compile(r'[a-z]')\n\n    if len(password) >= 8: # 判断长度\n        length_flag = True\n\n    if len(digit_regex.findall(password)) >= 1: # 判断是否包含至少一位数字\n        digit_flag = True\n\n    if len(upper_regex.findall(password)) > 0: # 判断是否包含大写字母\n        upper_flag = True\n\n    if len(lower_regex.findall(password)) > 0: # 判断是否包含小写字母\n        lower_flag = True\n\n    if length_flag and digit_flag and upper_flag and lower_flag: # 判断是否同时满足4个条件\n        return True\n    else:\n        return False\n```\n### 正则,可以实现的东西超出你我的想象\n公众号Python孙行者回复\"strip\"获取完整代码\n","slug":"使用正则校验密码强度以及正则版的Python字符串strip处理函数","published":1,"updated":"2019-05-25T09:32:43.109Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtdz002oe5vxu0rwccvr","content":"<h1 id=\"在Python中正则这么玩\"><a href=\"#在Python中正则这么玩\" class=\"headerlink\" title=\"在Python中正则这么玩\"></a>在Python中正则这么玩</h1><a id=\"more\"></a>\n<h2 id=\"正则-就是用来匹配字符串的-但总是显得深不可测-那么通过下面两个例子-希望你会喜欢上正则\"><a href=\"#正则-就是用来匹配字符串的-但总是显得深不可测-那么通过下面两个例子-希望你会喜欢上正则\" class=\"headerlink\" title=\"正则,就是用来匹配字符串的.但总是显得深不可测,那么通过下面两个例子,希望你会喜欢上正则.\"></a>正则,就是用来匹配字符串的.但总是显得深不可测,那么通过下面两个例子,希望你会喜欢上正则.</h2><h3 id=\"strip字符串处理函数正则版\"><a href=\"#strip字符串处理函数正则版\" class=\"headerlink\" title=\"strip字符串处理函数正则版\"></a>strip字符串处理函数正则版</h3><h4 id=\"Python自带的字符串处理函数strip-效果\"><a href=\"#Python自带的字符串处理函数strip-效果\" class=\"headerlink\" title=\"Python自带的字符串处理函数strip()效果\"></a>Python自带的字符串处理函数strip()效果</h4><p>总的来说,就是当strip()不带参数时,去掉两端空格;带参数时,将把字符串中与参数一样的字符删除但两端的空格不做处理.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'  12334 536 738  '</span>.strip())</span><br><span class=\"line\">print(<span class=\"string\">'  12334 536 738  '</span>.strip(<span class=\"string\">'3'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"number\">12334</span> <span class=\"number\">536</span> <span class=\"number\">738</span></span><br><span class=\"line\">  <span class=\"number\">12334</span> <span class=\"number\">536</span> <span class=\"number\">738</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"那么-我们用正则怎么实现呢\"><a href=\"#那么-我们用正则怎么实现呢\" class=\"headerlink\" title=\"那么,我们用正则怎么实现呢?\"></a>那么,我们用正则怎么实现呢?</h4><blockquote>\n<p>解题思路<br>a.如果没有参数,那么删除两端的空白</p>\n<pre><code>* 通过分组的形式,分离两端空白部分和需要保留的部分\n* 正则部分:r&apos;(\\s\\*)(.+\\w)(\\s*)&apos;\n</code></pre><p>b. 如果有两个参数,那么删除指定字符,使用re.sub进行替换即可</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">strip_regex_version</span><span class=\"params\">(string_data,delete=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> delete == <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 删除两侧空白</span></span><br><span class=\"line\">        string_data_regex = re.compile(<span class=\"string\">r'(\\s*)(.+\\w)(\\s*)'</span>) <span class=\"comment\"># 分组提取需要保留的部分</span></span><br><span class=\"line\">        result = string_data_regex.match(string_data).group(<span class=\"number\">2</span>) <span class=\"comment\"># 第二个括号匹配出来的值是我们需要的</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 删除指定的字符,直接用空字符替换就好</span></span><br><span class=\"line\">        result = re.sub(delete,<span class=\"string\">''</span>,string_data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h3 id=\"校验强口令正则版\"><a href=\"#校验强口令正则版\" class=\"headerlink\" title=\"校验强口令正则版\"></a>校验强口令正则版</h3><blockquote>\n<p>强口令:长度不少于8个字符,同时包含大小写字母,至少有一位数字</p>\n</blockquote>\n<blockquote>\n<p>解决思路:<br>    1.使用len() 检测密码的长度<br>    2.使用一个正则检测是否有至少一位数字<br>    3.使用一个正则检测是否有大写字母<br>    4.使用一个正则检测是否有小写字母<br>    5.上面四个条件都为真的话,就返回True,否则返回False<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">strong_password_detection</span><span class=\"params\">(password)</span>:</span></span><br><span class=\"line\">    length_flag = <span class=\"keyword\">False</span> <span class=\"comment\"># 长度标志</span></span><br><span class=\"line\">    digit_flag = <span class=\"keyword\">False</span>  <span class=\"comment\"># 数字标志</span></span><br><span class=\"line\">    upper_flag = <span class=\"keyword\">False</span>  <span class=\"comment\"># 大写标志</span></span><br><span class=\"line\">    lower_flag = <span class=\"keyword\">False</span>  <span class=\"comment\"># 小写标志</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 匹配数字的正则</span></span><br><span class=\"line\">    digit_regex = re.compile(<span class=\"string\">r'\\d'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 匹配大写字母的正则</span></span><br><span class=\"line\">    upper_regex = re.compile(<span class=\"string\">r'[A-Z]'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 匹配小写字母的正则</span></span><br><span class=\"line\">    lower_regex = re.compile(<span class=\"string\">r'[a-z]'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(password) &gt;= <span class=\"number\">8</span>: <span class=\"comment\"># 判断长度</span></span><br><span class=\"line\">        length_flag = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(digit_regex.findall(password)) &gt;= <span class=\"number\">1</span>: <span class=\"comment\"># 判断是否包含至少一位数字</span></span><br><span class=\"line\">        digit_flag = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(upper_regex.findall(password)) &gt; <span class=\"number\">0</span>: <span class=\"comment\"># 判断是否包含大写字母</span></span><br><span class=\"line\">        upper_flag = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(lower_regex.findall(password)) &gt; <span class=\"number\">0</span>: <span class=\"comment\"># 判断是否包含小写字母</span></span><br><span class=\"line\">        lower_flag = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> length_flag <span class=\"keyword\">and</span> digit_flag <span class=\"keyword\">and</span> upper_flag <span class=\"keyword\">and</span> lower_flag: <span class=\"comment\"># 判断是否同时满足4个条件</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"正则-可以实现的东西超出你我的想象\"><a href=\"#正则-可以实现的东西超出你我的想象\" class=\"headerlink\" title=\"正则,可以实现的东西超出你我的想象\"></a>正则,可以实现的东西超出你我的想象</h3><p>公众号Python孙行者回复”strip”获取完整代码</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"在Python中正则这么玩\"><a href=\"#在Python中正则这么玩\" class=\"headerlink\" title=\"在Python中正则这么玩\"></a>在Python中正则这么玩</h1>","more":"<h2 id=\"正则-就是用来匹配字符串的-但总是显得深不可测-那么通过下面两个例子-希望你会喜欢上正则\"><a href=\"#正则-就是用来匹配字符串的-但总是显得深不可测-那么通过下面两个例子-希望你会喜欢上正则\" class=\"headerlink\" title=\"正则,就是用来匹配字符串的.但总是显得深不可测,那么通过下面两个例子,希望你会喜欢上正则.\"></a>正则,就是用来匹配字符串的.但总是显得深不可测,那么通过下面两个例子,希望你会喜欢上正则.</h2><h3 id=\"strip字符串处理函数正则版\"><a href=\"#strip字符串处理函数正则版\" class=\"headerlink\" title=\"strip字符串处理函数正则版\"></a>strip字符串处理函数正则版</h3><h4 id=\"Python自带的字符串处理函数strip-效果\"><a href=\"#Python自带的字符串处理函数strip-效果\" class=\"headerlink\" title=\"Python自带的字符串处理函数strip()效果\"></a>Python自带的字符串处理函数strip()效果</h4><p>总的来说,就是当strip()不带参数时,去掉两端空格;带参数时,将把字符串中与参数一样的字符删除但两端的空格不做处理.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'  12334 536 738  '</span>.strip())</span><br><span class=\"line\">print(<span class=\"string\">'  12334 536 738  '</span>.strip(<span class=\"string\">'3'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"number\">12334</span> <span class=\"number\">536</span> <span class=\"number\">738</span></span><br><span class=\"line\">  <span class=\"number\">12334</span> <span class=\"number\">536</span> <span class=\"number\">738</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"那么-我们用正则怎么实现呢\"><a href=\"#那么-我们用正则怎么实现呢\" class=\"headerlink\" title=\"那么,我们用正则怎么实现呢?\"></a>那么,我们用正则怎么实现呢?</h4><blockquote>\n<p>解题思路<br>a.如果没有参数,那么删除两端的空白</p>\n<pre><code>* 通过分组的形式,分离两端空白部分和需要保留的部分\n* 正则部分:r&apos;(\\s\\*)(.+\\w)(\\s*)&apos;\n</code></pre><p>b. 如果有两个参数,那么删除指定字符,使用re.sub进行替换即可</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">strip_regex_version</span><span class=\"params\">(string_data,delete=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> delete == <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 删除两侧空白</span></span><br><span class=\"line\">        string_data_regex = re.compile(<span class=\"string\">r'(\\s*)(.+\\w)(\\s*)'</span>) <span class=\"comment\"># 分组提取需要保留的部分</span></span><br><span class=\"line\">        result = string_data_regex.match(string_data).group(<span class=\"number\">2</span>) <span class=\"comment\"># 第二个括号匹配出来的值是我们需要的</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 删除指定的字符,直接用空字符替换就好</span></span><br><span class=\"line\">        result = re.sub(delete,<span class=\"string\">''</span>,string_data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h3 id=\"校验强口令正则版\"><a href=\"#校验强口令正则版\" class=\"headerlink\" title=\"校验强口令正则版\"></a>校验强口令正则版</h3><blockquote>\n<p>强口令:长度不少于8个字符,同时包含大小写字母,至少有一位数字</p>\n</blockquote>\n<blockquote>\n<p>解决思路:<br>    1.使用len() 检测密码的长度<br>    2.使用一个正则检测是否有至少一位数字<br>    3.使用一个正则检测是否有大写字母<br>    4.使用一个正则检测是否有小写字母<br>    5.上面四个条件都为真的话,就返回True,否则返回False<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">strong_password_detection</span><span class=\"params\">(password)</span>:</span></span><br><span class=\"line\">    length_flag = <span class=\"keyword\">False</span> <span class=\"comment\"># 长度标志</span></span><br><span class=\"line\">    digit_flag = <span class=\"keyword\">False</span>  <span class=\"comment\"># 数字标志</span></span><br><span class=\"line\">    upper_flag = <span class=\"keyword\">False</span>  <span class=\"comment\"># 大写标志</span></span><br><span class=\"line\">    lower_flag = <span class=\"keyword\">False</span>  <span class=\"comment\"># 小写标志</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 匹配数字的正则</span></span><br><span class=\"line\">    digit_regex = re.compile(<span class=\"string\">r'\\d'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 匹配大写字母的正则</span></span><br><span class=\"line\">    upper_regex = re.compile(<span class=\"string\">r'[A-Z]'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 匹配小写字母的正则</span></span><br><span class=\"line\">    lower_regex = re.compile(<span class=\"string\">r'[a-z]'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(password) &gt;= <span class=\"number\">8</span>: <span class=\"comment\"># 判断长度</span></span><br><span class=\"line\">        length_flag = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(digit_regex.findall(password)) &gt;= <span class=\"number\">1</span>: <span class=\"comment\"># 判断是否包含至少一位数字</span></span><br><span class=\"line\">        digit_flag = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(upper_regex.findall(password)) &gt; <span class=\"number\">0</span>: <span class=\"comment\"># 判断是否包含大写字母</span></span><br><span class=\"line\">        upper_flag = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(lower_regex.findall(password)) &gt; <span class=\"number\">0</span>: <span class=\"comment\"># 判断是否包含小写字母</span></span><br><span class=\"line\">        lower_flag = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> length_flag <span class=\"keyword\">and</span> digit_flag <span class=\"keyword\">and</span> upper_flag <span class=\"keyword\">and</span> lower_flag: <span class=\"comment\"># 判断是否同时满足4个条件</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"正则-可以实现的东西超出你我的想象\"><a href=\"#正则-可以实现的东西超出你我的想象\" class=\"headerlink\" title=\"正则,可以实现的东西超出你我的想象\"></a>正则,可以实现的东西超出你我的想象</h3><p>公众号Python孙行者回复”strip”获取完整代码</p>"},{"title":"使用boto3批量上传图片到S3","comments":1,"date":"2018-12-13T10:48:33.000Z","_content":"最近在工作中需要把本地的图片上传到亚马逊对象存储S3中供外链访问。\n\n为了更快的实现，使用了Python 接口的boto3进行封装，实现批量上传图片到S3\n\n<!--more-->\n主要有以下的几个函数：\n\n1、实现S3的连接\n```\n# coding: utf-8\nimport boto3\nimport os\n\nAWS_ACCESS_KEY_ID = 'xxxx'\nAWS_SECRET_ACCESS_KEY = 'xxx'\nBUCKET_NAME = 'xxxx'\nREGION_NAME = 'xxx'\nPHOTO_FOLDER = 'xxxx/photo'\n\n\ndef init_s3_logo_photo(region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID,\n                       aws_secret_access_key=AWS_SECRET_ACCESS_KEY):\n    s3 = boto3.resource('s3', region_name=region_name, aws_access_key_id=aws_access_key_id,\n                        aws_secret_access_key=aws_secret_access_key)\n    return s3\n\n```\n\n2、实现单个图片的上传\n```\ndef upload_logo_photo(logo_photo_s3=init_s3_logo_photo(), bucket_name=BUCKET_NAME, photo_name=None):\n    with open(os.path.join(PHOTO_FOLDER, photo_name), 'rb') as f:\n        photo_stream = f.read()\n        try:\n            # upload logo to s3\n            logo_photo_s3.Bucket(bucket_name).put_object(Key=photo_name, Body=photo_stream)\n            print(\"{} upload done\".format(photo_name))\n        except Exception as e:\n            print(\"upload {} error:{}\".format(photo_name, e))\n```\n3、实现单个图片的删除\n```\ndef delete_logo_photo_by_name(logo_photo_s3=init_s3_logo_photo(), bucket_name=BUCKET_NAME, photo_name=None):\n    try:\n        # delete from s3\n        logo_photo_s3.Object(bucket_name, photo_name).delete()\n        print(\"Delete {} OK from s3!\".format(photo_name))\n    except Exception as e:\n        print(\"Delete {} ERROR:{}\".format(photo_name, e))\n```\n4、实现整个bucket的内容的清除\n```\ndef delete_whole_logo():\n    # this func will delete all content in bucket data\n    s3 = init_s3_logo_photo()\n    b = s3.Bucket(BUCKET_NAME)\n    for key in list(b.objects.all()):\n        delete_logo_photo_by_name(photo_name=key.key)\n```\n5、实现上传整个文件夹里的图片并做去除非文件\n```\ndef upload_logo_photo_by_folder():\n    # 1. to get document list\n    os.chdir(PHOTO_FOLDER)\n    logo_list = os.listdir(PHOTO_FOLDER)\n\n    # 2. which isn't file will be removed from logo_list\n    for logo in logo_list:\n        if not os.path.isfile(os.path.abspath(logo)):\n            logo_list.remove(logo)\n        upload_logo_photo(photo_name=logo)\n\n\nif __name__ == \"__main__\":\n    upload_logo_photo_by_folder()\n```\n","source":"_posts/使用boto3批量上传图片到S3.md","raw":"---\ntitle: 使用boto3批量上传图片到S3\ncomments: true\ndate: 2018-12-13 18:48:33\ntags:\n- 上传图片 s3\ncategories:\n- Python\n---\n最近在工作中需要把本地的图片上传到亚马逊对象存储S3中供外链访问。\n\n为了更快的实现，使用了Python 接口的boto3进行封装，实现批量上传图片到S3\n\n<!--more-->\n主要有以下的几个函数：\n\n1、实现S3的连接\n```\n# coding: utf-8\nimport boto3\nimport os\n\nAWS_ACCESS_KEY_ID = 'xxxx'\nAWS_SECRET_ACCESS_KEY = 'xxx'\nBUCKET_NAME = 'xxxx'\nREGION_NAME = 'xxx'\nPHOTO_FOLDER = 'xxxx/photo'\n\n\ndef init_s3_logo_photo(region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID,\n                       aws_secret_access_key=AWS_SECRET_ACCESS_KEY):\n    s3 = boto3.resource('s3', region_name=region_name, aws_access_key_id=aws_access_key_id,\n                        aws_secret_access_key=aws_secret_access_key)\n    return s3\n\n```\n\n2、实现单个图片的上传\n```\ndef upload_logo_photo(logo_photo_s3=init_s3_logo_photo(), bucket_name=BUCKET_NAME, photo_name=None):\n    with open(os.path.join(PHOTO_FOLDER, photo_name), 'rb') as f:\n        photo_stream = f.read()\n        try:\n            # upload logo to s3\n            logo_photo_s3.Bucket(bucket_name).put_object(Key=photo_name, Body=photo_stream)\n            print(\"{} upload done\".format(photo_name))\n        except Exception as e:\n            print(\"upload {} error:{}\".format(photo_name, e))\n```\n3、实现单个图片的删除\n```\ndef delete_logo_photo_by_name(logo_photo_s3=init_s3_logo_photo(), bucket_name=BUCKET_NAME, photo_name=None):\n    try:\n        # delete from s3\n        logo_photo_s3.Object(bucket_name, photo_name).delete()\n        print(\"Delete {} OK from s3!\".format(photo_name))\n    except Exception as e:\n        print(\"Delete {} ERROR:{}\".format(photo_name, e))\n```\n4、实现整个bucket的内容的清除\n```\ndef delete_whole_logo():\n    # this func will delete all content in bucket data\n    s3 = init_s3_logo_photo()\n    b = s3.Bucket(BUCKET_NAME)\n    for key in list(b.objects.all()):\n        delete_logo_photo_by_name(photo_name=key.key)\n```\n5、实现上传整个文件夹里的图片并做去除非文件\n```\ndef upload_logo_photo_by_folder():\n    # 1. to get document list\n    os.chdir(PHOTO_FOLDER)\n    logo_list = os.listdir(PHOTO_FOLDER)\n\n    # 2. which isn't file will be removed from logo_list\n    for logo in logo_list:\n        if not os.path.isfile(os.path.abspath(logo)):\n            logo_list.remove(logo)\n        upload_logo_photo(photo_name=logo)\n\n\nif __name__ == \"__main__\":\n    upload_logo_photo_by_folder()\n```\n","slug":"使用boto3批量上传图片到S3","published":1,"updated":"2019-05-25T09:32:43.109Z","layout":"post","photos":[],"link":"","_id":"cjw3bjte1002se5vxozoaqnvg","content":"<p>最近在工作中需要把本地的图片上传到亚马逊对象存储S3中供外链访问。</p>\n<p>为了更快的实现，使用了Python 接口的boto3进行封装，实现批量上传图片到S3</p>\n<a id=\"more\"></a>\n<p>主要有以下的几个函数：</p>\n<p>1、实现S3的连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding: utf-8</span><br><span class=\"line\">import boto3</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">AWS_ACCESS_KEY_ID = &apos;xxxx&apos;</span><br><span class=\"line\">AWS_SECRET_ACCESS_KEY = &apos;xxx&apos;</span><br><span class=\"line\">BUCKET_NAME = &apos;xxxx&apos;</span><br><span class=\"line\">REGION_NAME = &apos;xxx&apos;</span><br><span class=\"line\">PHOTO_FOLDER = &apos;xxxx/photo&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def init_s3_logo_photo(region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID,</span><br><span class=\"line\">                       aws_secret_access_key=AWS_SECRET_ACCESS_KEY):</span><br><span class=\"line\">    s3 = boto3.resource(&apos;s3&apos;, region_name=region_name, aws_access_key_id=aws_access_key_id,</span><br><span class=\"line\">                        aws_secret_access_key=aws_secret_access_key)</span><br><span class=\"line\">    return s3</span><br></pre></td></tr></table></figure></p>\n<p>2、实现单个图片的上传<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def upload_logo_photo(logo_photo_s3=init_s3_logo_photo(), bucket_name=BUCKET_NAME, photo_name=None):</span><br><span class=\"line\">    with open(os.path.join(PHOTO_FOLDER, photo_name), &apos;rb&apos;) as f:</span><br><span class=\"line\">        photo_stream = f.read()</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            # upload logo to s3</span><br><span class=\"line\">            logo_photo_s3.Bucket(bucket_name).put_object(Key=photo_name, Body=photo_stream)</span><br><span class=\"line\">            print(&quot;&#123;&#125; upload done&quot;.format(photo_name))</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(&quot;upload &#123;&#125; error:&#123;&#125;&quot;.format(photo_name, e))</span><br></pre></td></tr></table></figure></p>\n<p>3、实现单个图片的删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def delete_logo_photo_by_name(logo_photo_s3=init_s3_logo_photo(), bucket_name=BUCKET_NAME, photo_name=None):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        # delete from s3</span><br><span class=\"line\">        logo_photo_s3.Object(bucket_name, photo_name).delete()</span><br><span class=\"line\">        print(&quot;Delete &#123;&#125; OK from s3!&quot;.format(photo_name))</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(&quot;Delete &#123;&#125; ERROR:&#123;&#125;&quot;.format(photo_name, e))</span><br></pre></td></tr></table></figure></p>\n<p>4、实现整个bucket的内容的清除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def delete_whole_logo():</span><br><span class=\"line\">    # this func will delete all content in bucket data</span><br><span class=\"line\">    s3 = init_s3_logo_photo()</span><br><span class=\"line\">    b = s3.Bucket(BUCKET_NAME)</span><br><span class=\"line\">    for key in list(b.objects.all()):</span><br><span class=\"line\">        delete_logo_photo_by_name(photo_name=key.key)</span><br></pre></td></tr></table></figure></p>\n<p>5、实现上传整个文件夹里的图片并做去除非文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def upload_logo_photo_by_folder():</span><br><span class=\"line\">    # 1. to get document list</span><br><span class=\"line\">    os.chdir(PHOTO_FOLDER)</span><br><span class=\"line\">    logo_list = os.listdir(PHOTO_FOLDER)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 2. which isn&apos;t file will be removed from logo_list</span><br><span class=\"line\">    for logo in logo_list:</span><br><span class=\"line\">        if not os.path.isfile(os.path.abspath(logo)):</span><br><span class=\"line\">            logo_list.remove(logo)</span><br><span class=\"line\">        upload_logo_photo(photo_name=logo)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    upload_logo_photo_by_folder()</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>最近在工作中需要把本地的图片上传到亚马逊对象存储S3中供外链访问。</p>\n<p>为了更快的实现，使用了Python 接口的boto3进行封装，实现批量上传图片到S3</p>","more":"<p>主要有以下的几个函数：</p>\n<p>1、实现S3的连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding: utf-8</span><br><span class=\"line\">import boto3</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">AWS_ACCESS_KEY_ID = &apos;xxxx&apos;</span><br><span class=\"line\">AWS_SECRET_ACCESS_KEY = &apos;xxx&apos;</span><br><span class=\"line\">BUCKET_NAME = &apos;xxxx&apos;</span><br><span class=\"line\">REGION_NAME = &apos;xxx&apos;</span><br><span class=\"line\">PHOTO_FOLDER = &apos;xxxx/photo&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def init_s3_logo_photo(region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID,</span><br><span class=\"line\">                       aws_secret_access_key=AWS_SECRET_ACCESS_KEY):</span><br><span class=\"line\">    s3 = boto3.resource(&apos;s3&apos;, region_name=region_name, aws_access_key_id=aws_access_key_id,</span><br><span class=\"line\">                        aws_secret_access_key=aws_secret_access_key)</span><br><span class=\"line\">    return s3</span><br></pre></td></tr></table></figure></p>\n<p>2、实现单个图片的上传<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def upload_logo_photo(logo_photo_s3=init_s3_logo_photo(), bucket_name=BUCKET_NAME, photo_name=None):</span><br><span class=\"line\">    with open(os.path.join(PHOTO_FOLDER, photo_name), &apos;rb&apos;) as f:</span><br><span class=\"line\">        photo_stream = f.read()</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            # upload logo to s3</span><br><span class=\"line\">            logo_photo_s3.Bucket(bucket_name).put_object(Key=photo_name, Body=photo_stream)</span><br><span class=\"line\">            print(&quot;&#123;&#125; upload done&quot;.format(photo_name))</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(&quot;upload &#123;&#125; error:&#123;&#125;&quot;.format(photo_name, e))</span><br></pre></td></tr></table></figure></p>\n<p>3、实现单个图片的删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def delete_logo_photo_by_name(logo_photo_s3=init_s3_logo_photo(), bucket_name=BUCKET_NAME, photo_name=None):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        # delete from s3</span><br><span class=\"line\">        logo_photo_s3.Object(bucket_name, photo_name).delete()</span><br><span class=\"line\">        print(&quot;Delete &#123;&#125; OK from s3!&quot;.format(photo_name))</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(&quot;Delete &#123;&#125; ERROR:&#123;&#125;&quot;.format(photo_name, e))</span><br></pre></td></tr></table></figure></p>\n<p>4、实现整个bucket的内容的清除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def delete_whole_logo():</span><br><span class=\"line\">    # this func will delete all content in bucket data</span><br><span class=\"line\">    s3 = init_s3_logo_photo()</span><br><span class=\"line\">    b = s3.Bucket(BUCKET_NAME)</span><br><span class=\"line\">    for key in list(b.objects.all()):</span><br><span class=\"line\">        delete_logo_photo_by_name(photo_name=key.key)</span><br></pre></td></tr></table></figure></p>\n<p>5、实现上传整个文件夹里的图片并做去除非文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def upload_logo_photo_by_folder():</span><br><span class=\"line\">    # 1. to get document list</span><br><span class=\"line\">    os.chdir(PHOTO_FOLDER)</span><br><span class=\"line\">    logo_list = os.listdir(PHOTO_FOLDER)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 2. which isn&apos;t file will be removed from logo_list</span><br><span class=\"line\">    for logo in logo_list:</span><br><span class=\"line\">        if not os.path.isfile(os.path.abspath(logo)):</span><br><span class=\"line\">            logo_list.remove(logo)</span><br><span class=\"line\">        upload_logo_photo(photo_name=logo)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    upload_logo_photo_by_folder()</span><br></pre></td></tr></table></figure></p>"},{"title":"存在引用关系的表或视图快速添加字段","comments":1,"date":"2018-12-05T12:35:55.000Z","_content":"有时候需要对存在引用关系的视图或者表进行新增字段，存在引用关系的表是不允许直接drop掉，如果需要新增字段的话，只能把存在引用关系的表逐一解除，但存在很多表的时候，这时候就很困难了。下面分享一个快速新增字段的sql脚本。\n<!--more-->\n\n```\n\n/*\n视图依赖关系记录以及保存，修改完毕后，重新执行所有视图函数\n*/\n--drop table deps_saved_ddl cascade ;\n\n/*1.创建表保存相关信息*/\ncreate table if not exists deps_saved_ddl\n(\n  deps_id          serial primary key,\n  deps_view_schema varchar(255),\n  deps_view_name   varchar(255),\n  deps_ddl_to_run  text,\n  deps_type        char\n);\n\n\n/*创建依赖保存和删除依赖函数*/\ncreate or replace function deps_save_and_drop_dependencies(p_view_schema varchar, p_view_name varchar) returns void as\n$$\ndeclare\n  v_curr record;\nbegin\nfor v_curr in\n(\n  select obj_schema, obj_name, obj_type from\n  (\n  with recursive recursive_deps(obj_schema, obj_name, obj_type, depth) as\n  (\n    select p_view_schema, p_view_name, null::varchar, 0\n    union\n    select dep_schema::varchar, dep_name::varchar, dep_type::varchar, recursive_deps.depth + 1 from\n    (\n      select ref_nsp.nspname ref_schema, ref_cl.relname ref_name,\n      rwr_cl.relkind dep_type,\n      rwr_nsp.nspname dep_schema,\n      rwr_cl.relname dep_name\n      from pg_depend dep\n      join pg_class ref_cl on dep.refobjid = ref_cl.oid\n      join pg_namespace ref_nsp on ref_cl.relnamespace = ref_nsp.oid\n      join pg_rewrite rwr on dep.objid = rwr.oid\n      join pg_class rwr_cl on rwr.ev_class = rwr_cl.oid\n      join pg_namespace rwr_nsp on rwr_cl.relnamespace = rwr_nsp.oid\n      where dep.deptype = 'n'\n      and dep.classid = 'pg_rewrite'::regclass\n    ) deps\n    join recursive_deps on deps.ref_schema = recursive_deps.obj_schema and deps.ref_name = recursive_deps.obj_name\n    where (deps.ref_schema != deps.dep_schema or deps.ref_name != deps.dep_name)\n  )\n  select obj_schema, obj_name, obj_type, depth\n  from recursive_deps\n  where depth > 0\n  ) t\n  group by obj_schema, obj_name, obj_type\n  order by max(depth) desc\n) loop\n\n  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n  select p_view_schema, p_view_name, 'COMMENT ON ' ||\n  case\n  when c.relkind = 'v' then 'VIEW'\n  when c.relkind = 'm' then 'MATERIALIZED VIEW'\n  else ''\n  end\n  || ' ' || n.nspname || '.' || c.relname || ' IS ''' || replace(d.description, '''', '''''') || ''';', 'c'\n  from pg_class c\n  join pg_namespace n on n.oid = c.relnamespace\n  join pg_description d on d.objoid = c.oid and d.objsubid = 0\n  where n.nspname = v_curr.obj_schema and c.relname = v_curr.obj_name and d.description is not null;\n\n  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n  select p_view_schema, p_view_name, 'COMMENT ON COLUMN ' || n.nspname || '.' || c.relname || '.' || a.attname || ' IS ''' || replace(d.description, '''', '''''') || ''';', 'c'\n  from pg_class c\n  join pg_attribute a on c.oid = a.attrelid\n  join pg_namespace n on n.oid = c.relnamespace\n  join pg_description d on d.objoid = c.oid and d.objsubid = a.attnum\n  where n.nspname = v_curr.obj_schema and c.relname = v_curr.obj_name and d.description is not null;\n\n  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n  select p_view_schema, p_view_name, 'GRANT ' || privilege_type || ' ON ' || table_schema || '.\"' || table_name || '\" TO ' || grantee, 'g'\n  from information_schema.role_table_grants\n  where table_schema = v_curr.obj_schema and table_name = v_curr.obj_name;\n\n  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n  select p_view_schema, p_view_name, pg_get_indexdef(idx.oid), 'i'\n  from pg_index ind\n  join pg_class idx on idx.oid = ind.indexrelid\n  join pg_class tbl on tbl.oid = ind.indrelid\n  left join pg_namespace ns on ns.oid = tbl.relnamespace\n  where tbl.relname = v_curr.obj_name and ns.nspname = v_curr.obj_schema;\n\n  if v_curr.obj_type = 'v' then\n    insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n    select p_view_schema, p_view_name, 'CREATE VIEW ' || v_curr.obj_schema || '.\"' || v_curr.obj_name || '\" AS ' || view_definition, 'v'\n    from information_schema.views\n    where table_schema = v_curr.obj_schema and table_name = v_curr.obj_name;\n  elsif v_curr.obj_type = 'm' then\n    insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n    select p_view_schema, p_view_name, 'CREATE MATERIALIZED VIEW ' || v_curr.obj_schema || '.\"' || v_curr.obj_name || '\" AS ' || definition, 'm'\n    from pg_matviews\n    where schemaname = v_curr.obj_schema and matviewname = v_curr.obj_name;\n  end if;\n\n  execute 'DROP ' ||\n  case\n    when v_curr.obj_type = 'v' then 'VIEW'\n    when v_curr.obj_type = 'm' then 'MATERIALIZED VIEW'\n  end\n  || ' ' || v_curr.obj_schema || '.\"' || v_curr.obj_name || '\"';\n\nend loop;\n\n-- save foreign keys\nfor v_curr in\n(\n  SELECT ref_nsp.nspname ref_schema, ref_cl.relname ref_name, const.conname conname, pg_catalog.pg_get_constraintdef(const.oid, true) as condef\n    FROM pg_catalog.pg_constraint const\n    JOIN pg_class ref_cl on const.conrelid = ref_cl.oid\n    JOIN pg_namespace ref_nsp on ref_cl.relnamespace = ref_nsp.oid\n    join pg_class orig_cl on const.confrelid = orig_cl.oid\n    join pg_namespace orig_nsp on orig_cl.relnamespace = orig_nsp.oid\n\n    WHERE\n      orig_cl.relname = p_view_name AND\n      orig_nsp.nspname = p_view_schema AND\n      const.contype = 'f'\n) loop\n  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n    select p_view_schema, p_view_name,\n      'ALTER TABLE ' || v_curr.ref_schema || '.\"' || v_curr.ref_name || '\" ADD CONSTRAINT \"' || v_curr.conname || '\" ' || v_curr.condef || ';', 'f';\n  execute 'ALTER TABLE ' || v_curr.ref_schema || '.\"' || v_curr.ref_name || '\" DROP CONSTRAINT \"' || v_curr.conname || '\"';\nend loop;\nend;\n$$\nLANGUAGE plpgsql;\n\n\n--恢复依赖关系\n\ncreate or replace function deps_restore_dependencies(p_view_schema varchar, p_view_name varchar) returns void as\n$$\ndeclare\n  v_curr record;\nbegin\nfor v_curr in\n(\n  select deps_ddl_to_run\n  from deps_saved_ddl\n  where deps_view_schema = p_view_schema and deps_view_name = p_view_name\n  order by deps_id desc\n) loop\n  execute v_curr.deps_ddl_to_run;\nend loop;\ndelete from deps_saved_ddl\nwhere deps_view_schema = p_view_schema and deps_view_name = p_view_name;\nend;\n$$\nLANGUAGE plpgsql;\n--1. 创建表格保存依赖关系和ddl\n--2. 保存依赖关系和去掉依赖关系\n--select deps_save_and_drop_dependencies('xxxx','xxxx');\n--4. drop 原视图或表\n--drop  view xxxxxxx;\n\n--5. 根据新增字段后的DDL创建视图\n--   create view xxxxx;\n--6. 如果是表格，那么先插入数据\n--7. 恢复所有与之依赖关系的视图\n--select deps_restore_dependencies('public','municipality');\n```\n","source":"_posts/存在引用关系的表或视图快速添加字段.md","raw":"---\ntitle: 存在引用关系的表或视图快速添加字段\ncomments: true\ndate: 2018-12-05 20:35:55\ntags:\n- 新增字段\ncategories:\n- postgresql\n---\n有时候需要对存在引用关系的视图或者表进行新增字段，存在引用关系的表是不允许直接drop掉，如果需要新增字段的话，只能把存在引用关系的表逐一解除，但存在很多表的时候，这时候就很困难了。下面分享一个快速新增字段的sql脚本。\n<!--more-->\n\n```\n\n/*\n视图依赖关系记录以及保存，修改完毕后，重新执行所有视图函数\n*/\n--drop table deps_saved_ddl cascade ;\n\n/*1.创建表保存相关信息*/\ncreate table if not exists deps_saved_ddl\n(\n  deps_id          serial primary key,\n  deps_view_schema varchar(255),\n  deps_view_name   varchar(255),\n  deps_ddl_to_run  text,\n  deps_type        char\n);\n\n\n/*创建依赖保存和删除依赖函数*/\ncreate or replace function deps_save_and_drop_dependencies(p_view_schema varchar, p_view_name varchar) returns void as\n$$\ndeclare\n  v_curr record;\nbegin\nfor v_curr in\n(\n  select obj_schema, obj_name, obj_type from\n  (\n  with recursive recursive_deps(obj_schema, obj_name, obj_type, depth) as\n  (\n    select p_view_schema, p_view_name, null::varchar, 0\n    union\n    select dep_schema::varchar, dep_name::varchar, dep_type::varchar, recursive_deps.depth + 1 from\n    (\n      select ref_nsp.nspname ref_schema, ref_cl.relname ref_name,\n      rwr_cl.relkind dep_type,\n      rwr_nsp.nspname dep_schema,\n      rwr_cl.relname dep_name\n      from pg_depend dep\n      join pg_class ref_cl on dep.refobjid = ref_cl.oid\n      join pg_namespace ref_nsp on ref_cl.relnamespace = ref_nsp.oid\n      join pg_rewrite rwr on dep.objid = rwr.oid\n      join pg_class rwr_cl on rwr.ev_class = rwr_cl.oid\n      join pg_namespace rwr_nsp on rwr_cl.relnamespace = rwr_nsp.oid\n      where dep.deptype = 'n'\n      and dep.classid = 'pg_rewrite'::regclass\n    ) deps\n    join recursive_deps on deps.ref_schema = recursive_deps.obj_schema and deps.ref_name = recursive_deps.obj_name\n    where (deps.ref_schema != deps.dep_schema or deps.ref_name != deps.dep_name)\n  )\n  select obj_schema, obj_name, obj_type, depth\n  from recursive_deps\n  where depth > 0\n  ) t\n  group by obj_schema, obj_name, obj_type\n  order by max(depth) desc\n) loop\n\n  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n  select p_view_schema, p_view_name, 'COMMENT ON ' ||\n  case\n  when c.relkind = 'v' then 'VIEW'\n  when c.relkind = 'm' then 'MATERIALIZED VIEW'\n  else ''\n  end\n  || ' ' || n.nspname || '.' || c.relname || ' IS ''' || replace(d.description, '''', '''''') || ''';', 'c'\n  from pg_class c\n  join pg_namespace n on n.oid = c.relnamespace\n  join pg_description d on d.objoid = c.oid and d.objsubid = 0\n  where n.nspname = v_curr.obj_schema and c.relname = v_curr.obj_name and d.description is not null;\n\n  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n  select p_view_schema, p_view_name, 'COMMENT ON COLUMN ' || n.nspname || '.' || c.relname || '.' || a.attname || ' IS ''' || replace(d.description, '''', '''''') || ''';', 'c'\n  from pg_class c\n  join pg_attribute a on c.oid = a.attrelid\n  join pg_namespace n on n.oid = c.relnamespace\n  join pg_description d on d.objoid = c.oid and d.objsubid = a.attnum\n  where n.nspname = v_curr.obj_schema and c.relname = v_curr.obj_name and d.description is not null;\n\n  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n  select p_view_schema, p_view_name, 'GRANT ' || privilege_type || ' ON ' || table_schema || '.\"' || table_name || '\" TO ' || grantee, 'g'\n  from information_schema.role_table_grants\n  where table_schema = v_curr.obj_schema and table_name = v_curr.obj_name;\n\n  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n  select p_view_schema, p_view_name, pg_get_indexdef(idx.oid), 'i'\n  from pg_index ind\n  join pg_class idx on idx.oid = ind.indexrelid\n  join pg_class tbl on tbl.oid = ind.indrelid\n  left join pg_namespace ns on ns.oid = tbl.relnamespace\n  where tbl.relname = v_curr.obj_name and ns.nspname = v_curr.obj_schema;\n\n  if v_curr.obj_type = 'v' then\n    insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n    select p_view_schema, p_view_name, 'CREATE VIEW ' || v_curr.obj_schema || '.\"' || v_curr.obj_name || '\" AS ' || view_definition, 'v'\n    from information_schema.views\n    where table_schema = v_curr.obj_schema and table_name = v_curr.obj_name;\n  elsif v_curr.obj_type = 'm' then\n    insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n    select p_view_schema, p_view_name, 'CREATE MATERIALIZED VIEW ' || v_curr.obj_schema || '.\"' || v_curr.obj_name || '\" AS ' || definition, 'm'\n    from pg_matviews\n    where schemaname = v_curr.obj_schema and matviewname = v_curr.obj_name;\n  end if;\n\n  execute 'DROP ' ||\n  case\n    when v_curr.obj_type = 'v' then 'VIEW'\n    when v_curr.obj_type = 'm' then 'MATERIALIZED VIEW'\n  end\n  || ' ' || v_curr.obj_schema || '.\"' || v_curr.obj_name || '\"';\n\nend loop;\n\n-- save foreign keys\nfor v_curr in\n(\n  SELECT ref_nsp.nspname ref_schema, ref_cl.relname ref_name, const.conname conname, pg_catalog.pg_get_constraintdef(const.oid, true) as condef\n    FROM pg_catalog.pg_constraint const\n    JOIN pg_class ref_cl on const.conrelid = ref_cl.oid\n    JOIN pg_namespace ref_nsp on ref_cl.relnamespace = ref_nsp.oid\n    join pg_class orig_cl on const.confrelid = orig_cl.oid\n    join pg_namespace orig_nsp on orig_cl.relnamespace = orig_nsp.oid\n\n    WHERE\n      orig_cl.relname = p_view_name AND\n      orig_nsp.nspname = p_view_schema AND\n      const.contype = 'f'\n) loop\n  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)\n    select p_view_schema, p_view_name,\n      'ALTER TABLE ' || v_curr.ref_schema || '.\"' || v_curr.ref_name || '\" ADD CONSTRAINT \"' || v_curr.conname || '\" ' || v_curr.condef || ';', 'f';\n  execute 'ALTER TABLE ' || v_curr.ref_schema || '.\"' || v_curr.ref_name || '\" DROP CONSTRAINT \"' || v_curr.conname || '\"';\nend loop;\nend;\n$$\nLANGUAGE plpgsql;\n\n\n--恢复依赖关系\n\ncreate or replace function deps_restore_dependencies(p_view_schema varchar, p_view_name varchar) returns void as\n$$\ndeclare\n  v_curr record;\nbegin\nfor v_curr in\n(\n  select deps_ddl_to_run\n  from deps_saved_ddl\n  where deps_view_schema = p_view_schema and deps_view_name = p_view_name\n  order by deps_id desc\n) loop\n  execute v_curr.deps_ddl_to_run;\nend loop;\ndelete from deps_saved_ddl\nwhere deps_view_schema = p_view_schema and deps_view_name = p_view_name;\nend;\n$$\nLANGUAGE plpgsql;\n--1. 创建表格保存依赖关系和ddl\n--2. 保存依赖关系和去掉依赖关系\n--select deps_save_and_drop_dependencies('xxxx','xxxx');\n--4. drop 原视图或表\n--drop  view xxxxxxx;\n\n--5. 根据新增字段后的DDL创建视图\n--   create view xxxxx;\n--6. 如果是表格，那么先插入数据\n--7. 恢复所有与之依赖关系的视图\n--select deps_restore_dependencies('public','municipality');\n```\n","slug":"存在引用关系的表或视图快速添加字段","published":1,"updated":"2019-05-25T09:32:43.111Z","layout":"post","photos":[],"link":"","_id":"cjw3bjte3002ve5vxla43y4sj","content":"<p>有时候需要对存在引用关系的视图或者表进行新增字段，存在引用关系的表是不允许直接drop掉，如果需要新增字段的话，只能把存在引用关系的表逐一解除，但存在很多表的时候，这时候就很困难了。下面分享一个快速新增字段的sql脚本。<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">视图依赖关系记录以及保存，修改完毕后，重新执行所有视图函数</span><br><span class=\"line\">*/</span><br><span class=\"line\">--drop table deps_saved_ddl cascade ;</span><br><span class=\"line\"></span><br><span class=\"line\">/*1.创建表保存相关信息*/</span><br><span class=\"line\">create table if not exists deps_saved_ddl</span><br><span class=\"line\">(</span><br><span class=\"line\">  deps_id          serial primary key,</span><br><span class=\"line\">  deps_view_schema varchar(255),</span><br><span class=\"line\">  deps_view_name   varchar(255),</span><br><span class=\"line\">  deps_ddl_to_run  text,</span><br><span class=\"line\">  deps_type        char</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/*创建依赖保存和删除依赖函数*/</span><br><span class=\"line\">create or replace function deps_save_and_drop_dependencies(p_view_schema varchar, p_view_name varchar) returns void as</span><br><span class=\"line\">$$</span><br><span class=\"line\">declare</span><br><span class=\"line\">  v_curr record;</span><br><span class=\"line\">begin</span><br><span class=\"line\">for v_curr in</span><br><span class=\"line\">(</span><br><span class=\"line\">  select obj_schema, obj_name, obj_type from</span><br><span class=\"line\">  (</span><br><span class=\"line\">  with recursive recursive_deps(obj_schema, obj_name, obj_type, depth) as</span><br><span class=\"line\">  (</span><br><span class=\"line\">    select p_view_schema, p_view_name, null::varchar, 0</span><br><span class=\"line\">    union</span><br><span class=\"line\">    select dep_schema::varchar, dep_name::varchar, dep_type::varchar, recursive_deps.depth + 1 from</span><br><span class=\"line\">    (</span><br><span class=\"line\">      select ref_nsp.nspname ref_schema, ref_cl.relname ref_name,</span><br><span class=\"line\">      rwr_cl.relkind dep_type,</span><br><span class=\"line\">      rwr_nsp.nspname dep_schema,</span><br><span class=\"line\">      rwr_cl.relname dep_name</span><br><span class=\"line\">      from pg_depend dep</span><br><span class=\"line\">      join pg_class ref_cl on dep.refobjid = ref_cl.oid</span><br><span class=\"line\">      join pg_namespace ref_nsp on ref_cl.relnamespace = ref_nsp.oid</span><br><span class=\"line\">      join pg_rewrite rwr on dep.objid = rwr.oid</span><br><span class=\"line\">      join pg_class rwr_cl on rwr.ev_class = rwr_cl.oid</span><br><span class=\"line\">      join pg_namespace rwr_nsp on rwr_cl.relnamespace = rwr_nsp.oid</span><br><span class=\"line\">      where dep.deptype = &apos;n&apos;</span><br><span class=\"line\">      and dep.classid = &apos;pg_rewrite&apos;::regclass</span><br><span class=\"line\">    ) deps</span><br><span class=\"line\">    join recursive_deps on deps.ref_schema = recursive_deps.obj_schema and deps.ref_name = recursive_deps.obj_name</span><br><span class=\"line\">    where (deps.ref_schema != deps.dep_schema or deps.ref_name != deps.dep_name)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  select obj_schema, obj_name, obj_type, depth</span><br><span class=\"line\">  from recursive_deps</span><br><span class=\"line\">  where depth &gt; 0</span><br><span class=\"line\">  ) t</span><br><span class=\"line\">  group by obj_schema, obj_name, obj_type</span><br><span class=\"line\">  order by max(depth) desc</span><br><span class=\"line\">) loop</span><br><span class=\"line\"></span><br><span class=\"line\">  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">  select p_view_schema, p_view_name, &apos;COMMENT ON &apos; ||</span><br><span class=\"line\">  case</span><br><span class=\"line\">  when c.relkind = &apos;v&apos; then &apos;VIEW&apos;</span><br><span class=\"line\">  when c.relkind = &apos;m&apos; then &apos;MATERIALIZED VIEW&apos;</span><br><span class=\"line\">  else &apos;&apos;</span><br><span class=\"line\">  end</span><br><span class=\"line\">  || &apos; &apos; || n.nspname || &apos;.&apos; || c.relname || &apos; IS &apos;&apos;&apos; || replace(d.description, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;) || &apos;&apos;&apos;;&apos;, &apos;c&apos;</span><br><span class=\"line\">  from pg_class c</span><br><span class=\"line\">  join pg_namespace n on n.oid = c.relnamespace</span><br><span class=\"line\">  join pg_description d on d.objoid = c.oid and d.objsubid = 0</span><br><span class=\"line\">  where n.nspname = v_curr.obj_schema and c.relname = v_curr.obj_name and d.description is not null;</span><br><span class=\"line\"></span><br><span class=\"line\">  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">  select p_view_schema, p_view_name, &apos;COMMENT ON COLUMN &apos; || n.nspname || &apos;.&apos; || c.relname || &apos;.&apos; || a.attname || &apos; IS &apos;&apos;&apos; || replace(d.description, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;) || &apos;&apos;&apos;;&apos;, &apos;c&apos;</span><br><span class=\"line\">  from pg_class c</span><br><span class=\"line\">  join pg_attribute a on c.oid = a.attrelid</span><br><span class=\"line\">  join pg_namespace n on n.oid = c.relnamespace</span><br><span class=\"line\">  join pg_description d on d.objoid = c.oid and d.objsubid = a.attnum</span><br><span class=\"line\">  where n.nspname = v_curr.obj_schema and c.relname = v_curr.obj_name and d.description is not null;</span><br><span class=\"line\"></span><br><span class=\"line\">  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">  select p_view_schema, p_view_name, &apos;GRANT &apos; || privilege_type || &apos; ON &apos; || table_schema || &apos;.&quot;&apos; || table_name || &apos;&quot; TO &apos; || grantee, &apos;g&apos;</span><br><span class=\"line\">  from information_schema.role_table_grants</span><br><span class=\"line\">  where table_schema = v_curr.obj_schema and table_name = v_curr.obj_name;</span><br><span class=\"line\"></span><br><span class=\"line\">  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">  select p_view_schema, p_view_name, pg_get_indexdef(idx.oid), &apos;i&apos;</span><br><span class=\"line\">  from pg_index ind</span><br><span class=\"line\">  join pg_class idx on idx.oid = ind.indexrelid</span><br><span class=\"line\">  join pg_class tbl on tbl.oid = ind.indrelid</span><br><span class=\"line\">  left join pg_namespace ns on ns.oid = tbl.relnamespace</span><br><span class=\"line\">  where tbl.relname = v_curr.obj_name and ns.nspname = v_curr.obj_schema;</span><br><span class=\"line\"></span><br><span class=\"line\">  if v_curr.obj_type = &apos;v&apos; then</span><br><span class=\"line\">    insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">    select p_view_schema, p_view_name, &apos;CREATE VIEW &apos; || v_curr.obj_schema || &apos;.&quot;&apos; || v_curr.obj_name || &apos;&quot; AS &apos; || view_definition, &apos;v&apos;</span><br><span class=\"line\">    from information_schema.views</span><br><span class=\"line\">    where table_schema = v_curr.obj_schema and table_name = v_curr.obj_name;</span><br><span class=\"line\">  elsif v_curr.obj_type = &apos;m&apos; then</span><br><span class=\"line\">    insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">    select p_view_schema, p_view_name, &apos;CREATE MATERIALIZED VIEW &apos; || v_curr.obj_schema || &apos;.&quot;&apos; || v_curr.obj_name || &apos;&quot; AS &apos; || definition, &apos;m&apos;</span><br><span class=\"line\">    from pg_matviews</span><br><span class=\"line\">    where schemaname = v_curr.obj_schema and matviewname = v_curr.obj_name;</span><br><span class=\"line\">  end if;</span><br><span class=\"line\"></span><br><span class=\"line\">  execute &apos;DROP &apos; ||</span><br><span class=\"line\">  case</span><br><span class=\"line\">    when v_curr.obj_type = &apos;v&apos; then &apos;VIEW&apos;</span><br><span class=\"line\">    when v_curr.obj_type = &apos;m&apos; then &apos;MATERIALIZED VIEW&apos;</span><br><span class=\"line\">  end</span><br><span class=\"line\">  || &apos; &apos; || v_curr.obj_schema || &apos;.&quot;&apos; || v_curr.obj_name || &apos;&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">end loop;</span><br><span class=\"line\"></span><br><span class=\"line\">-- save foreign keys</span><br><span class=\"line\">for v_curr in</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT ref_nsp.nspname ref_schema, ref_cl.relname ref_name, const.conname conname, pg_catalog.pg_get_constraintdef(const.oid, true) as condef</span><br><span class=\"line\">    FROM pg_catalog.pg_constraint const</span><br><span class=\"line\">    JOIN pg_class ref_cl on const.conrelid = ref_cl.oid</span><br><span class=\"line\">    JOIN pg_namespace ref_nsp on ref_cl.relnamespace = ref_nsp.oid</span><br><span class=\"line\">    join pg_class orig_cl on const.confrelid = orig_cl.oid</span><br><span class=\"line\">    join pg_namespace orig_nsp on orig_cl.relnamespace = orig_nsp.oid</span><br><span class=\"line\"></span><br><span class=\"line\">    WHERE</span><br><span class=\"line\">      orig_cl.relname = p_view_name AND</span><br><span class=\"line\">      orig_nsp.nspname = p_view_schema AND</span><br><span class=\"line\">      const.contype = &apos;f&apos;</span><br><span class=\"line\">) loop</span><br><span class=\"line\">  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">    select p_view_schema, p_view_name,</span><br><span class=\"line\">      &apos;ALTER TABLE &apos; || v_curr.ref_schema || &apos;.&quot;&apos; || v_curr.ref_name || &apos;&quot; ADD CONSTRAINT &quot;&apos; || v_curr.conname || &apos;&quot; &apos; || v_curr.condef || &apos;;&apos;, &apos;f&apos;;</span><br><span class=\"line\">  execute &apos;ALTER TABLE &apos; || v_curr.ref_schema || &apos;.&quot;&apos; || v_curr.ref_name || &apos;&quot; DROP CONSTRAINT &quot;&apos; || v_curr.conname || &apos;&quot;&apos;;</span><br><span class=\"line\">end loop;</span><br><span class=\"line\">end;</span><br><span class=\"line\">$$</span><br><span class=\"line\">LANGUAGE plpgsql;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">--恢复依赖关系</span><br><span class=\"line\"></span><br><span class=\"line\">create or replace function deps_restore_dependencies(p_view_schema varchar, p_view_name varchar) returns void as</span><br><span class=\"line\">$$</span><br><span class=\"line\">declare</span><br><span class=\"line\">  v_curr record;</span><br><span class=\"line\">begin</span><br><span class=\"line\">for v_curr in</span><br><span class=\"line\">(</span><br><span class=\"line\">  select deps_ddl_to_run</span><br><span class=\"line\">  from deps_saved_ddl</span><br><span class=\"line\">  where deps_view_schema = p_view_schema and deps_view_name = p_view_name</span><br><span class=\"line\">  order by deps_id desc</span><br><span class=\"line\">) loop</span><br><span class=\"line\">  execute v_curr.deps_ddl_to_run;</span><br><span class=\"line\">end loop;</span><br><span class=\"line\">delete from deps_saved_ddl</span><br><span class=\"line\">where deps_view_schema = p_view_schema and deps_view_name = p_view_name;</span><br><span class=\"line\">end;</span><br><span class=\"line\">$$</span><br><span class=\"line\">LANGUAGE plpgsql;</span><br><span class=\"line\">--1. 创建表格保存依赖关系和ddl</span><br><span class=\"line\">--2. 保存依赖关系和去掉依赖关系</span><br><span class=\"line\">--select deps_save_and_drop_dependencies(&apos;xxxx&apos;,&apos;xxxx&apos;);</span><br><span class=\"line\">--4. drop 原视图或表</span><br><span class=\"line\">--drop  view xxxxxxx;</span><br><span class=\"line\"></span><br><span class=\"line\">--5. 根据新增字段后的DDL创建视图</span><br><span class=\"line\">--   create view xxxxx;</span><br><span class=\"line\">--6. 如果是表格，那么先插入数据</span><br><span class=\"line\">--7. 恢复所有与之依赖关系的视图</span><br><span class=\"line\">--select deps_restore_dependencies(&apos;public&apos;,&apos;municipality&apos;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>有时候需要对存在引用关系的视图或者表进行新增字段，存在引用关系的表是不允许直接drop掉，如果需要新增字段的话，只能把存在引用关系的表逐一解除，但存在很多表的时候，这时候就很困难了。下面分享一个快速新增字段的sql脚本。<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">视图依赖关系记录以及保存，修改完毕后，重新执行所有视图函数</span><br><span class=\"line\">*/</span><br><span class=\"line\">--drop table deps_saved_ddl cascade ;</span><br><span class=\"line\"></span><br><span class=\"line\">/*1.创建表保存相关信息*/</span><br><span class=\"line\">create table if not exists deps_saved_ddl</span><br><span class=\"line\">(</span><br><span class=\"line\">  deps_id          serial primary key,</span><br><span class=\"line\">  deps_view_schema varchar(255),</span><br><span class=\"line\">  deps_view_name   varchar(255),</span><br><span class=\"line\">  deps_ddl_to_run  text,</span><br><span class=\"line\">  deps_type        char</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/*创建依赖保存和删除依赖函数*/</span><br><span class=\"line\">create or replace function deps_save_and_drop_dependencies(p_view_schema varchar, p_view_name varchar) returns void as</span><br><span class=\"line\">$$</span><br><span class=\"line\">declare</span><br><span class=\"line\">  v_curr record;</span><br><span class=\"line\">begin</span><br><span class=\"line\">for v_curr in</span><br><span class=\"line\">(</span><br><span class=\"line\">  select obj_schema, obj_name, obj_type from</span><br><span class=\"line\">  (</span><br><span class=\"line\">  with recursive recursive_deps(obj_schema, obj_name, obj_type, depth) as</span><br><span class=\"line\">  (</span><br><span class=\"line\">    select p_view_schema, p_view_name, null::varchar, 0</span><br><span class=\"line\">    union</span><br><span class=\"line\">    select dep_schema::varchar, dep_name::varchar, dep_type::varchar, recursive_deps.depth + 1 from</span><br><span class=\"line\">    (</span><br><span class=\"line\">      select ref_nsp.nspname ref_schema, ref_cl.relname ref_name,</span><br><span class=\"line\">      rwr_cl.relkind dep_type,</span><br><span class=\"line\">      rwr_nsp.nspname dep_schema,</span><br><span class=\"line\">      rwr_cl.relname dep_name</span><br><span class=\"line\">      from pg_depend dep</span><br><span class=\"line\">      join pg_class ref_cl on dep.refobjid = ref_cl.oid</span><br><span class=\"line\">      join pg_namespace ref_nsp on ref_cl.relnamespace = ref_nsp.oid</span><br><span class=\"line\">      join pg_rewrite rwr on dep.objid = rwr.oid</span><br><span class=\"line\">      join pg_class rwr_cl on rwr.ev_class = rwr_cl.oid</span><br><span class=\"line\">      join pg_namespace rwr_nsp on rwr_cl.relnamespace = rwr_nsp.oid</span><br><span class=\"line\">      where dep.deptype = &apos;n&apos;</span><br><span class=\"line\">      and dep.classid = &apos;pg_rewrite&apos;::regclass</span><br><span class=\"line\">    ) deps</span><br><span class=\"line\">    join recursive_deps on deps.ref_schema = recursive_deps.obj_schema and deps.ref_name = recursive_deps.obj_name</span><br><span class=\"line\">    where (deps.ref_schema != deps.dep_schema or deps.ref_name != deps.dep_name)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  select obj_schema, obj_name, obj_type, depth</span><br><span class=\"line\">  from recursive_deps</span><br><span class=\"line\">  where depth &gt; 0</span><br><span class=\"line\">  ) t</span><br><span class=\"line\">  group by obj_schema, obj_name, obj_type</span><br><span class=\"line\">  order by max(depth) desc</span><br><span class=\"line\">) loop</span><br><span class=\"line\"></span><br><span class=\"line\">  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">  select p_view_schema, p_view_name, &apos;COMMENT ON &apos; ||</span><br><span class=\"line\">  case</span><br><span class=\"line\">  when c.relkind = &apos;v&apos; then &apos;VIEW&apos;</span><br><span class=\"line\">  when c.relkind = &apos;m&apos; then &apos;MATERIALIZED VIEW&apos;</span><br><span class=\"line\">  else &apos;&apos;</span><br><span class=\"line\">  end</span><br><span class=\"line\">  || &apos; &apos; || n.nspname || &apos;.&apos; || c.relname || &apos; IS &apos;&apos;&apos; || replace(d.description, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;) || &apos;&apos;&apos;;&apos;, &apos;c&apos;</span><br><span class=\"line\">  from pg_class c</span><br><span class=\"line\">  join pg_namespace n on n.oid = c.relnamespace</span><br><span class=\"line\">  join pg_description d on d.objoid = c.oid and d.objsubid = 0</span><br><span class=\"line\">  where n.nspname = v_curr.obj_schema and c.relname = v_curr.obj_name and d.description is not null;</span><br><span class=\"line\"></span><br><span class=\"line\">  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">  select p_view_schema, p_view_name, &apos;COMMENT ON COLUMN &apos; || n.nspname || &apos;.&apos; || c.relname || &apos;.&apos; || a.attname || &apos; IS &apos;&apos;&apos; || replace(d.description, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;) || &apos;&apos;&apos;;&apos;, &apos;c&apos;</span><br><span class=\"line\">  from pg_class c</span><br><span class=\"line\">  join pg_attribute a on c.oid = a.attrelid</span><br><span class=\"line\">  join pg_namespace n on n.oid = c.relnamespace</span><br><span class=\"line\">  join pg_description d on d.objoid = c.oid and d.objsubid = a.attnum</span><br><span class=\"line\">  where n.nspname = v_curr.obj_schema and c.relname = v_curr.obj_name and d.description is not null;</span><br><span class=\"line\"></span><br><span class=\"line\">  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">  select p_view_schema, p_view_name, &apos;GRANT &apos; || privilege_type || &apos; ON &apos; || table_schema || &apos;.&quot;&apos; || table_name || &apos;&quot; TO &apos; || grantee, &apos;g&apos;</span><br><span class=\"line\">  from information_schema.role_table_grants</span><br><span class=\"line\">  where table_schema = v_curr.obj_schema and table_name = v_curr.obj_name;</span><br><span class=\"line\"></span><br><span class=\"line\">  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">  select p_view_schema, p_view_name, pg_get_indexdef(idx.oid), &apos;i&apos;</span><br><span class=\"line\">  from pg_index ind</span><br><span class=\"line\">  join pg_class idx on idx.oid = ind.indexrelid</span><br><span class=\"line\">  join pg_class tbl on tbl.oid = ind.indrelid</span><br><span class=\"line\">  left join pg_namespace ns on ns.oid = tbl.relnamespace</span><br><span class=\"line\">  where tbl.relname = v_curr.obj_name and ns.nspname = v_curr.obj_schema;</span><br><span class=\"line\"></span><br><span class=\"line\">  if v_curr.obj_type = &apos;v&apos; then</span><br><span class=\"line\">    insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">    select p_view_schema, p_view_name, &apos;CREATE VIEW &apos; || v_curr.obj_schema || &apos;.&quot;&apos; || v_curr.obj_name || &apos;&quot; AS &apos; || view_definition, &apos;v&apos;</span><br><span class=\"line\">    from information_schema.views</span><br><span class=\"line\">    where table_schema = v_curr.obj_schema and table_name = v_curr.obj_name;</span><br><span class=\"line\">  elsif v_curr.obj_type = &apos;m&apos; then</span><br><span class=\"line\">    insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">    select p_view_schema, p_view_name, &apos;CREATE MATERIALIZED VIEW &apos; || v_curr.obj_schema || &apos;.&quot;&apos; || v_curr.obj_name || &apos;&quot; AS &apos; || definition, &apos;m&apos;</span><br><span class=\"line\">    from pg_matviews</span><br><span class=\"line\">    where schemaname = v_curr.obj_schema and matviewname = v_curr.obj_name;</span><br><span class=\"line\">  end if;</span><br><span class=\"line\"></span><br><span class=\"line\">  execute &apos;DROP &apos; ||</span><br><span class=\"line\">  case</span><br><span class=\"line\">    when v_curr.obj_type = &apos;v&apos; then &apos;VIEW&apos;</span><br><span class=\"line\">    when v_curr.obj_type = &apos;m&apos; then &apos;MATERIALIZED VIEW&apos;</span><br><span class=\"line\">  end</span><br><span class=\"line\">  || &apos; &apos; || v_curr.obj_schema || &apos;.&quot;&apos; || v_curr.obj_name || &apos;&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">end loop;</span><br><span class=\"line\"></span><br><span class=\"line\">-- save foreign keys</span><br><span class=\"line\">for v_curr in</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT ref_nsp.nspname ref_schema, ref_cl.relname ref_name, const.conname conname, pg_catalog.pg_get_constraintdef(const.oid, true) as condef</span><br><span class=\"line\">    FROM pg_catalog.pg_constraint const</span><br><span class=\"line\">    JOIN pg_class ref_cl on const.conrelid = ref_cl.oid</span><br><span class=\"line\">    JOIN pg_namespace ref_nsp on ref_cl.relnamespace = ref_nsp.oid</span><br><span class=\"line\">    join pg_class orig_cl on const.confrelid = orig_cl.oid</span><br><span class=\"line\">    join pg_namespace orig_nsp on orig_cl.relnamespace = orig_nsp.oid</span><br><span class=\"line\"></span><br><span class=\"line\">    WHERE</span><br><span class=\"line\">      orig_cl.relname = p_view_name AND</span><br><span class=\"line\">      orig_nsp.nspname = p_view_schema AND</span><br><span class=\"line\">      const.contype = &apos;f&apos;</span><br><span class=\"line\">) loop</span><br><span class=\"line\">  insert into deps_saved_ddl(deps_view_schema, deps_view_name, deps_ddl_to_run, deps_type)</span><br><span class=\"line\">    select p_view_schema, p_view_name,</span><br><span class=\"line\">      &apos;ALTER TABLE &apos; || v_curr.ref_schema || &apos;.&quot;&apos; || v_curr.ref_name || &apos;&quot; ADD CONSTRAINT &quot;&apos; || v_curr.conname || &apos;&quot; &apos; || v_curr.condef || &apos;;&apos;, &apos;f&apos;;</span><br><span class=\"line\">  execute &apos;ALTER TABLE &apos; || v_curr.ref_schema || &apos;.&quot;&apos; || v_curr.ref_name || &apos;&quot; DROP CONSTRAINT &quot;&apos; || v_curr.conname || &apos;&quot;&apos;;</span><br><span class=\"line\">end loop;</span><br><span class=\"line\">end;</span><br><span class=\"line\">$$</span><br><span class=\"line\">LANGUAGE plpgsql;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">--恢复依赖关系</span><br><span class=\"line\"></span><br><span class=\"line\">create or replace function deps_restore_dependencies(p_view_schema varchar, p_view_name varchar) returns void as</span><br><span class=\"line\">$$</span><br><span class=\"line\">declare</span><br><span class=\"line\">  v_curr record;</span><br><span class=\"line\">begin</span><br><span class=\"line\">for v_curr in</span><br><span class=\"line\">(</span><br><span class=\"line\">  select deps_ddl_to_run</span><br><span class=\"line\">  from deps_saved_ddl</span><br><span class=\"line\">  where deps_view_schema = p_view_schema and deps_view_name = p_view_name</span><br><span class=\"line\">  order by deps_id desc</span><br><span class=\"line\">) loop</span><br><span class=\"line\">  execute v_curr.deps_ddl_to_run;</span><br><span class=\"line\">end loop;</span><br><span class=\"line\">delete from deps_saved_ddl</span><br><span class=\"line\">where deps_view_schema = p_view_schema and deps_view_name = p_view_name;</span><br><span class=\"line\">end;</span><br><span class=\"line\">$$</span><br><span class=\"line\">LANGUAGE plpgsql;</span><br><span class=\"line\">--1. 创建表格保存依赖关系和ddl</span><br><span class=\"line\">--2. 保存依赖关系和去掉依赖关系</span><br><span class=\"line\">--select deps_save_and_drop_dependencies(&apos;xxxx&apos;,&apos;xxxx&apos;);</span><br><span class=\"line\">--4. drop 原视图或表</span><br><span class=\"line\">--drop  view xxxxxxx;</span><br><span class=\"line\"></span><br><span class=\"line\">--5. 根据新增字段后的DDL创建视图</span><br><span class=\"line\">--   create view xxxxx;</span><br><span class=\"line\">--6. 如果是表格，那么先插入数据</span><br><span class=\"line\">--7. 恢复所有与之依赖关系的视图</span><br><span class=\"line\">--select deps_restore_dependencies(&apos;public&apos;,&apos;municipality&apos;);</span><br></pre></td></tr></table></figure>"},{"title":"增长黑客GrowthHacker","comments":1,"date":"2018-07-24T00:56:02.000Z","toc":true,"_content":"\n# 增长黑客\n<!--more-->\n### 为何推荐增长黑客\n\n###### 前些天，浏览技术交流群里的99+聊天信息。一个全新的职业概念出现其中（全新是对我而言，见识少，见笑了）：【增长黑客Growth Hacker】\n###### 怀着发现新大陆的鸡冻的心情，我开始了对【Growth Hacker】的搜索求知路。\n###### 先来简单的看看Andrew Chen 在Growth Hacker is the New VP Marketing中对 【Growth Hacker】的定义：\n> Growth hackers are a hybrid of marketer and coder, one who looks at the traditional question of \"How do I get customers for my product?\" and answers with A/B tests, landing pages, viral factor, email deliverability, and Open Graph.\n增长黑客是市场营销人员和工程技术人员（自嘲一下为码农)的混血儿，他们着眼于【产品该如何获取用户】等传统问题，并通过A/B测试、落地页等方式解决，同时创造性去探寻促进增长的新思路。\n\n##### 简单地说，增长黑客就是利用技术分析等高效手段以低成本高速度的获取和存留客户，以快速增长为目标，集市场营销、数据分析与产品研发于一体的全能人才。增长黑客就像AI那样那么炙手可热，企业也需要这样以数据驱动增长的coder。\n\n##### 上面一条只是我个人的理解，为了不把你带入坑，特意在这里准备了《增长黑客手册》供您阅读，一起学习进步。\n\n\n### 获取方式\n公众号Python孙行者聊天页面回复关键词“增长黑客手册”即可！\n### 涵括内容\n##### 01什么是增长黑客\n##### 02如何成为一名增长黑客\n##### 03增长黑客常用的7种数据分析方法\n##### 04增长黑客必备的8项能力\n##### 05最受增长黑客欢迎的9种工具\n##### 06硅谷十大增长黑客经典案例\n##### 07从入门到精通：增长黑客必读的10本书籍\n##### 08Fackbook早期员工教你如何组建增长团队\n##### 09增长黑客之父Sean Ellis:如何用数据驱动增长\n","source":"_posts/增长黑客GrowthHacker.md","raw":"---\ntitle: 增长黑客GrowthHacker\ncomments: true\ndate: 2018-07-24 08:56:02\ntoc: true\ncategories:\n- Python\n- Fun\ntags:\n- GrowthHacker\n---\n\n# 增长黑客\n<!--more-->\n### 为何推荐增长黑客\n\n###### 前些天，浏览技术交流群里的99+聊天信息。一个全新的职业概念出现其中（全新是对我而言，见识少，见笑了）：【增长黑客Growth Hacker】\n###### 怀着发现新大陆的鸡冻的心情，我开始了对【Growth Hacker】的搜索求知路。\n###### 先来简单的看看Andrew Chen 在Growth Hacker is the New VP Marketing中对 【Growth Hacker】的定义：\n> Growth hackers are a hybrid of marketer and coder, one who looks at the traditional question of \"How do I get customers for my product?\" and answers with A/B tests, landing pages, viral factor, email deliverability, and Open Graph.\n增长黑客是市场营销人员和工程技术人员（自嘲一下为码农)的混血儿，他们着眼于【产品该如何获取用户】等传统问题，并通过A/B测试、落地页等方式解决，同时创造性去探寻促进增长的新思路。\n\n##### 简单地说，增长黑客就是利用技术分析等高效手段以低成本高速度的获取和存留客户，以快速增长为目标，集市场营销、数据分析与产品研发于一体的全能人才。增长黑客就像AI那样那么炙手可热，企业也需要这样以数据驱动增长的coder。\n\n##### 上面一条只是我个人的理解，为了不把你带入坑，特意在这里准备了《增长黑客手册》供您阅读，一起学习进步。\n\n\n### 获取方式\n公众号Python孙行者聊天页面回复关键词“增长黑客手册”即可！\n### 涵括内容\n##### 01什么是增长黑客\n##### 02如何成为一名增长黑客\n##### 03增长黑客常用的7种数据分析方法\n##### 04增长黑客必备的8项能力\n##### 05最受增长黑客欢迎的9种工具\n##### 06硅谷十大增长黑客经典案例\n##### 07从入门到精通：增长黑客必读的10本书籍\n##### 08Fackbook早期员工教你如何组建增长团队\n##### 09增长黑客之父Sean Ellis:如何用数据驱动增长\n","slug":"增长黑客GrowthHacker","published":1,"updated":"2019-05-25T09:32:43.110Z","layout":"post","photos":[],"link":"","_id":"cjw3bjte4002xe5vxf58com4a","content":"<h1 id=\"增长黑客\"><a href=\"#增长黑客\" class=\"headerlink\" title=\"增长黑客\"></a>增长黑客</h1><a id=\"more\"></a>\n<h3 id=\"为何推荐增长黑客\"><a href=\"#为何推荐增长黑客\" class=\"headerlink\" title=\"为何推荐增长黑客\"></a>为何推荐增长黑客</h3><h6 id=\"前些天，浏览技术交流群里的99-聊天信息。一个全新的职业概念出现其中（全新是对我而言，见识少，见笑了）：【增长黑客Growth-Hacker】\"><a href=\"#前些天，浏览技术交流群里的99-聊天信息。一个全新的职业概念出现其中（全新是对我而言，见识少，见笑了）：【增长黑客Growth-Hacker】\" class=\"headerlink\" title=\"前些天，浏览技术交流群里的99+聊天信息。一个全新的职业概念出现其中（全新是对我而言，见识少，见笑了）：【增长黑客Growth Hacker】\"></a>前些天，浏览技术交流群里的99+聊天信息。一个全新的职业概念出现其中（全新是对我而言，见识少，见笑了）：【增长黑客Growth Hacker】</h6><h6 id=\"怀着发现新大陆的鸡冻的心情，我开始了对【Growth-Hacker】的搜索求知路。\"><a href=\"#怀着发现新大陆的鸡冻的心情，我开始了对【Growth-Hacker】的搜索求知路。\" class=\"headerlink\" title=\"怀着发现新大陆的鸡冻的心情，我开始了对【Growth Hacker】的搜索求知路。\"></a>怀着发现新大陆的鸡冻的心情，我开始了对【Growth Hacker】的搜索求知路。</h6><h6 id=\"先来简单的看看Andrew-Chen-在Growth-Hacker-is-the-New-VP-Marketing中对-【Growth-Hacker】的定义：\"><a href=\"#先来简单的看看Andrew-Chen-在Growth-Hacker-is-the-New-VP-Marketing中对-【Growth-Hacker】的定义：\" class=\"headerlink\" title=\"先来简单的看看Andrew Chen 在Growth Hacker is the New VP Marketing中对 【Growth Hacker】的定义：\"></a>先来简单的看看Andrew Chen 在Growth Hacker is the New VP Marketing中对 【Growth Hacker】的定义：</h6><blockquote>\n<p>Growth hackers are a hybrid of marketer and coder, one who looks at the traditional question of “How do I get customers for my product?” and answers with A/B tests, landing pages, viral factor, email deliverability, and Open Graph.<br>增长黑客是市场营销人员和工程技术人员（自嘲一下为码农)的混血儿，他们着眼于【产品该如何获取用户】等传统问题，并通过A/B测试、落地页等方式解决，同时创造性去探寻促进增长的新思路。</p>\n</blockquote>\n<h5 id=\"简单地说，增长黑客就是利用技术分析等高效手段以低成本高速度的获取和存留客户，以快速增长为目标，集市场营销、数据分析与产品研发于一体的全能人才。增长黑客就像AI那样那么炙手可热，企业也需要这样以数据驱动增长的coder。\"><a href=\"#简单地说，增长黑客就是利用技术分析等高效手段以低成本高速度的获取和存留客户，以快速增长为目标，集市场营销、数据分析与产品研发于一体的全能人才。增长黑客就像AI那样那么炙手可热，企业也需要这样以数据驱动增长的coder。\" class=\"headerlink\" title=\"简单地说，增长黑客就是利用技术分析等高效手段以低成本高速度的获取和存留客户，以快速增长为目标，集市场营销、数据分析与产品研发于一体的全能人才。增长黑客就像AI那样那么炙手可热，企业也需要这样以数据驱动增长的coder。\"></a>简单地说，增长黑客就是利用技术分析等高效手段以低成本高速度的获取和存留客户，以快速增长为目标，集市场营销、数据分析与产品研发于一体的全能人才。增长黑客就像AI那样那么炙手可热，企业也需要这样以数据驱动增长的coder。</h5><h5 id=\"上面一条只是我个人的理解，为了不把你带入坑，特意在这里准备了《增长黑客手册》供您阅读，一起学习进步。\"><a href=\"#上面一条只是我个人的理解，为了不把你带入坑，特意在这里准备了《增长黑客手册》供您阅读，一起学习进步。\" class=\"headerlink\" title=\"上面一条只是我个人的理解，为了不把你带入坑，特意在这里准备了《增长黑客手册》供您阅读，一起学习进步。\"></a>上面一条只是我个人的理解，为了不把你带入坑，特意在这里准备了《增长黑客手册》供您阅读，一起学习进步。</h5><h3 id=\"获取方式\"><a href=\"#获取方式\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h3><p>公众号Python孙行者聊天页面回复关键词“增长黑客手册”即可！</p>\n<h3 id=\"涵括内容\"><a href=\"#涵括内容\" class=\"headerlink\" title=\"涵括内容\"></a>涵括内容</h3><h5 id=\"01什么是增长黑客\"><a href=\"#01什么是增长黑客\" class=\"headerlink\" title=\"01什么是增长黑客\"></a>01什么是增长黑客</h5><h5 id=\"02如何成为一名增长黑客\"><a href=\"#02如何成为一名增长黑客\" class=\"headerlink\" title=\"02如何成为一名增长黑客\"></a>02如何成为一名增长黑客</h5><h5 id=\"03增长黑客常用的7种数据分析方法\"><a href=\"#03增长黑客常用的7种数据分析方法\" class=\"headerlink\" title=\"03增长黑客常用的7种数据分析方法\"></a>03增长黑客常用的7种数据分析方法</h5><h5 id=\"04增长黑客必备的8项能力\"><a href=\"#04增长黑客必备的8项能力\" class=\"headerlink\" title=\"04增长黑客必备的8项能力\"></a>04增长黑客必备的8项能力</h5><h5 id=\"05最受增长黑客欢迎的9种工具\"><a href=\"#05最受增长黑客欢迎的9种工具\" class=\"headerlink\" title=\"05最受增长黑客欢迎的9种工具\"></a>05最受增长黑客欢迎的9种工具</h5><h5 id=\"06硅谷十大增长黑客经典案例\"><a href=\"#06硅谷十大增长黑客经典案例\" class=\"headerlink\" title=\"06硅谷十大增长黑客经典案例\"></a>06硅谷十大增长黑客经典案例</h5><h5 id=\"07从入门到精通：增长黑客必读的10本书籍\"><a href=\"#07从入门到精通：增长黑客必读的10本书籍\" class=\"headerlink\" title=\"07从入门到精通：增长黑客必读的10本书籍\"></a>07从入门到精通：增长黑客必读的10本书籍</h5><h5 id=\"08Fackbook早期员工教你如何组建增长团队\"><a href=\"#08Fackbook早期员工教你如何组建增长团队\" class=\"headerlink\" title=\"08Fackbook早期员工教你如何组建增长团队\"></a>08Fackbook早期员工教你如何组建增长团队</h5><h5 id=\"09增长黑客之父Sean-Ellis-如何用数据驱动增长\"><a href=\"#09增长黑客之父Sean-Ellis-如何用数据驱动增长\" class=\"headerlink\" title=\"09增长黑客之父Sean Ellis:如何用数据驱动增长\"></a>09增长黑客之父Sean Ellis:如何用数据驱动增长</h5>","site":{"data":{}},"excerpt":"<h1 id=\"增长黑客\"><a href=\"#增长黑客\" class=\"headerlink\" title=\"增长黑客\"></a>增长黑客</h1>","more":"<h3 id=\"为何推荐增长黑客\"><a href=\"#为何推荐增长黑客\" class=\"headerlink\" title=\"为何推荐增长黑客\"></a>为何推荐增长黑客</h3><h6 id=\"前些天，浏览技术交流群里的99-聊天信息。一个全新的职业概念出现其中（全新是对我而言，见识少，见笑了）：【增长黑客Growth-Hacker】\"><a href=\"#前些天，浏览技术交流群里的99-聊天信息。一个全新的职业概念出现其中（全新是对我而言，见识少，见笑了）：【增长黑客Growth-Hacker】\" class=\"headerlink\" title=\"前些天，浏览技术交流群里的99+聊天信息。一个全新的职业概念出现其中（全新是对我而言，见识少，见笑了）：【增长黑客Growth Hacker】\"></a>前些天，浏览技术交流群里的99+聊天信息。一个全新的职业概念出现其中（全新是对我而言，见识少，见笑了）：【增长黑客Growth Hacker】</h6><h6 id=\"怀着发现新大陆的鸡冻的心情，我开始了对【Growth-Hacker】的搜索求知路。\"><a href=\"#怀着发现新大陆的鸡冻的心情，我开始了对【Growth-Hacker】的搜索求知路。\" class=\"headerlink\" title=\"怀着发现新大陆的鸡冻的心情，我开始了对【Growth Hacker】的搜索求知路。\"></a>怀着发现新大陆的鸡冻的心情，我开始了对【Growth Hacker】的搜索求知路。</h6><h6 id=\"先来简单的看看Andrew-Chen-在Growth-Hacker-is-the-New-VP-Marketing中对-【Growth-Hacker】的定义：\"><a href=\"#先来简单的看看Andrew-Chen-在Growth-Hacker-is-the-New-VP-Marketing中对-【Growth-Hacker】的定义：\" class=\"headerlink\" title=\"先来简单的看看Andrew Chen 在Growth Hacker is the New VP Marketing中对 【Growth Hacker】的定义：\"></a>先来简单的看看Andrew Chen 在Growth Hacker is the New VP Marketing中对 【Growth Hacker】的定义：</h6><blockquote>\n<p>Growth hackers are a hybrid of marketer and coder, one who looks at the traditional question of “How do I get customers for my product?” and answers with A/B tests, landing pages, viral factor, email deliverability, and Open Graph.<br>增长黑客是市场营销人员和工程技术人员（自嘲一下为码农)的混血儿，他们着眼于【产品该如何获取用户】等传统问题，并通过A/B测试、落地页等方式解决，同时创造性去探寻促进增长的新思路。</p>\n</blockquote>\n<h5 id=\"简单地说，增长黑客就是利用技术分析等高效手段以低成本高速度的获取和存留客户，以快速增长为目标，集市场营销、数据分析与产品研发于一体的全能人才。增长黑客就像AI那样那么炙手可热，企业也需要这样以数据驱动增长的coder。\"><a href=\"#简单地说，增长黑客就是利用技术分析等高效手段以低成本高速度的获取和存留客户，以快速增长为目标，集市场营销、数据分析与产品研发于一体的全能人才。增长黑客就像AI那样那么炙手可热，企业也需要这样以数据驱动增长的coder。\" class=\"headerlink\" title=\"简单地说，增长黑客就是利用技术分析等高效手段以低成本高速度的获取和存留客户，以快速增长为目标，集市场营销、数据分析与产品研发于一体的全能人才。增长黑客就像AI那样那么炙手可热，企业也需要这样以数据驱动增长的coder。\"></a>简单地说，增长黑客就是利用技术分析等高效手段以低成本高速度的获取和存留客户，以快速增长为目标，集市场营销、数据分析与产品研发于一体的全能人才。增长黑客就像AI那样那么炙手可热，企业也需要这样以数据驱动增长的coder。</h5><h5 id=\"上面一条只是我个人的理解，为了不把你带入坑，特意在这里准备了《增长黑客手册》供您阅读，一起学习进步。\"><a href=\"#上面一条只是我个人的理解，为了不把你带入坑，特意在这里准备了《增长黑客手册》供您阅读，一起学习进步。\" class=\"headerlink\" title=\"上面一条只是我个人的理解，为了不把你带入坑，特意在这里准备了《增长黑客手册》供您阅读，一起学习进步。\"></a>上面一条只是我个人的理解，为了不把你带入坑，特意在这里准备了《增长黑客手册》供您阅读，一起学习进步。</h5><h3 id=\"获取方式\"><a href=\"#获取方式\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h3><p>公众号Python孙行者聊天页面回复关键词“增长黑客手册”即可！</p>\n<h3 id=\"涵括内容\"><a href=\"#涵括内容\" class=\"headerlink\" title=\"涵括内容\"></a>涵括内容</h3><h5 id=\"01什么是增长黑客\"><a href=\"#01什么是增长黑客\" class=\"headerlink\" title=\"01什么是增长黑客\"></a>01什么是增长黑客</h5><h5 id=\"02如何成为一名增长黑客\"><a href=\"#02如何成为一名增长黑客\" class=\"headerlink\" title=\"02如何成为一名增长黑客\"></a>02如何成为一名增长黑客</h5><h5 id=\"03增长黑客常用的7种数据分析方法\"><a href=\"#03增长黑客常用的7种数据分析方法\" class=\"headerlink\" title=\"03增长黑客常用的7种数据分析方法\"></a>03增长黑客常用的7种数据分析方法</h5><h5 id=\"04增长黑客必备的8项能力\"><a href=\"#04增长黑客必备的8项能力\" class=\"headerlink\" title=\"04增长黑客必备的8项能力\"></a>04增长黑客必备的8项能力</h5><h5 id=\"05最受增长黑客欢迎的9种工具\"><a href=\"#05最受增长黑客欢迎的9种工具\" class=\"headerlink\" title=\"05最受增长黑客欢迎的9种工具\"></a>05最受增长黑客欢迎的9种工具</h5><h5 id=\"06硅谷十大增长黑客经典案例\"><a href=\"#06硅谷十大增长黑客经典案例\" class=\"headerlink\" title=\"06硅谷十大增长黑客经典案例\"></a>06硅谷十大增长黑客经典案例</h5><h5 id=\"07从入门到精通：增长黑客必读的10本书籍\"><a href=\"#07从入门到精通：增长黑客必读的10本书籍\" class=\"headerlink\" title=\"07从入门到精通：增长黑客必读的10本书籍\"></a>07从入门到精通：增长黑客必读的10本书籍</h5><h5 id=\"08Fackbook早期员工教你如何组建增长团队\"><a href=\"#08Fackbook早期员工教你如何组建增长团队\" class=\"headerlink\" title=\"08Fackbook早期员工教你如何组建增长团队\"></a>08Fackbook早期员工教你如何组建增长团队</h5><h5 id=\"09增长黑客之父Sean-Ellis-如何用数据驱动增长\"><a href=\"#09增长黑客之父Sean-Ellis-如何用数据驱动增长\" class=\"headerlink\" title=\"09增长黑客之父Sean Ellis:如何用数据驱动增长\"></a>09增长黑客之父Sean Ellis:如何用数据驱动增长</h5>"},{"title":"正则表达式用法注意点","comments":1,"date":"2018-07-26T07:30:02.000Z","toc":true,"_content":"主要总结一下Python中经常用到的一些正则表达式与方法<!--more-->\n### 正则表达式基础知识\n![](http://paresur4s.bkt.clouddn.com/FqKyCoEJlzbUMVTX1FYwpLsKWJmf)\n### re.compile\ncompile 函数用于编译正则表达式，生成一个 Pattern 对象\n```\nimport re\n\nregex = re.compile(r'(\\d+)')\n```\n### re.match\nmatch(string[, pos[, endpos]])方法回从字符串开头开始匹配，也可以指定起始位置和结束位置，找到第一个匹配就返回。成功匹配的话把各分组匹配到的字符串放入到一个Match对象，需要使用group(分组编号)获取对应分组的字符串或使用groups()方法获取所有分组的结果,匹配不成功返回None。\n\n```\nimport re\n\nregex = re.compile(r'(\\d+)')\nstr1 = '66abcd78dfg9sdf0'\n\n# match 的使用\nresult = regex.match(str1)\n\nprint(result.groups()) # ('66',)\nprint(result.group(1)) # 66\n```\n***但是，match返回的是每个分组的结果，所以必须在正则表达式里带上()进行分组，否则(即一个()分组都没)，在存在满足正则表达式的情况下使用groups返回的很有可能是一个空的元组***\n```\nimport re\n\n# 正则没有使用分组\nregex = re.compile(r'\\d+')\nstr1 = '66abcd78dfg9sdf0'\n\n# match 的使用\nresult = regex.match(str1)\n\nprint(result.groups()) # ()\nprint(result.group(1)) #  IndexError: no such group\n```\n### re.search\nsearch(string[, pos[, endpos]])方法用于查找字符串的任何位置，也可以指定起始和结束位置，只要找到了一个匹配的结果就返回。使用方法和match一样，区别在于match是从字符串开头，search不限定从字符串开头匹配。匹配不成功返回None\n```import re\n\nregex = re.compile(r'(\\d+)')\nstr1 = 'abcd78dfg9sdf0'\n\n# search 的使用\nresult = regex.search(str1)\n\nprint(result.groups()) # ('78',)\nprint(result.group(1)) #  78\n```\n***因为search返回的是每个分组的结果，和match一样，所以必须在正则表达式里带上()进行分组，否则(即一个()分组都没)，在存在满足正则表达式的情况下使用groups返回的很有可能是一个空的元组***\n```\nimport re\n\nregex = re.compile(r'\\d+')\nstr1 = 'abcd78dfg9sdf0'\n\n# search 的使用\nresult = regex.search(str1)\n\nprint(result.groups()) # ()\nprint(result.group(1)) #  IndexError: no such group\n```\n### re.findall\nfindall(string[, pos[, endpos]])方法是查找这个字符串符合正则表达式的所有结果并放到一个列表中，返回一个列表，而不是成功匹配一个就结束，全部匹配不成功就返回空列表[]。\n```\nimport re\n\nregex = re.compile(r'\\d+')\nstr1 = '66abcd78dfg9sdf0'\n\n# findall 的使用\nresult = regex.findall(str1)\nprint(result) # ['66', '78', '9', '0']\n```\n### re.finditer\nfinditer 方法的行为跟 findall 的行为类似，也是搜索整个字符串，获得所有匹配的结果。但它返回一个顺序访问每一个匹配结果（Match 对象）的迭代器。\n```\nimport re\n\nregex = re.compile(r'\\d+')\nstr1 = '66abcd78dfg9sdf0'\n\n# finditer 的使用\nresult = regex.finditer(str1)\nprint(type(result)) # <class 'callable_iterator'>\n\nfor item in result: # item 是Match 对象\n    print(item.group())\n#66\n#78\n#9\n#0\n```\n### re.split\nsplit(string[, maxsplit])按照匹配到的子符串将原字符串分割后返回到一个列表，maxsplit 用于指定最大分割次数，不指定将全部分割。\n```\nimport re\n\nregex = re.compile(r'[\\s;,:]+')\nstr1 = 'a;b,c:d   e f'\n\nprint(regex.split(str1))\n# ['a', 'b', 'c', 'd', 'e', 'f']\n```\n### re.sub\nsub(repl, string[, count])方法用于替换。\n其中，repl 可以是字符串也可以是一个**函数**,count 用于指定最多替换次数，不指定时全部替换即会像findall那样匹配整个字符串。\n* 如果 repl 是字符串，则会使用 repl 去替换字符串每一个匹配的子串，并返回替换后的字符串，另外，repl 还可以使用 id 的形式来引用分组，但不能使用编号 0；\n```\nimport re\n\nregex = re.compile(r'(\\w+) (\\w+)')\nstr1 = 'hello 123, hello 456'\n\nprint (regex.sub(r'hello world', str1))\n# hello world, hello world\n\nprint (regex.sub(r'\\2 \\1', str1))\n# 123 hello, 456 hello\n\n```\n* 如果 repl 是函数，这个方法应当只接受一个参数（Match 对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。\n\n```\nimport re\nregex = re.compile(r'(\\w+) (\\w+)')\nstr1 = 'hello 123, hello 456'\ndef func(m):\n    print(m)\n    # <_sre.SRE_Match object; span=(0, 9), match='hello 123'>;<_sre.SRE_Match object; span=(11, 20), match='hello 456'>\n    print(m.group(1)) # hello; hello\n    print(m.group(2)) # 123;   456\n    return 'hi' + ' ' + m.group(2)  # hi 123 ； hi 456\n\nprint (regex.sub(func, str1))\n# hi 123, hi 456\n\n```\n### 贪婪与非贪婪\n贪婪模式：在整个表达式匹配成功的前提下，尽可能多的匹配 ( * )；\n非贪婪模式：在整个表达式匹配成功的前提下，尽可能少的匹配 ( ? )；\nPython里数量词默认是贪婪的。\n```\nimport re\n\nstr1 = '<div>abcd</div><div>efgh</div>'\nregex_greed = re.compile(r'<div>.*</div>')\nregex_not_greed = re.compile(r'<div>.*?</div>')\n\nresult_greed = regex_greed.findall(str1)\nresult_not_greed = regex_not_greed.findall(str1)\n\nprint(result_greed)\n# ['<div>abcd</div><div>efgh</div>']\n\nprint(result_not_greed)\n# ['<div>abcd</div>', '<div>efgh</div>']\n\n\n```\n\n### 匹配中文\n中文的 unicode 编码范围 主要在 [u4e00-u9fa5]\n```\nimport re\n\nstr1 = '你好世界,hello world'\npattern = re.compile(r'[\\u4e00-\\u9fa5]+')\nresult = pattern.findall(str1)\n\nprint (result) # 你好世界\n```\n### 特殊构造?:的用法\n当?:出现在正则表达式时，虽然正则表达式中使用()但这时()已经失去分组的特殊功能，表示(?:...)不分组版本，后面可以接\\|或这数量词，看例子：\n#### ?:结合\\|的使用\n我们想获取所有abc或者efg的字符串，当没有使用?:的情况：\n```\nimport re\n\nregex = re.compile(r'(abc)|(efg)')\nstr1 = 'abchhggefg'\nresult = regex.findall(str1)\n\nprint(result)  # [('abc', ''), ('', 'efg')]\n```\n我们想获取所有abc或者efg的字符串，使用了?:之后，符合我们的预期：\n```\nimport re\n\nregex = re.compile(r'(?:abc)|(?:efg)')\nstr1 = 'abchhggefg'\nresult = regex.findall(str1)\n\nprint(result)  # ['abc', 'efg']\n```\n#### ?:结合数量词{m}的使用\n我们想匹配abc连续出现2次的字符串\n* 没结合?:的输出结果\n```\nimport re\n\nstr1 = 'edabcabcefg'\nregex = re.compile(r'(abc){2}')\nresult = regex.findall(str1)\n\nprint(result)  # ['abc']\n```\n* 结合?:的输出结果,符合预期\n```\nimport re\n\nstr1 = 'edabcabcefg'\nregex = re.compile(r'(?:abc){2}')\nresult = regex.findall(str1)\n\nprint(result)  # ['abcabc']\n```\n","source":"_posts/正则表达式用法注意点.md","raw":"---\ntitle: '正则表达式用法注意点'\ncomments: true\ndate: 2018-07-26 15:30:02\ntoc: true\ncategories:\n- Python\ntags:\n- 正则表达式\n---\n主要总结一下Python中经常用到的一些正则表达式与方法<!--more-->\n### 正则表达式基础知识\n![](http://paresur4s.bkt.clouddn.com/FqKyCoEJlzbUMVTX1FYwpLsKWJmf)\n### re.compile\ncompile 函数用于编译正则表达式，生成一个 Pattern 对象\n```\nimport re\n\nregex = re.compile(r'(\\d+)')\n```\n### re.match\nmatch(string[, pos[, endpos]])方法回从字符串开头开始匹配，也可以指定起始位置和结束位置，找到第一个匹配就返回。成功匹配的话把各分组匹配到的字符串放入到一个Match对象，需要使用group(分组编号)获取对应分组的字符串或使用groups()方法获取所有分组的结果,匹配不成功返回None。\n\n```\nimport re\n\nregex = re.compile(r'(\\d+)')\nstr1 = '66abcd78dfg9sdf0'\n\n# match 的使用\nresult = regex.match(str1)\n\nprint(result.groups()) # ('66',)\nprint(result.group(1)) # 66\n```\n***但是，match返回的是每个分组的结果，所以必须在正则表达式里带上()进行分组，否则(即一个()分组都没)，在存在满足正则表达式的情况下使用groups返回的很有可能是一个空的元组***\n```\nimport re\n\n# 正则没有使用分组\nregex = re.compile(r'\\d+')\nstr1 = '66abcd78dfg9sdf0'\n\n# match 的使用\nresult = regex.match(str1)\n\nprint(result.groups()) # ()\nprint(result.group(1)) #  IndexError: no such group\n```\n### re.search\nsearch(string[, pos[, endpos]])方法用于查找字符串的任何位置，也可以指定起始和结束位置，只要找到了一个匹配的结果就返回。使用方法和match一样，区别在于match是从字符串开头，search不限定从字符串开头匹配。匹配不成功返回None\n```import re\n\nregex = re.compile(r'(\\d+)')\nstr1 = 'abcd78dfg9sdf0'\n\n# search 的使用\nresult = regex.search(str1)\n\nprint(result.groups()) # ('78',)\nprint(result.group(1)) #  78\n```\n***因为search返回的是每个分组的结果，和match一样，所以必须在正则表达式里带上()进行分组，否则(即一个()分组都没)，在存在满足正则表达式的情况下使用groups返回的很有可能是一个空的元组***\n```\nimport re\n\nregex = re.compile(r'\\d+')\nstr1 = 'abcd78dfg9sdf0'\n\n# search 的使用\nresult = regex.search(str1)\n\nprint(result.groups()) # ()\nprint(result.group(1)) #  IndexError: no such group\n```\n### re.findall\nfindall(string[, pos[, endpos]])方法是查找这个字符串符合正则表达式的所有结果并放到一个列表中，返回一个列表，而不是成功匹配一个就结束，全部匹配不成功就返回空列表[]。\n```\nimport re\n\nregex = re.compile(r'\\d+')\nstr1 = '66abcd78dfg9sdf0'\n\n# findall 的使用\nresult = regex.findall(str1)\nprint(result) # ['66', '78', '9', '0']\n```\n### re.finditer\nfinditer 方法的行为跟 findall 的行为类似，也是搜索整个字符串，获得所有匹配的结果。但它返回一个顺序访问每一个匹配结果（Match 对象）的迭代器。\n```\nimport re\n\nregex = re.compile(r'\\d+')\nstr1 = '66abcd78dfg9sdf0'\n\n# finditer 的使用\nresult = regex.finditer(str1)\nprint(type(result)) # <class 'callable_iterator'>\n\nfor item in result: # item 是Match 对象\n    print(item.group())\n#66\n#78\n#9\n#0\n```\n### re.split\nsplit(string[, maxsplit])按照匹配到的子符串将原字符串分割后返回到一个列表，maxsplit 用于指定最大分割次数，不指定将全部分割。\n```\nimport re\n\nregex = re.compile(r'[\\s;,:]+')\nstr1 = 'a;b,c:d   e f'\n\nprint(regex.split(str1))\n# ['a', 'b', 'c', 'd', 'e', 'f']\n```\n### re.sub\nsub(repl, string[, count])方法用于替换。\n其中，repl 可以是字符串也可以是一个**函数**,count 用于指定最多替换次数，不指定时全部替换即会像findall那样匹配整个字符串。\n* 如果 repl 是字符串，则会使用 repl 去替换字符串每一个匹配的子串，并返回替换后的字符串，另外，repl 还可以使用 id 的形式来引用分组，但不能使用编号 0；\n```\nimport re\n\nregex = re.compile(r'(\\w+) (\\w+)')\nstr1 = 'hello 123, hello 456'\n\nprint (regex.sub(r'hello world', str1))\n# hello world, hello world\n\nprint (regex.sub(r'\\2 \\1', str1))\n# 123 hello, 456 hello\n\n```\n* 如果 repl 是函数，这个方法应当只接受一个参数（Match 对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。\n\n```\nimport re\nregex = re.compile(r'(\\w+) (\\w+)')\nstr1 = 'hello 123, hello 456'\ndef func(m):\n    print(m)\n    # <_sre.SRE_Match object; span=(0, 9), match='hello 123'>;<_sre.SRE_Match object; span=(11, 20), match='hello 456'>\n    print(m.group(1)) # hello; hello\n    print(m.group(2)) # 123;   456\n    return 'hi' + ' ' + m.group(2)  # hi 123 ； hi 456\n\nprint (regex.sub(func, str1))\n# hi 123, hi 456\n\n```\n### 贪婪与非贪婪\n贪婪模式：在整个表达式匹配成功的前提下，尽可能多的匹配 ( * )；\n非贪婪模式：在整个表达式匹配成功的前提下，尽可能少的匹配 ( ? )；\nPython里数量词默认是贪婪的。\n```\nimport re\n\nstr1 = '<div>abcd</div><div>efgh</div>'\nregex_greed = re.compile(r'<div>.*</div>')\nregex_not_greed = re.compile(r'<div>.*?</div>')\n\nresult_greed = regex_greed.findall(str1)\nresult_not_greed = regex_not_greed.findall(str1)\n\nprint(result_greed)\n# ['<div>abcd</div><div>efgh</div>']\n\nprint(result_not_greed)\n# ['<div>abcd</div>', '<div>efgh</div>']\n\n\n```\n\n### 匹配中文\n中文的 unicode 编码范围 主要在 [u4e00-u9fa5]\n```\nimport re\n\nstr1 = '你好世界,hello world'\npattern = re.compile(r'[\\u4e00-\\u9fa5]+')\nresult = pattern.findall(str1)\n\nprint (result) # 你好世界\n```\n### 特殊构造?:的用法\n当?:出现在正则表达式时，虽然正则表达式中使用()但这时()已经失去分组的特殊功能，表示(?:...)不分组版本，后面可以接\\|或这数量词，看例子：\n#### ?:结合\\|的使用\n我们想获取所有abc或者efg的字符串，当没有使用?:的情况：\n```\nimport re\n\nregex = re.compile(r'(abc)|(efg)')\nstr1 = 'abchhggefg'\nresult = regex.findall(str1)\n\nprint(result)  # [('abc', ''), ('', 'efg')]\n```\n我们想获取所有abc或者efg的字符串，使用了?:之后，符合我们的预期：\n```\nimport re\n\nregex = re.compile(r'(?:abc)|(?:efg)')\nstr1 = 'abchhggefg'\nresult = regex.findall(str1)\n\nprint(result)  # ['abc', 'efg']\n```\n#### ?:结合数量词{m}的使用\n我们想匹配abc连续出现2次的字符串\n* 没结合?:的输出结果\n```\nimport re\n\nstr1 = 'edabcabcefg'\nregex = re.compile(r'(abc){2}')\nresult = regex.findall(str1)\n\nprint(result)  # ['abc']\n```\n* 结合?:的输出结果,符合预期\n```\nimport re\n\nstr1 = 'edabcabcefg'\nregex = re.compile(r'(?:abc){2}')\nresult = regex.findall(str1)\n\nprint(result)  # ['abcabc']\n```\n","slug":"正则表达式用法注意点","published":1,"updated":"2019-05-25T09:32:43.111Z","layout":"post","photos":[],"link":"","_id":"cjw3bjte60032e5vxztx9w1ha","content":"<p>主要总结一下Python中经常用到的一些正则表达式与方法<a id=\"more\"></a></p>\n<h3 id=\"正则表达式基础知识\"><a href=\"#正则表达式基础知识\" class=\"headerlink\" title=\"正则表达式基础知识\"></a>正则表达式基础知识</h3><p><img src=\"http://paresur4s.bkt.clouddn.com/FqKyCoEJlzbUMVTX1FYwpLsKWJmf\" alt=\"\"></p>\n<h3 id=\"re-compile\"><a href=\"#re-compile\" class=\"headerlink\" title=\"re.compile\"></a>re.compile</h3><p>compile 函数用于编译正则表达式，生成一个 Pattern 对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;(\\d+)&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"re-match\"><a href=\"#re-match\" class=\"headerlink\" title=\"re.match\"></a>re.match</h3><p>match(string[, pos[, endpos]])方法回从字符串开头开始匹配，也可以指定起始位置和结束位置，找到第一个匹配就返回。成功匹配的话把各分组匹配到的字符串放入到一个Match对象，需要使用group(分组编号)获取对应分组的字符串或使用groups()方法获取所有分组的结果,匹配不成功返回None。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;(\\d+)&apos;)</span><br><span class=\"line\">str1 = &apos;66abcd78dfg9sdf0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># match 的使用</span><br><span class=\"line\">result = regex.match(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result.groups()) # (&apos;66&apos;,)</span><br><span class=\"line\">print(result.group(1)) # 66</span><br></pre></td></tr></table></figure>\n<p><strong><em>但是，match返回的是每个分组的结果，所以必须在正则表达式里带上()进行分组，否则(即一个()分组都没)，在存在满足正则表达式的情况下使用groups返回的很有可能是一个空的元组</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\"># 正则没有使用分组</span><br><span class=\"line\">regex = re.compile(r&apos;\\d+&apos;)</span><br><span class=\"line\">str1 = &apos;66abcd78dfg9sdf0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># match 的使用</span><br><span class=\"line\">result = regex.match(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result.groups()) # ()</span><br><span class=\"line\">print(result.group(1)) #  IndexError: no such group</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"re-search\"><a href=\"#re-search\" class=\"headerlink\" title=\"re.search\"></a>re.search</h3><p>search(string[, pos[, endpos]])方法用于查找字符串的任何位置，也可以指定起始和结束位置，只要找到了一个匹配的结果就返回。使用方法和match一样，区别在于match是从字符串开头，search不限定从字符串开头匹配。匹配不成功返回None<br><figure class=\"highlight plain\"><figcaption><span>re</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;(\\d+)&apos;)</span><br><span class=\"line\">str1 = &apos;abcd78dfg9sdf0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># search 的使用</span><br><span class=\"line\">result = regex.search(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result.groups()) # (&apos;78&apos;,)</span><br><span class=\"line\">print(result.group(1)) #  78</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>因为search返回的是每个分组的结果，和match一样，所以必须在正则表达式里带上()进行分组，否则(即一个()分组都没)，在存在满足正则表达式的情况下使用groups返回的很有可能是一个空的元组</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;\\d+&apos;)</span><br><span class=\"line\">str1 = &apos;abcd78dfg9sdf0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># search 的使用</span><br><span class=\"line\">result = regex.search(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result.groups()) # ()</span><br><span class=\"line\">print(result.group(1)) #  IndexError: no such group</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"re-findall\"><a href=\"#re-findall\" class=\"headerlink\" title=\"re.findall\"></a>re.findall</h3><p>findall(string[, pos[, endpos]])方法是查找这个字符串符合正则表达式的所有结果并放到一个列表中，返回一个列表，而不是成功匹配一个就结束，全部匹配不成功就返回空列表[]。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;\\d+&apos;)</span><br><span class=\"line\">str1 = &apos;66abcd78dfg9sdf0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># findall 的使用</span><br><span class=\"line\">result = regex.findall(str1)</span><br><span class=\"line\">print(result) # [&apos;66&apos;, &apos;78&apos;, &apos;9&apos;, &apos;0&apos;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"re-finditer\"><a href=\"#re-finditer\" class=\"headerlink\" title=\"re.finditer\"></a>re.finditer</h3><p>finditer 方法的行为跟 findall 的行为类似，也是搜索整个字符串，获得所有匹配的结果。但它返回一个顺序访问每一个匹配结果（Match 对象）的迭代器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;\\d+&apos;)</span><br><span class=\"line\">str1 = &apos;66abcd78dfg9sdf0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># finditer 的使用</span><br><span class=\"line\">result = regex.finditer(str1)</span><br><span class=\"line\">print(type(result)) # &lt;class &apos;callable_iterator&apos;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">for item in result: # item 是Match 对象</span><br><span class=\"line\">    print(item.group())</span><br><span class=\"line\">#66</span><br><span class=\"line\">#78</span><br><span class=\"line\">#9</span><br><span class=\"line\">#0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"re-split\"><a href=\"#re-split\" class=\"headerlink\" title=\"re.split\"></a>re.split</h3><p>split(string[, maxsplit])按照匹配到的子符串将原字符串分割后返回到一个列表，maxsplit 用于指定最大分割次数，不指定将全部分割。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;[\\s;,:]+&apos;)</span><br><span class=\"line\">str1 = &apos;a;b,c:d   e f&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">print(regex.split(str1))</span><br><span class=\"line\"># [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"re-sub\"><a href=\"#re-sub\" class=\"headerlink\" title=\"re.sub\"></a>re.sub</h3><p>sub(repl, string[, count])方法用于替换。<br>其中，repl 可以是字符串也可以是一个<strong>函数</strong>,count 用于指定最多替换次数，不指定时全部替换即会像findall那样匹配整个字符串。</p>\n<ul>\n<li><p>如果 repl 是字符串，则会使用 repl 去替换字符串每一个匹配的子串，并返回替换后的字符串，另外，repl 还可以使用 id 的形式来引用分组，但不能使用编号 0；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;(\\w+) (\\w+)&apos;)</span><br><span class=\"line\">str1 = &apos;hello 123, hello 456&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">print (regex.sub(r&apos;hello world&apos;, str1))</span><br><span class=\"line\"># hello world, hello world</span><br><span class=\"line\"></span><br><span class=\"line\">print (regex.sub(r&apos;\\2 \\1&apos;, str1))</span><br><span class=\"line\"># 123 hello, 456 hello</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果 repl 是函数，这个方法应当只接受一个参数（Match 对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">regex = re.compile(r&apos;(\\w+) (\\w+)&apos;)</span><br><span class=\"line\">str1 = &apos;hello 123, hello 456&apos;</span><br><span class=\"line\">def func(m):</span><br><span class=\"line\">    print(m)</span><br><span class=\"line\">    # &lt;_sre.SRE_Match object; span=(0, 9), match=&apos;hello 123&apos;&gt;;&lt;_sre.SRE_Match object; span=(11, 20), match=&apos;hello 456&apos;&gt;</span><br><span class=\"line\">    print(m.group(1)) # hello; hello</span><br><span class=\"line\">    print(m.group(2)) # 123;   456</span><br><span class=\"line\">    return &apos;hi&apos; + &apos; &apos; + m.group(2)  # hi 123 ； hi 456</span><br><span class=\"line\"></span><br><span class=\"line\">print (regex.sub(func, str1))</span><br><span class=\"line\"># hi 123, hi 456</span><br></pre></td></tr></table></figure>\n<h3 id=\"贪婪与非贪婪\"><a href=\"#贪婪与非贪婪\" class=\"headerlink\" title=\"贪婪与非贪婪\"></a>贪婪与非贪婪</h3><p>贪婪模式：在整个表达式匹配成功的前提下，尽可能多的匹配 ( * )；<br>非贪婪模式：在整个表达式匹配成功的前提下，尽可能少的匹配 ( ? )；<br>Python里数量词默认是贪婪的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">str1 = &apos;&lt;div&gt;abcd&lt;/div&gt;&lt;div&gt;efgh&lt;/div&gt;&apos;</span><br><span class=\"line\">regex_greed = re.compile(r&apos;&lt;div&gt;.*&lt;/div&gt;&apos;)</span><br><span class=\"line\">regex_not_greed = re.compile(r&apos;&lt;div&gt;.*?&lt;/div&gt;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">result_greed = regex_greed.findall(str1)</span><br><span class=\"line\">result_not_greed = regex_not_greed.findall(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result_greed)</span><br><span class=\"line\"># [&apos;&lt;div&gt;abcd&lt;/div&gt;&lt;div&gt;efgh&lt;/div&gt;&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">print(result_not_greed)</span><br><span class=\"line\"># [&apos;&lt;div&gt;abcd&lt;/div&gt;&apos;, &apos;&lt;div&gt;efgh&lt;/div&gt;&apos;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"匹配中文\"><a href=\"#匹配中文\" class=\"headerlink\" title=\"匹配中文\"></a>匹配中文</h3><p>中文的 unicode 编码范围 主要在 [u4e00-u9fa5]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">str1 = &apos;你好世界,hello world&apos;</span><br><span class=\"line\">pattern = re.compile(r&apos;[\\u4e00-\\u9fa5]+&apos;)</span><br><span class=\"line\">result = pattern.findall(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print (result) # 你好世界</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"特殊构造-的用法\"><a href=\"#特殊构造-的用法\" class=\"headerlink\" title=\"特殊构造?:的用法\"></a>特殊构造?:的用法</h3><p>当?:出现在正则表达式时，虽然正则表达式中使用()但这时()已经失去分组的特殊功能，表示(?:…)不分组版本，后面可以接|或这数量词，看例子：</p>\n<h4 id=\"结合-的使用\"><a href=\"#结合-的使用\" class=\"headerlink\" title=\"?:结合|的使用\"></a>?:结合|的使用</h4><p>我们想获取所有abc或者efg的字符串，当没有使用?:的情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;(abc)|(efg)&apos;)</span><br><span class=\"line\">str1 = &apos;abchhggefg&apos;</span><br><span class=\"line\">result = regex.findall(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result)  # [(&apos;abc&apos;, &apos;&apos;), (&apos;&apos;, &apos;efg&apos;)]</span><br></pre></td></tr></table></figure></p>\n<p>我们想获取所有abc或者efg的字符串，使用了?:之后，符合我们的预期：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;(?:abc)|(?:efg)&apos;)</span><br><span class=\"line\">str1 = &apos;abchhggefg&apos;</span><br><span class=\"line\">result = regex.findall(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result)  # [&apos;abc&apos;, &apos;efg&apos;]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"结合数量词-m-的使用\"><a href=\"#结合数量词-m-的使用\" class=\"headerlink\" title=\"?:结合数量词{m}的使用\"></a>?:结合数量词{m}的使用</h4><p>我们想匹配abc连续出现2次的字符串</p>\n<ul>\n<li><p>没结合?:的输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">str1 = &apos;edabcabcefg&apos;</span><br><span class=\"line\">regex = re.compile(r&apos;(abc)&#123;2&#125;&apos;)</span><br><span class=\"line\">result = regex.findall(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result)  # [&apos;abc&apos;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结合?:的输出结果,符合预期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">str1 = &apos;edabcabcefg&apos;</span><br><span class=\"line\">regex = re.compile(r&apos;(?:abc)&#123;2&#125;&apos;)</span><br><span class=\"line\">result = regex.findall(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result)  # [&apos;abcabc&apos;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>主要总结一下Python中经常用到的一些正则表达式与方法","more":"</p>\n<h3 id=\"正则表达式基础知识\"><a href=\"#正则表达式基础知识\" class=\"headerlink\" title=\"正则表达式基础知识\"></a>正则表达式基础知识</h3><p><img src=\"http://paresur4s.bkt.clouddn.com/FqKyCoEJlzbUMVTX1FYwpLsKWJmf\" alt=\"\"></p>\n<h3 id=\"re-compile\"><a href=\"#re-compile\" class=\"headerlink\" title=\"re.compile\"></a>re.compile</h3><p>compile 函数用于编译正则表达式，生成一个 Pattern 对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;(\\d+)&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"re-match\"><a href=\"#re-match\" class=\"headerlink\" title=\"re.match\"></a>re.match</h3><p>match(string[, pos[, endpos]])方法回从字符串开头开始匹配，也可以指定起始位置和结束位置，找到第一个匹配就返回。成功匹配的话把各分组匹配到的字符串放入到一个Match对象，需要使用group(分组编号)获取对应分组的字符串或使用groups()方法获取所有分组的结果,匹配不成功返回None。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;(\\d+)&apos;)</span><br><span class=\"line\">str1 = &apos;66abcd78dfg9sdf0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># match 的使用</span><br><span class=\"line\">result = regex.match(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result.groups()) # (&apos;66&apos;,)</span><br><span class=\"line\">print(result.group(1)) # 66</span><br></pre></td></tr></table></figure>\n<p><strong><em>但是，match返回的是每个分组的结果，所以必须在正则表达式里带上()进行分组，否则(即一个()分组都没)，在存在满足正则表达式的情况下使用groups返回的很有可能是一个空的元组</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\"># 正则没有使用分组</span><br><span class=\"line\">regex = re.compile(r&apos;\\d+&apos;)</span><br><span class=\"line\">str1 = &apos;66abcd78dfg9sdf0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># match 的使用</span><br><span class=\"line\">result = regex.match(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result.groups()) # ()</span><br><span class=\"line\">print(result.group(1)) #  IndexError: no such group</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"re-search\"><a href=\"#re-search\" class=\"headerlink\" title=\"re.search\"></a>re.search</h3><p>search(string[, pos[, endpos]])方法用于查找字符串的任何位置，也可以指定起始和结束位置，只要找到了一个匹配的结果就返回。使用方法和match一样，区别在于match是从字符串开头，search不限定从字符串开头匹配。匹配不成功返回None<br><figure class=\"highlight plain\"><figcaption><span>re</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;(\\d+)&apos;)</span><br><span class=\"line\">str1 = &apos;abcd78dfg9sdf0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># search 的使用</span><br><span class=\"line\">result = regex.search(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result.groups()) # (&apos;78&apos;,)</span><br><span class=\"line\">print(result.group(1)) #  78</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>因为search返回的是每个分组的结果，和match一样，所以必须在正则表达式里带上()进行分组，否则(即一个()分组都没)，在存在满足正则表达式的情况下使用groups返回的很有可能是一个空的元组</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;\\d+&apos;)</span><br><span class=\"line\">str1 = &apos;abcd78dfg9sdf0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># search 的使用</span><br><span class=\"line\">result = regex.search(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result.groups()) # ()</span><br><span class=\"line\">print(result.group(1)) #  IndexError: no such group</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"re-findall\"><a href=\"#re-findall\" class=\"headerlink\" title=\"re.findall\"></a>re.findall</h3><p>findall(string[, pos[, endpos]])方法是查找这个字符串符合正则表达式的所有结果并放到一个列表中，返回一个列表，而不是成功匹配一个就结束，全部匹配不成功就返回空列表[]。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;\\d+&apos;)</span><br><span class=\"line\">str1 = &apos;66abcd78dfg9sdf0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># findall 的使用</span><br><span class=\"line\">result = regex.findall(str1)</span><br><span class=\"line\">print(result) # [&apos;66&apos;, &apos;78&apos;, &apos;9&apos;, &apos;0&apos;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"re-finditer\"><a href=\"#re-finditer\" class=\"headerlink\" title=\"re.finditer\"></a>re.finditer</h3><p>finditer 方法的行为跟 findall 的行为类似，也是搜索整个字符串，获得所有匹配的结果。但它返回一个顺序访问每一个匹配结果（Match 对象）的迭代器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;\\d+&apos;)</span><br><span class=\"line\">str1 = &apos;66abcd78dfg9sdf0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># finditer 的使用</span><br><span class=\"line\">result = regex.finditer(str1)</span><br><span class=\"line\">print(type(result)) # &lt;class &apos;callable_iterator&apos;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">for item in result: # item 是Match 对象</span><br><span class=\"line\">    print(item.group())</span><br><span class=\"line\">#66</span><br><span class=\"line\">#78</span><br><span class=\"line\">#9</span><br><span class=\"line\">#0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"re-split\"><a href=\"#re-split\" class=\"headerlink\" title=\"re.split\"></a>re.split</h3><p>split(string[, maxsplit])按照匹配到的子符串将原字符串分割后返回到一个列表，maxsplit 用于指定最大分割次数，不指定将全部分割。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;[\\s;,:]+&apos;)</span><br><span class=\"line\">str1 = &apos;a;b,c:d   e f&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">print(regex.split(str1))</span><br><span class=\"line\"># [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"re-sub\"><a href=\"#re-sub\" class=\"headerlink\" title=\"re.sub\"></a>re.sub</h3><p>sub(repl, string[, count])方法用于替换。<br>其中，repl 可以是字符串也可以是一个<strong>函数</strong>,count 用于指定最多替换次数，不指定时全部替换即会像findall那样匹配整个字符串。</p>\n<ul>\n<li><p>如果 repl 是字符串，则会使用 repl 去替换字符串每一个匹配的子串，并返回替换后的字符串，另外，repl 还可以使用 id 的形式来引用分组，但不能使用编号 0；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;(\\w+) (\\w+)&apos;)</span><br><span class=\"line\">str1 = &apos;hello 123, hello 456&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">print (regex.sub(r&apos;hello world&apos;, str1))</span><br><span class=\"line\"># hello world, hello world</span><br><span class=\"line\"></span><br><span class=\"line\">print (regex.sub(r&apos;\\2 \\1&apos;, str1))</span><br><span class=\"line\"># 123 hello, 456 hello</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果 repl 是函数，这个方法应当只接受一个参数（Match 对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">regex = re.compile(r&apos;(\\w+) (\\w+)&apos;)</span><br><span class=\"line\">str1 = &apos;hello 123, hello 456&apos;</span><br><span class=\"line\">def func(m):</span><br><span class=\"line\">    print(m)</span><br><span class=\"line\">    # &lt;_sre.SRE_Match object; span=(0, 9), match=&apos;hello 123&apos;&gt;;&lt;_sre.SRE_Match object; span=(11, 20), match=&apos;hello 456&apos;&gt;</span><br><span class=\"line\">    print(m.group(1)) # hello; hello</span><br><span class=\"line\">    print(m.group(2)) # 123;   456</span><br><span class=\"line\">    return &apos;hi&apos; + &apos; &apos; + m.group(2)  # hi 123 ； hi 456</span><br><span class=\"line\"></span><br><span class=\"line\">print (regex.sub(func, str1))</span><br><span class=\"line\"># hi 123, hi 456</span><br></pre></td></tr></table></figure>\n<h3 id=\"贪婪与非贪婪\"><a href=\"#贪婪与非贪婪\" class=\"headerlink\" title=\"贪婪与非贪婪\"></a>贪婪与非贪婪</h3><p>贪婪模式：在整个表达式匹配成功的前提下，尽可能多的匹配 ( * )；<br>非贪婪模式：在整个表达式匹配成功的前提下，尽可能少的匹配 ( ? )；<br>Python里数量词默认是贪婪的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">str1 = &apos;&lt;div&gt;abcd&lt;/div&gt;&lt;div&gt;efgh&lt;/div&gt;&apos;</span><br><span class=\"line\">regex_greed = re.compile(r&apos;&lt;div&gt;.*&lt;/div&gt;&apos;)</span><br><span class=\"line\">regex_not_greed = re.compile(r&apos;&lt;div&gt;.*?&lt;/div&gt;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">result_greed = regex_greed.findall(str1)</span><br><span class=\"line\">result_not_greed = regex_not_greed.findall(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result_greed)</span><br><span class=\"line\"># [&apos;&lt;div&gt;abcd&lt;/div&gt;&lt;div&gt;efgh&lt;/div&gt;&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">print(result_not_greed)</span><br><span class=\"line\"># [&apos;&lt;div&gt;abcd&lt;/div&gt;&apos;, &apos;&lt;div&gt;efgh&lt;/div&gt;&apos;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"匹配中文\"><a href=\"#匹配中文\" class=\"headerlink\" title=\"匹配中文\"></a>匹配中文</h3><p>中文的 unicode 编码范围 主要在 [u4e00-u9fa5]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">str1 = &apos;你好世界,hello world&apos;</span><br><span class=\"line\">pattern = re.compile(r&apos;[\\u4e00-\\u9fa5]+&apos;)</span><br><span class=\"line\">result = pattern.findall(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print (result) # 你好世界</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"特殊构造-的用法\"><a href=\"#特殊构造-的用法\" class=\"headerlink\" title=\"特殊构造?:的用法\"></a>特殊构造?:的用法</h3><p>当?:出现在正则表达式时，虽然正则表达式中使用()但这时()已经失去分组的特殊功能，表示(?:…)不分组版本，后面可以接|或这数量词，看例子：</p>\n<h4 id=\"结合-的使用\"><a href=\"#结合-的使用\" class=\"headerlink\" title=\"?:结合|的使用\"></a>?:结合|的使用</h4><p>我们想获取所有abc或者efg的字符串，当没有使用?:的情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;(abc)|(efg)&apos;)</span><br><span class=\"line\">str1 = &apos;abchhggefg&apos;</span><br><span class=\"line\">result = regex.findall(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result)  # [(&apos;abc&apos;, &apos;&apos;), (&apos;&apos;, &apos;efg&apos;)]</span><br></pre></td></tr></table></figure></p>\n<p>我们想获取所有abc或者efg的字符串，使用了?:之后，符合我们的预期：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">regex = re.compile(r&apos;(?:abc)|(?:efg)&apos;)</span><br><span class=\"line\">str1 = &apos;abchhggefg&apos;</span><br><span class=\"line\">result = regex.findall(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result)  # [&apos;abc&apos;, &apos;efg&apos;]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"结合数量词-m-的使用\"><a href=\"#结合数量词-m-的使用\" class=\"headerlink\" title=\"?:结合数量词{m}的使用\"></a>?:结合数量词{m}的使用</h4><p>我们想匹配abc连续出现2次的字符串</p>\n<ul>\n<li><p>没结合?:的输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">str1 = &apos;edabcabcefg&apos;</span><br><span class=\"line\">regex = re.compile(r&apos;(abc)&#123;2&#125;&apos;)</span><br><span class=\"line\">result = regex.findall(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result)  # [&apos;abc&apos;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结合?:的输出结果,符合预期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">str1 = &apos;edabcabcefg&apos;</span><br><span class=\"line\">regex = re.compile(r&apos;(?:abc)&#123;2&#125;&apos;)</span><br><span class=\"line\">result = regex.findall(str1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result)  # [&apos;abcabc&apos;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"段子一键取并存为Markdown文档","comments":1,"date":"2018-07-29T01:36:01.000Z","toc":true,"_content":"\n一键运行获取内涵吧的所有内涵段子并保存为Markdown格式文档。<!---more-->\n源码获取：公众号***Python孙行者***后台回复***‘内涵’***即可\n\n#### 本文意愿\n\n本文的意愿为通过对某网站的爬取，掌握基本的爬虫技能并非以爬取其段子内容为目的。在爬取过程中，请务必设置好爬取的时间间隔，以免影响网站的正常运行。\n\n#### 实战目标\n\n1. 分析网页的规律\n2. 使用requests库爬取\n3. 运用正则进行数据清洗和构造\n4. 本地文件保存方法\n#### 分析网页规律\n\n通过观察网址的变化，我们只需要更改url最后一个数字即可，并且这个数字即为当前页数。\n\n```\n# 第一页\nhttps://www.neihan8.com/article/list_5_1.html\n# 第二页\nhttps://www.neihan8.com/article/list_5_2.html\n# 第三页\nhttps://www.neihan8.com/article/list_5_3.html\n```\n#### 使用requests库爬取\n\n这里主要是使用get请求方式获取网页内容，需要注意的是需要带上User-Agent和Referer连个请求头信息。因为通过F12发现浏览器发送的请求头携带了这两个参数，为避免对方以这两个字段进行反爬而获取失败，我们就带上这两个字段\n![](http://paresur4s.bkt.clouddn.com/FlBMB5wSuKl5VhINJzyLmDldX2Cw)\n\n```\n # 请求某一具体页面数据\n    def request(self, url, index):\n        print('url:', url)\n        # 设置时间间隔， 以免对目标网站造成太大压力\n        time.sleep(0.5)\n        # 为了规避反爬，爬取的不是第一页需带上Referer请求头信息\n        if index != 1:\n            # 动态生成url\n            self.headers['Referer'] = 'https: // www.neihan8.com / article / list_5_{}.html'.format(index - 1)\n        # 获取响应数据\n        response = requests.get(url, headers=self.headers)\n        # 此网站使用GBK编码，对返回的数据进行相应解码\n        return response.content.decode('gbk')\n```\n#### 数据清洗\n\n在这里使用正则进行对我们需要的数据进行清洗和处理。\n```\n# 对数据进行提取清洗\n    def parse_data_list(self, index):\n        # result_list存放已解析清洗好的段子数据\n        self.result_list = []\n        # 获取到的段子列表数据放到duanzi\n        duanzi = self.get_data(index)\n        # 对段子列表数据duanzi每一个段子去掉空格和其他字符，保留换行\n        for item in duanzi:\n            result = re.sub(r'[<b>|</b>|<br />|<br>|<p>|</p>|\\\\u3000|\\\\r|\\s|t|div|sa]', \"\", str(item))\n            result = result.replace('&ldqo;', '“').replace('&dqo;', '”').replace('&helli;', '...').replace('&lqo;',\n                                                                                                           '“').replace(\n                '&qo;', '”').replace('&hell;', '...').replace('n', '\\\\n').replace('&zwj;', '').replace('&qot;',\n                                                                                                       '\"').replace(\n                '&mh;', '').strip(' ')\n            result = re.sub(r'yle.*?(?:x;|\\)|;|\\n|x)\"', '', result)\n            result = re.sub(r'hef.*?ml\"', '', result)\n            result = re.sub(r\"cl=.*?(?:we'|\\d+\\\")\", '', result)\n            result = re.sub(r'c=.*?\\.jg\"', '', result)\n\n            # 把清洗好的数据添加到result_list\n            self.result_list.append(eval(result))\n        return self.result_list\n```\n#### 保存为Markdown文档\n\n主要构造为三号标题和正文即可\n```\n# 每一页数据保存为一个单独的Markdowm文档\n    def save_md(self, index):\n        duanzi_list = self.parse_data_list(index)\n        file = open('内涵段子{}.md'.format(index), 'w')\n        for item in duanzi_list:\n            # 拼接成Markdown格式\n            file.write('### ' + item[0] + item[1])\n        # 关闭文件\n        file.close()\n```\n#### 一键运行效果\n\n妥妥的506页，506个Markdown文档，5057个段子。\n源码获取：公众号***Python孙行者***后台回复***‘内涵’***即可\n![](http://paresur4s.bkt.clouddn.com/Frxbv1iTlDzM5XCthk19PXTfgn_E)\n![](http://paresur4s.bkt.clouddn.com/FmYHVEpvsfFYV0lu4Zgrkb7pRoK9)\n","source":"_posts/段子一键取并存为Markdown文档.md","raw":"---\ntitle: 段子一键取并存为Markdown文档\ncomments: true\ndate: 2018-07-29 09:36:01\ntoc: true\ncategories:\n- Python\ntags:\n- 爬虫\n---\n\n一键运行获取内涵吧的所有内涵段子并保存为Markdown格式文档。<!---more-->\n源码获取：公众号***Python孙行者***后台回复***‘内涵’***即可\n\n#### 本文意愿\n\n本文的意愿为通过对某网站的爬取，掌握基本的爬虫技能并非以爬取其段子内容为目的。在爬取过程中，请务必设置好爬取的时间间隔，以免影响网站的正常运行。\n\n#### 实战目标\n\n1. 分析网页的规律\n2. 使用requests库爬取\n3. 运用正则进行数据清洗和构造\n4. 本地文件保存方法\n#### 分析网页规律\n\n通过观察网址的变化，我们只需要更改url最后一个数字即可，并且这个数字即为当前页数。\n\n```\n# 第一页\nhttps://www.neihan8.com/article/list_5_1.html\n# 第二页\nhttps://www.neihan8.com/article/list_5_2.html\n# 第三页\nhttps://www.neihan8.com/article/list_5_3.html\n```\n#### 使用requests库爬取\n\n这里主要是使用get请求方式获取网页内容，需要注意的是需要带上User-Agent和Referer连个请求头信息。因为通过F12发现浏览器发送的请求头携带了这两个参数，为避免对方以这两个字段进行反爬而获取失败，我们就带上这两个字段\n![](http://paresur4s.bkt.clouddn.com/FlBMB5wSuKl5VhINJzyLmDldX2Cw)\n\n```\n # 请求某一具体页面数据\n    def request(self, url, index):\n        print('url:', url)\n        # 设置时间间隔， 以免对目标网站造成太大压力\n        time.sleep(0.5)\n        # 为了规避反爬，爬取的不是第一页需带上Referer请求头信息\n        if index != 1:\n            # 动态生成url\n            self.headers['Referer'] = 'https: // www.neihan8.com / article / list_5_{}.html'.format(index - 1)\n        # 获取响应数据\n        response = requests.get(url, headers=self.headers)\n        # 此网站使用GBK编码，对返回的数据进行相应解码\n        return response.content.decode('gbk')\n```\n#### 数据清洗\n\n在这里使用正则进行对我们需要的数据进行清洗和处理。\n```\n# 对数据进行提取清洗\n    def parse_data_list(self, index):\n        # result_list存放已解析清洗好的段子数据\n        self.result_list = []\n        # 获取到的段子列表数据放到duanzi\n        duanzi = self.get_data(index)\n        # 对段子列表数据duanzi每一个段子去掉空格和其他字符，保留换行\n        for item in duanzi:\n            result = re.sub(r'[<b>|</b>|<br />|<br>|<p>|</p>|\\\\u3000|\\\\r|\\s|t|div|sa]', \"\", str(item))\n            result = result.replace('&ldqo;', '“').replace('&dqo;', '”').replace('&helli;', '...').replace('&lqo;',\n                                                                                                           '“').replace(\n                '&qo;', '”').replace('&hell;', '...').replace('n', '\\\\n').replace('&zwj;', '').replace('&qot;',\n                                                                                                       '\"').replace(\n                '&mh;', '').strip(' ')\n            result = re.sub(r'yle.*?(?:x;|\\)|;|\\n|x)\"', '', result)\n            result = re.sub(r'hef.*?ml\"', '', result)\n            result = re.sub(r\"cl=.*?(?:we'|\\d+\\\")\", '', result)\n            result = re.sub(r'c=.*?\\.jg\"', '', result)\n\n            # 把清洗好的数据添加到result_list\n            self.result_list.append(eval(result))\n        return self.result_list\n```\n#### 保存为Markdown文档\n\n主要构造为三号标题和正文即可\n```\n# 每一页数据保存为一个单独的Markdowm文档\n    def save_md(self, index):\n        duanzi_list = self.parse_data_list(index)\n        file = open('内涵段子{}.md'.format(index), 'w')\n        for item in duanzi_list:\n            # 拼接成Markdown格式\n            file.write('### ' + item[0] + item[1])\n        # 关闭文件\n        file.close()\n```\n#### 一键运行效果\n\n妥妥的506页，506个Markdown文档，5057个段子。\n源码获取：公众号***Python孙行者***后台回复***‘内涵’***即可\n![](http://paresur4s.bkt.clouddn.com/Frxbv1iTlDzM5XCthk19PXTfgn_E)\n![](http://paresur4s.bkt.clouddn.com/FmYHVEpvsfFYV0lu4Zgrkb7pRoK9)\n","slug":"段子一键取并存为Markdown文档","published":1,"updated":"2019-05-25T09:32:43.111Z","layout":"post","photos":[],"link":"","_id":"cjw3bjte70034e5vxi2se53ci","content":"<p>一键运行获取内涵吧的所有内涵段子并保存为Markdown格式文档。<a id=\"more\"></a><br>源码获取：公众号<strong><em>Python孙行者</em></strong>后台回复<strong><em>‘内涵’</em></strong>即可</p>\n<h4 id=\"本文意愿\"><a href=\"#本文意愿\" class=\"headerlink\" title=\"本文意愿\"></a>本文意愿</h4><p>本文的意愿为通过对某网站的爬取，掌握基本的爬虫技能并非以爬取其段子内容为目的。在爬取过程中，请务必设置好爬取的时间间隔，以免影响网站的正常运行。</p>\n<h4 id=\"实战目标\"><a href=\"#实战目标\" class=\"headerlink\" title=\"实战目标\"></a>实战目标</h4><ol>\n<li>分析网页的规律</li>\n<li>使用requests库爬取</li>\n<li>运用正则进行数据清洗和构造</li>\n<li>本地文件保存方法<h4 id=\"分析网页规律\"><a href=\"#分析网页规律\" class=\"headerlink\" title=\"分析网页规律\"></a>分析网页规律</h4></li>\n</ol>\n<p>通过观察网址的变化，我们只需要更改url最后一个数字即可，并且这个数字即为当前页数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一页</span><br><span class=\"line\">https://www.neihan8.com/article/list_5_1.html</span><br><span class=\"line\"># 第二页</span><br><span class=\"line\">https://www.neihan8.com/article/list_5_2.html</span><br><span class=\"line\"># 第三页</span><br><span class=\"line\">https://www.neihan8.com/article/list_5_3.html</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用requests库爬取\"><a href=\"#使用requests库爬取\" class=\"headerlink\" title=\"使用requests库爬取\"></a>使用requests库爬取</h4><p>这里主要是使用get请求方式获取网页内容，需要注意的是需要带上User-Agent和Referer连个请求头信息。因为通过F12发现浏览器发送的请求头携带了这两个参数，为避免对方以这两个字段进行反爬而获取失败，我们就带上这两个字段<br><img src=\"http://paresur4s.bkt.clouddn.com/FlBMB5wSuKl5VhINJzyLmDldX2Cw\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 请求某一具体页面数据</span><br><span class=\"line\">   def request(self, url, index):</span><br><span class=\"line\">       print(&apos;url:&apos;, url)</span><br><span class=\"line\">       # 设置时间间隔， 以免对目标网站造成太大压力</span><br><span class=\"line\">       time.sleep(0.5)</span><br><span class=\"line\">       # 为了规避反爬，爬取的不是第一页需带上Referer请求头信息</span><br><span class=\"line\">       if index != 1:</span><br><span class=\"line\">           # 动态生成url</span><br><span class=\"line\">           self.headers[&apos;Referer&apos;] = &apos;https: // www.neihan8.com / article / list_5_&#123;&#125;.html&apos;.format(index - 1)</span><br><span class=\"line\">       # 获取响应数据</span><br><span class=\"line\">       response = requests.get(url, headers=self.headers)</span><br><span class=\"line\">       # 此网站使用GBK编码，对返回的数据进行相应解码</span><br><span class=\"line\">       return response.content.decode(&apos;gbk&apos;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据清洗\"><a href=\"#数据清洗\" class=\"headerlink\" title=\"数据清洗\"></a>数据清洗</h4><p>在这里使用正则进行对我们需要的数据进行清洗和处理。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 对数据进行提取清洗</span><br><span class=\"line\">    def parse_data_list(self, index):</span><br><span class=\"line\">        # result_list存放已解析清洗好的段子数据</span><br><span class=\"line\">        self.result_list = []</span><br><span class=\"line\">        # 获取到的段子列表数据放到duanzi</span><br><span class=\"line\">        duanzi = self.get_data(index)</span><br><span class=\"line\">        # 对段子列表数据duanzi每一个段子去掉空格和其他字符，保留换行</span><br><span class=\"line\">        for item in duanzi:</span><br><span class=\"line\">            result = re.sub(r&apos;[&lt;b&gt;|&lt;/b&gt;|&lt;br /&gt;|&lt;br&gt;|&lt;p&gt;|&lt;/p&gt;|\\\\u3000|\\\\r|\\s|t|div|sa]&apos;, &quot;&quot;, str(item))</span><br><span class=\"line\">            result = result.replace(&apos;&amp;ldqo;&apos;, &apos;“&apos;).replace(&apos;&amp;dqo;&apos;, &apos;”&apos;).replace(&apos;&amp;helli;&apos;, &apos;...&apos;).replace(&apos;&amp;lqo;&apos;,</span><br><span class=\"line\">                                                                                                           &apos;“&apos;).replace(</span><br><span class=\"line\">                &apos;&amp;qo;&apos;, &apos;”&apos;).replace(&apos;&amp;hell;&apos;, &apos;...&apos;).replace(&apos;n&apos;, &apos;\\\\n&apos;).replace(&apos;&amp;zwj;&apos;, &apos;&apos;).replace(&apos;&amp;qot;&apos;,</span><br><span class=\"line\">                                                                                                       &apos;&quot;&apos;).replace(</span><br><span class=\"line\">                &apos;&amp;mh;&apos;, &apos;&apos;).strip(&apos; &apos;)</span><br><span class=\"line\">            result = re.sub(r&apos;yle.*?(?:x;|\\)|;|\\n|x)&quot;&apos;, &apos;&apos;, result)</span><br><span class=\"line\">            result = re.sub(r&apos;hef.*?ml&quot;&apos;, &apos;&apos;, result)</span><br><span class=\"line\">            result = re.sub(r&quot;cl=.*?(?:we&apos;|\\d+\\&quot;)&quot;, &apos;&apos;, result)</span><br><span class=\"line\">            result = re.sub(r&apos;c=.*?\\.jg&quot;&apos;, &apos;&apos;, result)</span><br><span class=\"line\"></span><br><span class=\"line\">            # 把清洗好的数据添加到result_list</span><br><span class=\"line\">            self.result_list.append(eval(result))</span><br><span class=\"line\">        return self.result_list</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"保存为Markdown文档\"><a href=\"#保存为Markdown文档\" class=\"headerlink\" title=\"保存为Markdown文档\"></a>保存为Markdown文档</h4><p>主要构造为三号标题和正文即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 每一页数据保存为一个单独的Markdowm文档</span><br><span class=\"line\">    def save_md(self, index):</span><br><span class=\"line\">        duanzi_list = self.parse_data_list(index)</span><br><span class=\"line\">        file = open(&apos;内涵段子&#123;&#125;.md&apos;.format(index), &apos;w&apos;)</span><br><span class=\"line\">        for item in duanzi_list:</span><br><span class=\"line\">            # 拼接成Markdown格式</span><br><span class=\"line\">            file.write(&apos;### &apos; + item[0] + item[1])</span><br><span class=\"line\">        # 关闭文件</span><br><span class=\"line\">        file.close()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"一键运行效果\"><a href=\"#一键运行效果\" class=\"headerlink\" title=\"一键运行效果\"></a>一键运行效果</h4><p>妥妥的506页，506个Markdown文档，5057个段子。<br>源码获取：公众号<strong><em>Python孙行者</em></strong>后台回复<strong><em>‘内涵’</em></strong>即可<br><img src=\"http://paresur4s.bkt.clouddn.com/Frxbv1iTlDzM5XCthk19PXTfgn_E\" alt=\"\"><br><img src=\"http://paresur4s.bkt.clouddn.com/FmYHVEpvsfFYV0lu4Zgrkb7pRoK9\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>一键运行获取内涵吧的所有内涵段子并保存为Markdown格式文档。","more":"<br>源码获取：公众号<strong><em>Python孙行者</em></strong>后台回复<strong><em>‘内涵’</em></strong>即可</p>\n<h4 id=\"本文意愿\"><a href=\"#本文意愿\" class=\"headerlink\" title=\"本文意愿\"></a>本文意愿</h4><p>本文的意愿为通过对某网站的爬取，掌握基本的爬虫技能并非以爬取其段子内容为目的。在爬取过程中，请务必设置好爬取的时间间隔，以免影响网站的正常运行。</p>\n<h4 id=\"实战目标\"><a href=\"#实战目标\" class=\"headerlink\" title=\"实战目标\"></a>实战目标</h4><ol>\n<li>分析网页的规律</li>\n<li>使用requests库爬取</li>\n<li>运用正则进行数据清洗和构造</li>\n<li>本地文件保存方法<h4 id=\"分析网页规律\"><a href=\"#分析网页规律\" class=\"headerlink\" title=\"分析网页规律\"></a>分析网页规律</h4></li>\n</ol>\n<p>通过观察网址的变化，我们只需要更改url最后一个数字即可，并且这个数字即为当前页数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一页</span><br><span class=\"line\">https://www.neihan8.com/article/list_5_1.html</span><br><span class=\"line\"># 第二页</span><br><span class=\"line\">https://www.neihan8.com/article/list_5_2.html</span><br><span class=\"line\"># 第三页</span><br><span class=\"line\">https://www.neihan8.com/article/list_5_3.html</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用requests库爬取\"><a href=\"#使用requests库爬取\" class=\"headerlink\" title=\"使用requests库爬取\"></a>使用requests库爬取</h4><p>这里主要是使用get请求方式获取网页内容，需要注意的是需要带上User-Agent和Referer连个请求头信息。因为通过F12发现浏览器发送的请求头携带了这两个参数，为避免对方以这两个字段进行反爬而获取失败，我们就带上这两个字段<br><img src=\"http://paresur4s.bkt.clouddn.com/FlBMB5wSuKl5VhINJzyLmDldX2Cw\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 请求某一具体页面数据</span><br><span class=\"line\">   def request(self, url, index):</span><br><span class=\"line\">       print(&apos;url:&apos;, url)</span><br><span class=\"line\">       # 设置时间间隔， 以免对目标网站造成太大压力</span><br><span class=\"line\">       time.sleep(0.5)</span><br><span class=\"line\">       # 为了规避反爬，爬取的不是第一页需带上Referer请求头信息</span><br><span class=\"line\">       if index != 1:</span><br><span class=\"line\">           # 动态生成url</span><br><span class=\"line\">           self.headers[&apos;Referer&apos;] = &apos;https: // www.neihan8.com / article / list_5_&#123;&#125;.html&apos;.format(index - 1)</span><br><span class=\"line\">       # 获取响应数据</span><br><span class=\"line\">       response = requests.get(url, headers=self.headers)</span><br><span class=\"line\">       # 此网站使用GBK编码，对返回的数据进行相应解码</span><br><span class=\"line\">       return response.content.decode(&apos;gbk&apos;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据清洗\"><a href=\"#数据清洗\" class=\"headerlink\" title=\"数据清洗\"></a>数据清洗</h4><p>在这里使用正则进行对我们需要的数据进行清洗和处理。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 对数据进行提取清洗</span><br><span class=\"line\">    def parse_data_list(self, index):</span><br><span class=\"line\">        # result_list存放已解析清洗好的段子数据</span><br><span class=\"line\">        self.result_list = []</span><br><span class=\"line\">        # 获取到的段子列表数据放到duanzi</span><br><span class=\"line\">        duanzi = self.get_data(index)</span><br><span class=\"line\">        # 对段子列表数据duanzi每一个段子去掉空格和其他字符，保留换行</span><br><span class=\"line\">        for item in duanzi:</span><br><span class=\"line\">            result = re.sub(r&apos;[&lt;b&gt;|&lt;/b&gt;|&lt;br /&gt;|&lt;br&gt;|&lt;p&gt;|&lt;/p&gt;|\\\\u3000|\\\\r|\\s|t|div|sa]&apos;, &quot;&quot;, str(item))</span><br><span class=\"line\">            result = result.replace(&apos;&amp;ldqo;&apos;, &apos;“&apos;).replace(&apos;&amp;dqo;&apos;, &apos;”&apos;).replace(&apos;&amp;helli;&apos;, &apos;...&apos;).replace(&apos;&amp;lqo;&apos;,</span><br><span class=\"line\">                                                                                                           &apos;“&apos;).replace(</span><br><span class=\"line\">                &apos;&amp;qo;&apos;, &apos;”&apos;).replace(&apos;&amp;hell;&apos;, &apos;...&apos;).replace(&apos;n&apos;, &apos;\\\\n&apos;).replace(&apos;&amp;zwj;&apos;, &apos;&apos;).replace(&apos;&amp;qot;&apos;,</span><br><span class=\"line\">                                                                                                       &apos;&quot;&apos;).replace(</span><br><span class=\"line\">                &apos;&amp;mh;&apos;, &apos;&apos;).strip(&apos; &apos;)</span><br><span class=\"line\">            result = re.sub(r&apos;yle.*?(?:x;|\\)|;|\\n|x)&quot;&apos;, &apos;&apos;, result)</span><br><span class=\"line\">            result = re.sub(r&apos;hef.*?ml&quot;&apos;, &apos;&apos;, result)</span><br><span class=\"line\">            result = re.sub(r&quot;cl=.*?(?:we&apos;|\\d+\\&quot;)&quot;, &apos;&apos;, result)</span><br><span class=\"line\">            result = re.sub(r&apos;c=.*?\\.jg&quot;&apos;, &apos;&apos;, result)</span><br><span class=\"line\"></span><br><span class=\"line\">            # 把清洗好的数据添加到result_list</span><br><span class=\"line\">            self.result_list.append(eval(result))</span><br><span class=\"line\">        return self.result_list</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"保存为Markdown文档\"><a href=\"#保存为Markdown文档\" class=\"headerlink\" title=\"保存为Markdown文档\"></a>保存为Markdown文档</h4><p>主要构造为三号标题和正文即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 每一页数据保存为一个单独的Markdowm文档</span><br><span class=\"line\">    def save_md(self, index):</span><br><span class=\"line\">        duanzi_list = self.parse_data_list(index)</span><br><span class=\"line\">        file = open(&apos;内涵段子&#123;&#125;.md&apos;.format(index), &apos;w&apos;)</span><br><span class=\"line\">        for item in duanzi_list:</span><br><span class=\"line\">            # 拼接成Markdown格式</span><br><span class=\"line\">            file.write(&apos;### &apos; + item[0] + item[1])</span><br><span class=\"line\">        # 关闭文件</span><br><span class=\"line\">        file.close()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"一键运行效果\"><a href=\"#一键运行效果\" class=\"headerlink\" title=\"一键运行效果\"></a>一键运行效果</h4><p>妥妥的506页，506个Markdown文档，5057个段子。<br>源码获取：公众号<strong><em>Python孙行者</em></strong>后台回复<strong><em>‘内涵’</em></strong>即可<br><img src=\"http://paresur4s.bkt.clouddn.com/Frxbv1iTlDzM5XCthk19PXTfgn_E\" alt=\"\"><br><img src=\"http://paresur4s.bkt.clouddn.com/FmYHVEpvsfFYV0lu4Zgrkb7pRoK9\" alt=\"\"></p>"},{"title":"常用数据库","comments":1,"date":"2018-07-30T02:34:56.000Z","toc":true,"_content":"MySQL、Redis、MongoDB常用数据库相关知识整理<!--more-->\n#### 事务的特性\n1、原子性( Atomicity)：<br>\n事务中的全部操作在数据库中是不可分割的，要么全部完成，要么均不执行。\n2、一致性( Consistency)：<br>\n几个并行执行的事务，其执行结果必须与按某一顺序串行执行的结果相一致。\n3、隔离性( Isolation)：<br>\n事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的。\n4、持久性( Durability)：<br>\n对于任意已提交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现故障\n#### Redis 和 MySQL 的区别\n1、Redis 是内存数据库，数据保存在内存中，速度快。\n2、MySQL 是关系型数据库，持久化存储，存放在磁盘里面，功能强大。检索的话，会涉及到一定的 IO，数据访问也就慢。\n\n#### Redis避免攻击\n1、主从\n2、持久化存储\n3、Redis 不以 root 账户启动\n4、设置复杂密码\n5、不允许 key 方式登录\n\n\n#### 数据库索引\n数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用B_TREE。B_TREE 索引加速了数据访问，因为存储引擎不会再去扫描整张表得到需要的数据；相反，它从根节点开始，根节点保存了子节点的指针，存储引擎会根据指针快速寻找数据。\n\n#### 数据库怎么优化查询效率\n1.储存引擎选择：如果数据表需要事务处理，应该考虑使用 InnoDB，因为它完全符合 ACID 特性。如果不需要事务处理，使用默认存储引擎 MyISAM 是比较明智的\n2.分表分库，主从\n3.对查询进行优化，要尽量避免全表扫描，首先应考虑在where 及 order by 涉及的列上建立索引\n4.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描\n5.应尽量避免在 where 子句中使用 != 或 <> 操作符，否则将引擎放弃使用索引而进行全表扫描\n6.应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描\n7.Update 语句，如果只更改 1、2 个字段，不要 Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志\n8.对于多张大数据量（这里几百条就算大了）的表 JOIN，要先分页再 JOIN，否则逻辑读会很高，性能很差。\n#### 数据库优化方案\n1. 优化索引、SQL 语句、分析慢查询；\n2. 设计表的时候严格根据数据库的设计范式来设计数据库；\n3. 使用缓存，把经常访问到的数据而且不需要经常变化的数据放在缓存中，能节约磁盘 IO；\n4. 优化硬件；采用 SSD，使用磁盘队列技术(RAID0,RAID1,RDID5)等；\n5. 采用 MySQL 内部自带的表分区技术，把数据分层不同的文件，能够提高磁盘的读取效率；\n6. 垂直分表；把一些不经常读的数据放在一张表里，节约磁盘 I/O；\n7. 主从分离读写；采用主从复制把数据库的读操作和写入操作分离开来；\n8. 分库分表分机器（数据量特别大），主要的的原理就是数据路由；\n9. 选择合适的表引擎，参数上的优化；\n10. 进行架构级别的缓存，静态化和分布式；\n11. 不采用全文索引；\n12. 采用更快的存储方式，例如 NoSQL 存储经常访问的数据\n\n#### Redis MongoDB 优缺点\nMongoDB 和 Redis 都是 NoSQL，采用结构型数据存储。二者在使用场景中，存在一定的区别，这也主要由于二者在内存映射的处理过程，持久化的处理方法不同。MongoDB 建议集群部署，更多的考虑到集群方案，Redis 更偏重于进程顺序写入，虽然支持集群，也仅限于主-从模式.\n**Redis 优点**：\n1 读写性能优异\n2 支持数据持久化，支持 AOF 和 RDB 两种持久化方式\n3 支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。\n4 数据结构丰富：除了支持 string 类型的 value 外还支持 string、hash、set、sortedset、list 等数据结构。\n**Redis缺点**：\n1 Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 IP 才能恢复。\n2 主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了系统的可用性。\n3 Redis 的主从复制采用全量复制，复制过程中主机会 fork出一个子进程对内存做一份快照，并将子进程的内存快照保存为文件发送给从机，这一过程需要确保主机有足够多的空余内\n存。若快照文件较大，对集群的服务能力会产生较大的影响，而且复制过程是在从机新加入集群或者从机和主机网络断开重连时都会进行，也就是网络波动都会造成主机和从机间的一次全量的数据复制，这对实际的系统运营造成了不小的麻烦。\n4 Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。\n**Redis优点**:\na.弱一致性（最终一致），更能保证用户的访问速度\nb.文档结构的存储方式，能够更便捷的获取数据\nc.内置 GridFS，高效存储二进制大对象 (比如照片和视频)\nd.支持复制集、主备、互为主备、自动分片等特性\ne.动态查询\nf.全索引支持,扩展到内部对象和内嵌数组\n**Redis缺点**：不支持事务\n**MongoDB缺点**：\n占用空间过大\n维护工具不够成熟\n\n\n\n#### Mysql 集群\n1、Mysql 群集（Cluster）简介\nMySQL 群集需要有一组计算机，每台计算机的角色可能是不一样的。MySQL 群集中有三种节点：管理节点、数据节点和SQL 节点。群集中的某计算机可能是某一种节点，也可能是两种或三种节点的集合。这三种节点只是在逻辑上的划分，所以它们不一定和物理计算机是一一对应的关系。\n2、管理节点（也可以称管理服务器）主要负责管理数据节点和 SQL 节点，还有群集配置文件和群集日志文件。它监控其他节点的工作状态，能够启动、关闭或重启某个节点。其他节点从管理节点检索配置数据，当数据节点有新事件时就把事件信息发送给管理节点并写入群集日志。\n3、数据节点用于存储数据。\nSQL 节点跟一般的 MySQL 服务器是一样的，我们可以通过它进行 SQL 操作。\nMysqlServer 已经不能满足群集的要求，配置群集需要使用 MySQLCluster。\n#### 怎样解决海量数据的存储和访问造成系统设计瓶颈的问题\n1、水平切分数据库：可以降低单台机器的负载，同时最大限度的降低了宕机造成的损失；分库降低了单点机器的负载；分表，提高了数据操作的效率，负载均衡策略：可以降低单台机器的访问负载，降低宕机的可能性；\n2、集群方案：解决了数据库宕机带来的单点数据库不能访问的问题；\n3、读写分离策略：最大限度了提高了应用中读取数据的速度和并发量；\n#### MySQL 集群的优缺点\n**优点**：\na) 99.999%的高可用性\nb)快速的自动失效切换\nc)灵活的分布式体系结构，没有单点故障\nd)高吞吐量和低延迟\ne)可扩展性强，支持在线扩容\n**缺点**：\na)存在很多限制，比如：不支持外键\nb)部署、管理、配置很复杂\nc)占用磁盘空间大，内存大\nd)备份和恢复不方便\ne)重启的时候，数据节点将数据 load 到内存需要很长时间\n#### MySQL引擎区别\n主要 MyISAM 与 InnoDB 两个引擎，其主要区别如下：\n一、InnoDB 支持事务，MyISAM 不支持，这一点是非常之重要。事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而 MyISAM就不可以了；\n二、MyISAM 适合查询以及插入为主的应用，InnoDB 适合频繁修改以及涉及到安全性较高的应用；\n三、InnoDB 支持外键，MyISAM 不支持；\n四、MyISAM 是默认引擎，InnoDB 需要指定；\n五、InnoDB 不支持 FULLTEXT 类型的索引；\n六、InnoDB 中不保存表的行数，如 select count(*) from table 时，InnoDB；需要扫描一遍整个表来计算有多少行，但是 MyISAM 只要简单的读出保存好的行数即可。注意的是，当 count(*)语句包含 where 条件时MyISAM 也需要扫描整个表；\n七、对于自增长的字段，InnoDB 中必须包含只有该字段的索引，但是在 MyISAM表中可以和其他字段一起建立联合索引；\n八、清空整个表时，InnoDB 是一行一行的删除，效率非常慢。MyISAM 则会重建表；\n九、InnoDB 支持行锁（某些情况下还是锁整表，如 update table set a=1 where user like '%lee%'\n\n#### Redis 基本类型、相关方法\nRedis支持五种数据类型：string（字符串）、hash（哈希）、list（列表）、set（集合）及zset(sorted set：有序集合)。\n一、String\nString是Redis最为常用的一种数据类型，String的数据结构为key/value类型，String可以包含任何数据。\n常用命令: set,get,decr,incr,mget 等\n二、Hash\nHash类型可以看成是一个key/value都是String的Map容器。\n常用命令：hget,hset,hgetall 等。\n三、List\nList用于存储一个有序的字符串列表，常用的操作是向队列两端添加元素或者获得列表的某一片段。\n常用命令：lpush,rpush,lpop,rpop,lrange等\n四、Set\nSet 可以理解为一组无序的字符集合，Set 中相同的元素是不会重复出现的，相同的元素只保留一个。\n常用命令：sadd,spop,smembers,sunion等\n五、Sorted Set（有序集合）\n有序集合是在集合的基础上为每一个元素关联一个分数，Redis通过分数为集合中的成员进行排序。\n常用命令：zadd,zrange,zrem,zcard 等\n#### redis 的事务\nRedis 事务允许一组命令在单一步骤中执行。事务有两个属性，说明如下：\n事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。\n事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。\nRedis 事务是原子的。原子意味着要么所有的命令都执行，要么都不执行；\n一个事务从开始到执行会经历以下三个阶段：\n1、开始事务\n2、命令入队\n3、执行事务\n#### Redis 的使用场景\n1.取最新 N 个数据的操作\n2.排行榜应用,取 TOP N 操作\n3.需要精准设定过期时间的应用\n4.计数器应用\n5.uniq 操作,获取某段时间所有数据排重值\n6.Pub/Sub 构建实时消息系统\n7.构建队列系统\n8.缓存\n#### Redis 默认端口，默认过期时间，Value 数据长度\n1、默认端口：6379\n2、默认过期时间：可以说永不过期，一般情况下，当配置中开启了超出最大内存限制就写磁盘的话，那么没有设置过期时间的 key 可能会被写到磁盘上。假如没设置，那么REDIS 将使用 LRU 机制，将内存中的老数据删除，并写入新数据。\n3、Value 最多可以容纳的数据长度是：512M。\n\n#### 怎样解决数据库高并发的问题\n解决数据库高并发：\n1.  分表分库\n2.  数据库索引\n3.  Redis 缓存数据库\n4.  读写分离\n5.  负载均衡集群：将大量的并发请求分担到多个处理节点。由于单个处理节点的故障不影响整个服务，负载均衡集群同时也实现了高可用性。\n\n#### sqlserver，MySQL ，Oracle http，Redis，https,ssh默认端口号\nsqlserver：1433\n**MySQL ：3306**\nOracle  ：1521\n**http： 80 **\n**https ：443**\n**Redis：6379**\n**ssh： 22**\n#### Redis 缓存命中率计算\nRedis 提供了 INFO 这个命令，能够随时监控服务器的状态，只用 telnet 到对应服务器的端口，执行命令即可：\n```\ntelnet localhost 6379\ninfo\n```\n在输出的信息里面有这几项和缓存的状态比较有关系：\n```\nkeyspace_hits:14414110\n1. keyspace_misses:3228654\n2. used_memory:433264648\n3. expired_keys:1333536\n4. evicted_keys:1547380\n```\n通过计算 hits 和 miss，我们可以得到缓存的命中率：14414110 / (14414110 + 3228654)= 81% ，一个缓存失效机制和过期时间设计良好的系统，命中率可以做到 95%以上\n#### Redis 有多少个库\nRedis默认由16个库(0~15号). 且默认使用的是0号库.\n如果要切换库则使用:\n```\nselect  number  # number表示几号库.\n```\n#### MongoDB\n1、MongoDB 是一个面向文档的数据库系统。使用 C++编写，不支持 SQL，但有自己功能强大的查询语法。\n2、MongoDB 使用 BSON 作为数据存储和传输的格式。BSON 是一种类似 JSON 的二进制序列化文档，支持嵌套对象和数组。\n3、MongoDB 很像 MySQL，document 对应 MySQL 的 row，collection 对应 MySQL 的 table\n**应用场景**：\n1.网站数据：MongoDB 非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。\n2.缓存：由于性能很高，MongoDB 也适合作为信息基础设施的缓存层。在系统重启之后，由MongoDB 搭建的持久化缓存可以避免下层的数据源过载。\n3.大尺寸、低价值的数据：使用传统的关系数据库存储一些数据时可能会比较贵，在此之前，很多程序员往往会选择传统的文件进行存储。\n4.高伸缩性的场景：MongoDB非常适合由数十或者数百台服务器组成的数据库。\n5.用于对象及 JSON 数据的存储：MongoDB 的 BSON 数据格式非常适合文档格式化的存储及查询。\n6.重要数据：MySQL，一般数据：MongoDB，临时数据：memcache\n7.对于关系数据表而言，MongoDB 是提供了一个更快速的视图 view；而对于 PHP 程序而言，MongoDB 可以作为一个持久化的数组来使用，并且这个持久化的数组还可以支持排序、条件、限制等功能。\n8.将 MongoDB 代替MySQL 的部分功能，主要一个思考点就是：把 MongoDB 当作 MySQL 的一个 view（视图），view 是将表数据整合成业务数据的关键。比如说对原始数据进行报表， 那么就要先把原始数据统计后生成 view，在对 view 进行查询和报表。\n**不适合的场景**：\na.高度事物性的系统：例如银行或会计系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。\nb.传统的商业智能应用：针对特定问题的 BI 数据库会对产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。\nc.需要 SQL 的问题\nd.重要数据，关系数据\n**优点**:\na.弱一致性（最终一致），更能保证用户的访问速度\nb.文档结构的存储方式，能够更便捷的获取数据\nc.内置 GridFS，高效存储二进制大对象 (比如照片和视频)\nd.支持复制集、主备、互为主备、自动分片等特性\ne.动态查询\nf.全索引支持,扩展到内部对象和内嵌数组\n**Redis缺点**：\na.不支持事务\nb.MongoDB 占用空间过大\nc.维护工具不够成熟\n\n#### 说一下 MySQL 数据库存储的原理\n1、储存过程是一个可编程的函数，它在数据库中创建并保存。它可以有 SQL 语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟。它允许控制数据的访问方式。<br>\n\n2、存储过程通常有以下优点：\n1)存储过程能实现较快的执行速度。\n2)存储过程允许标准组件是编程。\n3)存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。\n4)存储过程可被作为一种安全机制来充分利用。\n5)存储过程能过减少网络流量。\n\n#### Mysql 和 Redis 高可用性\n1、MySQL Replication 是 MySQL 官方提供的主从同步方案，用于将一个 MySQL 实例的数据，同步到另一个实例中。Replication 为保证数据安全做了重要的保证，也是现在运用最广的 MySQL 容灾方案。Replication 用两个或以上的实例搭建了 MySQL 主从复制集群，提供单点写入，多点读取的服务，实现了读的 scale out.\n2、Sentinel 是 Redis 官方为集群提供的高可用解决方案。 在实际项目中可以使用 sentinel 去做 Redis 自动故障转移，减少人工介入的工作量。另外 sentinel 也给客户端提供了监控消息的通知，这样客户端就可根据消息类型去判断服务器的状态，去做对应的适配操作。\n3、下面是 Sentinel 主要功能列表：\n（1）Monitoring：Sentinel 持续检查集群中的 master、slave状态，判断是否存活。\n（2）Notification：在发现某个 redis 实例死的情况下，Sentinel 能通过 API 通知系统管理员或其他程序脚本。\n（3）Automatic failover：如果一个 master 挂掉后，sentinel立马启动故障转移，把某个 slave 提升为 master。其他的 slave重新配置指向新 master。\n（4）Configuration provider：对于客户端来说 sentinel 通知是有效可信赖的。客户端会连接 sentinel 去请求当前 master 的地址，一旦发生故障 sentinel 会提供新地址给客户端。\n\n#### 数据库负载均衡\n负载均衡集群是由一组相互独立的计算机系统构成，通过常规网络或专用网络进行连接，由路由器衔接在一起，各节点相互协作、共同负载、均衡压力，对客户端来说，整个群集可以视为一台具有超高性能的独立服务器。\n1、实现原理\n实现数据库的负载均衡技术，首先要有一个可以控制连接数据库的控制端。在这里，它截断了数据库和程序的直接连接，由所有的程序来访问这个中间层，然后再由中间层来访问数据库。这样，我们就可以具体控制访问某个数据库了，然后还可以根据数据库的当前负载采取有效的均衡策略，来调整每次连接到哪个数据库。\n2、实现多数据库数据同步\na.对于负载均衡，最重要的就是所有服务器的数据都是实时同步的。这是一个集群所必需的，因为，如果数不据实时、不同步，那么用户从一台服务器读出的数据，就有别于从另一台服务器读出的数据，这是不能允许的。所以必须实现数据库的数据同步。这样，在查询的时候就可以有多个资源，实现均衡。\nb.比较常用的方法是 Moebius for SQL Server 集群，Moebius for SQL Server 集群采用将核心程序驻留在每个机器的数据库中的办法，这个核心程序称为 Moebius for SQL Server 中间件，主要作用是监测数据库内数据的变化并将变化的数据同步到其他数据库中。\nc.数据同步完成后客户端才会得到响应，同步过程是并发完成的，所以同步到多个数据库和同步到一个数据库的时间基本相等；另外同步的过程是在事务的环境下完成的，保证了多份数据在任何时刻数据的一致性。\nd.正因为 Moebius 中间件宿主在数据库中的创新，让中间件不但能知道数据的变化，而且知道引起数据变化的 SQL 语句，根据 SQL 语句的类型智能的采取不同的数据同步的策略以保证数据同步成本的最小化。\ne.数据条数很少，数据内容也不大，则直接同步数据数据条数很少，但是里面包含大数据类型，比如文本，二进制数据等，则先对数据进行压缩然后再同步，从而减少网络带宽的占用和传输所用的时间。\nf.数据条数很多，此时中间件会拿到造成数据变化的 SQL 语句， 然后对 SQL 语句进行解析，分析其执行计划和执行成本，并选择是同步数据还是同步 SQL 语句到其他的数据库中。此种情况应用在对表结构进行调整或者批量更改数据的时候非常有用。\n\n3、优缺点\n**优点**：\n(1) 扩展性强：当系统需要更高数据库处理速度时，只要简单地增加数据库服务器就 可以得到扩展。\n(2) 可维护性：当某节点发生故障时，系统会自动检测故障并转移故障节点的应用，保证数据库的持续工作。\n(3) 安全性：因为数据会同步的多台服务器上，可以实现数据集的冗余，通过多份数据来保证安全性。另外它成功地将数据库放到了内网之中，更好地保护了数据库的安全性。\n(4) 易用性：对应用来说完全透明，集群暴露出来的就是一个 IP\n**缺点**：\n(1) 不能够按照 Web 服务器的处理能力分配负载。\n(2) 负载均衡器(控制端)故障，会导致整个数据库系统瘫痪。\n","source":"_posts/常用数据库.md","raw":"---\ntitle: 常用数据库\ncomments: true\ndate: 2018-07-30 10:34:56\ntoc: true\ncategories:\n- Python\ntags:\n- 数据库\n---\nMySQL、Redis、MongoDB常用数据库相关知识整理<!--more-->\n#### 事务的特性\n1、原子性( Atomicity)：<br>\n事务中的全部操作在数据库中是不可分割的，要么全部完成，要么均不执行。\n2、一致性( Consistency)：<br>\n几个并行执行的事务，其执行结果必须与按某一顺序串行执行的结果相一致。\n3、隔离性( Isolation)：<br>\n事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的。\n4、持久性( Durability)：<br>\n对于任意已提交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现故障\n#### Redis 和 MySQL 的区别\n1、Redis 是内存数据库，数据保存在内存中，速度快。\n2、MySQL 是关系型数据库，持久化存储，存放在磁盘里面，功能强大。检索的话，会涉及到一定的 IO，数据访问也就慢。\n\n#### Redis避免攻击\n1、主从\n2、持久化存储\n3、Redis 不以 root 账户启动\n4、设置复杂密码\n5、不允许 key 方式登录\n\n\n#### 数据库索引\n数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用B_TREE。B_TREE 索引加速了数据访问，因为存储引擎不会再去扫描整张表得到需要的数据；相反，它从根节点开始，根节点保存了子节点的指针，存储引擎会根据指针快速寻找数据。\n\n#### 数据库怎么优化查询效率\n1.储存引擎选择：如果数据表需要事务处理，应该考虑使用 InnoDB，因为它完全符合 ACID 特性。如果不需要事务处理，使用默认存储引擎 MyISAM 是比较明智的\n2.分表分库，主从\n3.对查询进行优化，要尽量避免全表扫描，首先应考虑在where 及 order by 涉及的列上建立索引\n4.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描\n5.应尽量避免在 where 子句中使用 != 或 <> 操作符，否则将引擎放弃使用索引而进行全表扫描\n6.应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描\n7.Update 语句，如果只更改 1、2 个字段，不要 Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志\n8.对于多张大数据量（这里几百条就算大了）的表 JOIN，要先分页再 JOIN，否则逻辑读会很高，性能很差。\n#### 数据库优化方案\n1. 优化索引、SQL 语句、分析慢查询；\n2. 设计表的时候严格根据数据库的设计范式来设计数据库；\n3. 使用缓存，把经常访问到的数据而且不需要经常变化的数据放在缓存中，能节约磁盘 IO；\n4. 优化硬件；采用 SSD，使用磁盘队列技术(RAID0,RAID1,RDID5)等；\n5. 采用 MySQL 内部自带的表分区技术，把数据分层不同的文件，能够提高磁盘的读取效率；\n6. 垂直分表；把一些不经常读的数据放在一张表里，节约磁盘 I/O；\n7. 主从分离读写；采用主从复制把数据库的读操作和写入操作分离开来；\n8. 分库分表分机器（数据量特别大），主要的的原理就是数据路由；\n9. 选择合适的表引擎，参数上的优化；\n10. 进行架构级别的缓存，静态化和分布式；\n11. 不采用全文索引；\n12. 采用更快的存储方式，例如 NoSQL 存储经常访问的数据\n\n#### Redis MongoDB 优缺点\nMongoDB 和 Redis 都是 NoSQL，采用结构型数据存储。二者在使用场景中，存在一定的区别，这也主要由于二者在内存映射的处理过程，持久化的处理方法不同。MongoDB 建议集群部署，更多的考虑到集群方案，Redis 更偏重于进程顺序写入，虽然支持集群，也仅限于主-从模式.\n**Redis 优点**：\n1 读写性能优异\n2 支持数据持久化，支持 AOF 和 RDB 两种持久化方式\n3 支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。\n4 数据结构丰富：除了支持 string 类型的 value 外还支持 string、hash、set、sortedset、list 等数据结构。\n**Redis缺点**：\n1 Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 IP 才能恢复。\n2 主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了系统的可用性。\n3 Redis 的主从复制采用全量复制，复制过程中主机会 fork出一个子进程对内存做一份快照，并将子进程的内存快照保存为文件发送给从机，这一过程需要确保主机有足够多的空余内\n存。若快照文件较大，对集群的服务能力会产生较大的影响，而且复制过程是在从机新加入集群或者从机和主机网络断开重连时都会进行，也就是网络波动都会造成主机和从机间的一次全量的数据复制，这对实际的系统运营造成了不小的麻烦。\n4 Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。\n**Redis优点**:\na.弱一致性（最终一致），更能保证用户的访问速度\nb.文档结构的存储方式，能够更便捷的获取数据\nc.内置 GridFS，高效存储二进制大对象 (比如照片和视频)\nd.支持复制集、主备、互为主备、自动分片等特性\ne.动态查询\nf.全索引支持,扩展到内部对象和内嵌数组\n**Redis缺点**：不支持事务\n**MongoDB缺点**：\n占用空间过大\n维护工具不够成熟\n\n\n\n#### Mysql 集群\n1、Mysql 群集（Cluster）简介\nMySQL 群集需要有一组计算机，每台计算机的角色可能是不一样的。MySQL 群集中有三种节点：管理节点、数据节点和SQL 节点。群集中的某计算机可能是某一种节点，也可能是两种或三种节点的集合。这三种节点只是在逻辑上的划分，所以它们不一定和物理计算机是一一对应的关系。\n2、管理节点（也可以称管理服务器）主要负责管理数据节点和 SQL 节点，还有群集配置文件和群集日志文件。它监控其他节点的工作状态，能够启动、关闭或重启某个节点。其他节点从管理节点检索配置数据，当数据节点有新事件时就把事件信息发送给管理节点并写入群集日志。\n3、数据节点用于存储数据。\nSQL 节点跟一般的 MySQL 服务器是一样的，我们可以通过它进行 SQL 操作。\nMysqlServer 已经不能满足群集的要求，配置群集需要使用 MySQLCluster。\n#### 怎样解决海量数据的存储和访问造成系统设计瓶颈的问题\n1、水平切分数据库：可以降低单台机器的负载，同时最大限度的降低了宕机造成的损失；分库降低了单点机器的负载；分表，提高了数据操作的效率，负载均衡策略：可以降低单台机器的访问负载，降低宕机的可能性；\n2、集群方案：解决了数据库宕机带来的单点数据库不能访问的问题；\n3、读写分离策略：最大限度了提高了应用中读取数据的速度和并发量；\n#### MySQL 集群的优缺点\n**优点**：\na) 99.999%的高可用性\nb)快速的自动失效切换\nc)灵活的分布式体系结构，没有单点故障\nd)高吞吐量和低延迟\ne)可扩展性强，支持在线扩容\n**缺点**：\na)存在很多限制，比如：不支持外键\nb)部署、管理、配置很复杂\nc)占用磁盘空间大，内存大\nd)备份和恢复不方便\ne)重启的时候，数据节点将数据 load 到内存需要很长时间\n#### MySQL引擎区别\n主要 MyISAM 与 InnoDB 两个引擎，其主要区别如下：\n一、InnoDB 支持事务，MyISAM 不支持，这一点是非常之重要。事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而 MyISAM就不可以了；\n二、MyISAM 适合查询以及插入为主的应用，InnoDB 适合频繁修改以及涉及到安全性较高的应用；\n三、InnoDB 支持外键，MyISAM 不支持；\n四、MyISAM 是默认引擎，InnoDB 需要指定；\n五、InnoDB 不支持 FULLTEXT 类型的索引；\n六、InnoDB 中不保存表的行数，如 select count(*) from table 时，InnoDB；需要扫描一遍整个表来计算有多少行，但是 MyISAM 只要简单的读出保存好的行数即可。注意的是，当 count(*)语句包含 where 条件时MyISAM 也需要扫描整个表；\n七、对于自增长的字段，InnoDB 中必须包含只有该字段的索引，但是在 MyISAM表中可以和其他字段一起建立联合索引；\n八、清空整个表时，InnoDB 是一行一行的删除，效率非常慢。MyISAM 则会重建表；\n九、InnoDB 支持行锁（某些情况下还是锁整表，如 update table set a=1 where user like '%lee%'\n\n#### Redis 基本类型、相关方法\nRedis支持五种数据类型：string（字符串）、hash（哈希）、list（列表）、set（集合）及zset(sorted set：有序集合)。\n一、String\nString是Redis最为常用的一种数据类型，String的数据结构为key/value类型，String可以包含任何数据。\n常用命令: set,get,decr,incr,mget 等\n二、Hash\nHash类型可以看成是一个key/value都是String的Map容器。\n常用命令：hget,hset,hgetall 等。\n三、List\nList用于存储一个有序的字符串列表，常用的操作是向队列两端添加元素或者获得列表的某一片段。\n常用命令：lpush,rpush,lpop,rpop,lrange等\n四、Set\nSet 可以理解为一组无序的字符集合，Set 中相同的元素是不会重复出现的，相同的元素只保留一个。\n常用命令：sadd,spop,smembers,sunion等\n五、Sorted Set（有序集合）\n有序集合是在集合的基础上为每一个元素关联一个分数，Redis通过分数为集合中的成员进行排序。\n常用命令：zadd,zrange,zrem,zcard 等\n#### redis 的事务\nRedis 事务允许一组命令在单一步骤中执行。事务有两个属性，说明如下：\n事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。\n事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。\nRedis 事务是原子的。原子意味着要么所有的命令都执行，要么都不执行；\n一个事务从开始到执行会经历以下三个阶段：\n1、开始事务\n2、命令入队\n3、执行事务\n#### Redis 的使用场景\n1.取最新 N 个数据的操作\n2.排行榜应用,取 TOP N 操作\n3.需要精准设定过期时间的应用\n4.计数器应用\n5.uniq 操作,获取某段时间所有数据排重值\n6.Pub/Sub 构建实时消息系统\n7.构建队列系统\n8.缓存\n#### Redis 默认端口，默认过期时间，Value 数据长度\n1、默认端口：6379\n2、默认过期时间：可以说永不过期，一般情况下，当配置中开启了超出最大内存限制就写磁盘的话，那么没有设置过期时间的 key 可能会被写到磁盘上。假如没设置，那么REDIS 将使用 LRU 机制，将内存中的老数据删除，并写入新数据。\n3、Value 最多可以容纳的数据长度是：512M。\n\n#### 怎样解决数据库高并发的问题\n解决数据库高并发：\n1.  分表分库\n2.  数据库索引\n3.  Redis 缓存数据库\n4.  读写分离\n5.  负载均衡集群：将大量的并发请求分担到多个处理节点。由于单个处理节点的故障不影响整个服务，负载均衡集群同时也实现了高可用性。\n\n#### sqlserver，MySQL ，Oracle http，Redis，https,ssh默认端口号\nsqlserver：1433\n**MySQL ：3306**\nOracle  ：1521\n**http： 80 **\n**https ：443**\n**Redis：6379**\n**ssh： 22**\n#### Redis 缓存命中率计算\nRedis 提供了 INFO 这个命令，能够随时监控服务器的状态，只用 telnet 到对应服务器的端口，执行命令即可：\n```\ntelnet localhost 6379\ninfo\n```\n在输出的信息里面有这几项和缓存的状态比较有关系：\n```\nkeyspace_hits:14414110\n1. keyspace_misses:3228654\n2. used_memory:433264648\n3. expired_keys:1333536\n4. evicted_keys:1547380\n```\n通过计算 hits 和 miss，我们可以得到缓存的命中率：14414110 / (14414110 + 3228654)= 81% ，一个缓存失效机制和过期时间设计良好的系统，命中率可以做到 95%以上\n#### Redis 有多少个库\nRedis默认由16个库(0~15号). 且默认使用的是0号库.\n如果要切换库则使用:\n```\nselect  number  # number表示几号库.\n```\n#### MongoDB\n1、MongoDB 是一个面向文档的数据库系统。使用 C++编写，不支持 SQL，但有自己功能强大的查询语法。\n2、MongoDB 使用 BSON 作为数据存储和传输的格式。BSON 是一种类似 JSON 的二进制序列化文档，支持嵌套对象和数组。\n3、MongoDB 很像 MySQL，document 对应 MySQL 的 row，collection 对应 MySQL 的 table\n**应用场景**：\n1.网站数据：MongoDB 非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。\n2.缓存：由于性能很高，MongoDB 也适合作为信息基础设施的缓存层。在系统重启之后，由MongoDB 搭建的持久化缓存可以避免下层的数据源过载。\n3.大尺寸、低价值的数据：使用传统的关系数据库存储一些数据时可能会比较贵，在此之前，很多程序员往往会选择传统的文件进行存储。\n4.高伸缩性的场景：MongoDB非常适合由数十或者数百台服务器组成的数据库。\n5.用于对象及 JSON 数据的存储：MongoDB 的 BSON 数据格式非常适合文档格式化的存储及查询。\n6.重要数据：MySQL，一般数据：MongoDB，临时数据：memcache\n7.对于关系数据表而言，MongoDB 是提供了一个更快速的视图 view；而对于 PHP 程序而言，MongoDB 可以作为一个持久化的数组来使用，并且这个持久化的数组还可以支持排序、条件、限制等功能。\n8.将 MongoDB 代替MySQL 的部分功能，主要一个思考点就是：把 MongoDB 当作 MySQL 的一个 view（视图），view 是将表数据整合成业务数据的关键。比如说对原始数据进行报表， 那么就要先把原始数据统计后生成 view，在对 view 进行查询和报表。\n**不适合的场景**：\na.高度事物性的系统：例如银行或会计系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。\nb.传统的商业智能应用：针对特定问题的 BI 数据库会对产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。\nc.需要 SQL 的问题\nd.重要数据，关系数据\n**优点**:\na.弱一致性（最终一致），更能保证用户的访问速度\nb.文档结构的存储方式，能够更便捷的获取数据\nc.内置 GridFS，高效存储二进制大对象 (比如照片和视频)\nd.支持复制集、主备、互为主备、自动分片等特性\ne.动态查询\nf.全索引支持,扩展到内部对象和内嵌数组\n**Redis缺点**：\na.不支持事务\nb.MongoDB 占用空间过大\nc.维护工具不够成熟\n\n#### 说一下 MySQL 数据库存储的原理\n1、储存过程是一个可编程的函数，它在数据库中创建并保存。它可以有 SQL 语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟。它允许控制数据的访问方式。<br>\n\n2、存储过程通常有以下优点：\n1)存储过程能实现较快的执行速度。\n2)存储过程允许标准组件是编程。\n3)存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。\n4)存储过程可被作为一种安全机制来充分利用。\n5)存储过程能过减少网络流量。\n\n#### Mysql 和 Redis 高可用性\n1、MySQL Replication 是 MySQL 官方提供的主从同步方案，用于将一个 MySQL 实例的数据，同步到另一个实例中。Replication 为保证数据安全做了重要的保证，也是现在运用最广的 MySQL 容灾方案。Replication 用两个或以上的实例搭建了 MySQL 主从复制集群，提供单点写入，多点读取的服务，实现了读的 scale out.\n2、Sentinel 是 Redis 官方为集群提供的高可用解决方案。 在实际项目中可以使用 sentinel 去做 Redis 自动故障转移，减少人工介入的工作量。另外 sentinel 也给客户端提供了监控消息的通知，这样客户端就可根据消息类型去判断服务器的状态，去做对应的适配操作。\n3、下面是 Sentinel 主要功能列表：\n（1）Monitoring：Sentinel 持续检查集群中的 master、slave状态，判断是否存活。\n（2）Notification：在发现某个 redis 实例死的情况下，Sentinel 能通过 API 通知系统管理员或其他程序脚本。\n（3）Automatic failover：如果一个 master 挂掉后，sentinel立马启动故障转移，把某个 slave 提升为 master。其他的 slave重新配置指向新 master。\n（4）Configuration provider：对于客户端来说 sentinel 通知是有效可信赖的。客户端会连接 sentinel 去请求当前 master 的地址，一旦发生故障 sentinel 会提供新地址给客户端。\n\n#### 数据库负载均衡\n负载均衡集群是由一组相互独立的计算机系统构成，通过常规网络或专用网络进行连接，由路由器衔接在一起，各节点相互协作、共同负载、均衡压力，对客户端来说，整个群集可以视为一台具有超高性能的独立服务器。\n1、实现原理\n实现数据库的负载均衡技术，首先要有一个可以控制连接数据库的控制端。在这里，它截断了数据库和程序的直接连接，由所有的程序来访问这个中间层，然后再由中间层来访问数据库。这样，我们就可以具体控制访问某个数据库了，然后还可以根据数据库的当前负载采取有效的均衡策略，来调整每次连接到哪个数据库。\n2、实现多数据库数据同步\na.对于负载均衡，最重要的就是所有服务器的数据都是实时同步的。这是一个集群所必需的，因为，如果数不据实时、不同步，那么用户从一台服务器读出的数据，就有别于从另一台服务器读出的数据，这是不能允许的。所以必须实现数据库的数据同步。这样，在查询的时候就可以有多个资源，实现均衡。\nb.比较常用的方法是 Moebius for SQL Server 集群，Moebius for SQL Server 集群采用将核心程序驻留在每个机器的数据库中的办法，这个核心程序称为 Moebius for SQL Server 中间件，主要作用是监测数据库内数据的变化并将变化的数据同步到其他数据库中。\nc.数据同步完成后客户端才会得到响应，同步过程是并发完成的，所以同步到多个数据库和同步到一个数据库的时间基本相等；另外同步的过程是在事务的环境下完成的，保证了多份数据在任何时刻数据的一致性。\nd.正因为 Moebius 中间件宿主在数据库中的创新，让中间件不但能知道数据的变化，而且知道引起数据变化的 SQL 语句，根据 SQL 语句的类型智能的采取不同的数据同步的策略以保证数据同步成本的最小化。\ne.数据条数很少，数据内容也不大，则直接同步数据数据条数很少，但是里面包含大数据类型，比如文本，二进制数据等，则先对数据进行压缩然后再同步，从而减少网络带宽的占用和传输所用的时间。\nf.数据条数很多，此时中间件会拿到造成数据变化的 SQL 语句， 然后对 SQL 语句进行解析，分析其执行计划和执行成本，并选择是同步数据还是同步 SQL 语句到其他的数据库中。此种情况应用在对表结构进行调整或者批量更改数据的时候非常有用。\n\n3、优缺点\n**优点**：\n(1) 扩展性强：当系统需要更高数据库处理速度时，只要简单地增加数据库服务器就 可以得到扩展。\n(2) 可维护性：当某节点发生故障时，系统会自动检测故障并转移故障节点的应用，保证数据库的持续工作。\n(3) 安全性：因为数据会同步的多台服务器上，可以实现数据集的冗余，通过多份数据来保证安全性。另外它成功地将数据库放到了内网之中，更好地保护了数据库的安全性。\n(4) 易用性：对应用来说完全透明，集群暴露出来的就是一个 IP\n**缺点**：\n(1) 不能够按照 Web 服务器的处理能力分配负载。\n(2) 负载均衡器(控制端)故障，会导致整个数据库系统瘫痪。\n","slug":"常用数据库","published":1,"updated":"2019-05-25T09:32:43.111Z","layout":"post","photos":[],"link":"","_id":"cjw3bjte90037e5vx32nibac7","content":"<p>MySQL、Redis、MongoDB常用数据库相关知识整理<a id=\"more\"></a></p>\n<h4 id=\"事务的特性\"><a href=\"#事务的特性\" class=\"headerlink\" title=\"事务的特性\"></a>事务的特性</h4><p>1、原子性( Atomicity)：<br><br>事务中的全部操作在数据库中是不可分割的，要么全部完成，要么均不执行。<br>2、一致性( Consistency)：<br><br>几个并行执行的事务，其执行结果必须与按某一顺序串行执行的结果相一致。<br>3、隔离性( Isolation)：<br><br>事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的。<br>4、持久性( Durability)：<br><br>对于任意已提交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现故障</p>\n<h4 id=\"Redis-和-MySQL-的区别\"><a href=\"#Redis-和-MySQL-的区别\" class=\"headerlink\" title=\"Redis 和 MySQL 的区别\"></a>Redis 和 MySQL 的区别</h4><p>1、Redis 是内存数据库，数据保存在内存中，速度快。<br>2、MySQL 是关系型数据库，持久化存储，存放在磁盘里面，功能强大。检索的话，会涉及到一定的 IO，数据访问也就慢。</p>\n<h4 id=\"Redis避免攻击\"><a href=\"#Redis避免攻击\" class=\"headerlink\" title=\"Redis避免攻击\"></a>Redis避免攻击</h4><p>1、主从<br>2、持久化存储<br>3、Redis 不以 root 账户启动<br>4、设置复杂密码<br>5、不允许 key 方式登录</p>\n<h4 id=\"数据库索引\"><a href=\"#数据库索引\" class=\"headerlink\" title=\"数据库索引\"></a>数据库索引</h4><p>数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用B_TREE。B_TREE 索引加速了数据访问，因为存储引擎不会再去扫描整张表得到需要的数据；相反，它从根节点开始，根节点保存了子节点的指针，存储引擎会根据指针快速寻找数据。</p>\n<h4 id=\"数据库怎么优化查询效率\"><a href=\"#数据库怎么优化查询效率\" class=\"headerlink\" title=\"数据库怎么优化查询效率\"></a>数据库怎么优化查询效率</h4><p>1.储存引擎选择：如果数据表需要事务处理，应该考虑使用 InnoDB，因为它完全符合 ACID 特性。如果不需要事务处理，使用默认存储引擎 MyISAM 是比较明智的<br>2.分表分库，主从<br>3.对查询进行优化，要尽量避免全表扫描，首先应考虑在where 及 order by 涉及的列上建立索引<br>4.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描<br>5.应尽量避免在 where 子句中使用 != 或 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描<br>6.应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描<br>7.Update 语句，如果只更改 1、2 个字段，不要 Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志<br>8.对于多张大数据量（这里几百条就算大了）的表 JOIN，要先分页再 JOIN，否则逻辑读会很高，性能很差。</p>\n<h4 id=\"数据库优化方案\"><a href=\"#数据库优化方案\" class=\"headerlink\" title=\"数据库优化方案\"></a>数据库优化方案</h4><ol>\n<li>优化索引、SQL 语句、分析慢查询；</li>\n<li>设计表的时候严格根据数据库的设计范式来设计数据库；</li>\n<li>使用缓存，把经常访问到的数据而且不需要经常变化的数据放在缓存中，能节约磁盘 IO；</li>\n<li>优化硬件；采用 SSD，使用磁盘队列技术(RAID0,RAID1,RDID5)等；</li>\n<li>采用 MySQL 内部自带的表分区技术，把数据分层不同的文件，能够提高磁盘的读取效率；</li>\n<li>垂直分表；把一些不经常读的数据放在一张表里，节约磁盘 I/O；</li>\n<li>主从分离读写；采用主从复制把数据库的读操作和写入操作分离开来；</li>\n<li>分库分表分机器（数据量特别大），主要的的原理就是数据路由；</li>\n<li>选择合适的表引擎，参数上的优化；</li>\n<li>进行架构级别的缓存，静态化和分布式；</li>\n<li>不采用全文索引；</li>\n<li>采用更快的存储方式，例如 NoSQL 存储经常访问的数据</li>\n</ol>\n<h4 id=\"Redis-MongoDB-优缺点\"><a href=\"#Redis-MongoDB-优缺点\" class=\"headerlink\" title=\"Redis MongoDB 优缺点\"></a>Redis MongoDB 优缺点</h4><p>MongoDB 和 Redis 都是 NoSQL，采用结构型数据存储。二者在使用场景中，存在一定的区别，这也主要由于二者在内存映射的处理过程，持久化的处理方法不同。MongoDB 建议集群部署，更多的考虑到集群方案，Redis 更偏重于进程顺序写入，虽然支持集群，也仅限于主-从模式.<br><strong>Redis 优点</strong>：<br>1 读写性能优异<br>2 支持数据持久化，支持 AOF 和 RDB 两种持久化方式<br>3 支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。<br>4 数据结构丰富：除了支持 string 类型的 value 外还支持 string、hash、set、sortedset、list 等数据结构。<br><strong>Redis缺点</strong>：<br>1 Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 IP 才能恢复。<br>2 主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了系统的可用性。<br>3 Redis 的主从复制采用全量复制，复制过程中主机会 fork出一个子进程对内存做一份快照，并将子进程的内存快照保存为文件发送给从机，这一过程需要确保主机有足够多的空余内<br>存。若快照文件较大，对集群的服务能力会产生较大的影响，而且复制过程是在从机新加入集群或者从机和主机网络断开重连时都会进行，也就是网络波动都会造成主机和从机间的一次全量的数据复制，这对实际的系统运营造成了不小的麻烦。<br>4 Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。<br><strong>Redis优点</strong>:<br>a.弱一致性（最终一致），更能保证用户的访问速度<br>b.文档结构的存储方式，能够更便捷的获取数据<br>c.内置 GridFS，高效存储二进制大对象 (比如照片和视频)<br>d.支持复制集、主备、互为主备、自动分片等特性<br>e.动态查询<br>f.全索引支持,扩展到内部对象和内嵌数组<br><strong>Redis缺点</strong>：不支持事务<br><strong>MongoDB缺点</strong>：<br>占用空间过大<br>维护工具不够成熟</p>\n<h4 id=\"Mysql-集群\"><a href=\"#Mysql-集群\" class=\"headerlink\" title=\"Mysql 集群\"></a>Mysql 集群</h4><p>1、Mysql 群集（Cluster）简介<br>MySQL 群集需要有一组计算机，每台计算机的角色可能是不一样的。MySQL 群集中有三种节点：管理节点、数据节点和SQL 节点。群集中的某计算机可能是某一种节点，也可能是两种或三种节点的集合。这三种节点只是在逻辑上的划分，所以它们不一定和物理计算机是一一对应的关系。<br>2、管理节点（也可以称管理服务器）主要负责管理数据节点和 SQL 节点，还有群集配置文件和群集日志文件。它监控其他节点的工作状态，能够启动、关闭或重启某个节点。其他节点从管理节点检索配置数据，当数据节点有新事件时就把事件信息发送给管理节点并写入群集日志。<br>3、数据节点用于存储数据。<br>SQL 节点跟一般的 MySQL 服务器是一样的，我们可以通过它进行 SQL 操作。<br>MysqlServer 已经不能满足群集的要求，配置群集需要使用 MySQLCluster。</p>\n<h4 id=\"怎样解决海量数据的存储和访问造成系统设计瓶颈的问题\"><a href=\"#怎样解决海量数据的存储和访问造成系统设计瓶颈的问题\" class=\"headerlink\" title=\"怎样解决海量数据的存储和访问造成系统设计瓶颈的问题\"></a>怎样解决海量数据的存储和访问造成系统设计瓶颈的问题</h4><p>1、水平切分数据库：可以降低单台机器的负载，同时最大限度的降低了宕机造成的损失；分库降低了单点机器的负载；分表，提高了数据操作的效率，负载均衡策略：可以降低单台机器的访问负载，降低宕机的可能性；<br>2、集群方案：解决了数据库宕机带来的单点数据库不能访问的问题；<br>3、读写分离策略：最大限度了提高了应用中读取数据的速度和并发量；</p>\n<h4 id=\"MySQL-集群的优缺点\"><a href=\"#MySQL-集群的优缺点\" class=\"headerlink\" title=\"MySQL 集群的优缺点\"></a>MySQL 集群的优缺点</h4><p><strong>优点</strong>：<br>a) 99.999%的高可用性<br>b)快速的自动失效切换<br>c)灵活的分布式体系结构，没有单点故障<br>d)高吞吐量和低延迟<br>e)可扩展性强，支持在线扩容<br><strong>缺点</strong>：<br>a)存在很多限制，比如：不支持外键<br>b)部署、管理、配置很复杂<br>c)占用磁盘空间大，内存大<br>d)备份和恢复不方便<br>e)重启的时候，数据节点将数据 load 到内存需要很长时间</p>\n<h4 id=\"MySQL引擎区别\"><a href=\"#MySQL引擎区别\" class=\"headerlink\" title=\"MySQL引擎区别\"></a>MySQL引擎区别</h4><p>主要 MyISAM 与 InnoDB 两个引擎，其主要区别如下：<br>一、InnoDB 支持事务，MyISAM 不支持，这一点是非常之重要。事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而 MyISAM就不可以了；<br>二、MyISAM 适合查询以及插入为主的应用，InnoDB 适合频繁修改以及涉及到安全性较高的应用；<br>三、InnoDB 支持外键，MyISAM 不支持；<br>四、MyISAM 是默认引擎，InnoDB 需要指定；<br>五、InnoDB 不支持 FULLTEXT 类型的索引；<br>六、InnoDB 中不保存表的行数，如 select count(<em>) from table 时，InnoDB；需要扫描一遍整个表来计算有多少行，但是 MyISAM 只要简单的读出保存好的行数即可。注意的是，当 count(</em>)语句包含 where 条件时MyISAM 也需要扫描整个表；<br>七、对于自增长的字段，InnoDB 中必须包含只有该字段的索引，但是在 MyISAM表中可以和其他字段一起建立联合索引；<br>八、清空整个表时，InnoDB 是一行一行的删除，效率非常慢。MyISAM 则会重建表；<br>九、InnoDB 支持行锁（某些情况下还是锁整表，如 update table set a=1 where user like ‘%lee%’</p>\n<h4 id=\"Redis-基本类型、相关方法\"><a href=\"#Redis-基本类型、相关方法\" class=\"headerlink\" title=\"Redis 基本类型、相关方法\"></a>Redis 基本类型、相关方法</h4><p>Redis支持五种数据类型：string（字符串）、hash（哈希）、list（列表）、set（集合）及zset(sorted set：有序集合)。<br>一、String<br>String是Redis最为常用的一种数据类型，String的数据结构为key/value类型，String可以包含任何数据。<br>常用命令: set,get,decr,incr,mget 等<br>二、Hash<br>Hash类型可以看成是一个key/value都是String的Map容器。<br>常用命令：hget,hset,hgetall 等。<br>三、List<br>List用于存储一个有序的字符串列表，常用的操作是向队列两端添加元素或者获得列表的某一片段。<br>常用命令：lpush,rpush,lpop,rpop,lrange等<br>四、Set<br>Set 可以理解为一组无序的字符集合，Set 中相同的元素是不会重复出现的，相同的元素只保留一个。<br>常用命令：sadd,spop,smembers,sunion等<br>五、Sorted Set（有序集合）<br>有序集合是在集合的基础上为每一个元素关联一个分数，Redis通过分数为集合中的成员进行排序。<br>常用命令：zadd,zrange,zrem,zcard 等</p>\n<h4 id=\"redis-的事务\"><a href=\"#redis-的事务\" class=\"headerlink\" title=\"redis 的事务\"></a>redis 的事务</h4><p>Redis 事务允许一组命令在单一步骤中执行。事务有两个属性，说明如下：<br>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。<br>事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。<br>Redis 事务是原子的。原子意味着要么所有的命令都执行，要么都不执行；<br>一个事务从开始到执行会经历以下三个阶段：<br>1、开始事务<br>2、命令入队<br>3、执行事务</p>\n<h4 id=\"Redis-的使用场景\"><a href=\"#Redis-的使用场景\" class=\"headerlink\" title=\"Redis 的使用场景\"></a>Redis 的使用场景</h4><p>1.取最新 N 个数据的操作<br>2.排行榜应用,取 TOP N 操作<br>3.需要精准设定过期时间的应用<br>4.计数器应用<br>5.uniq 操作,获取某段时间所有数据排重值<br>6.Pub/Sub 构建实时消息系统<br>7.构建队列系统<br>8.缓存</p>\n<h4 id=\"Redis-默认端口，默认过期时间，Value-数据长度\"><a href=\"#Redis-默认端口，默认过期时间，Value-数据长度\" class=\"headerlink\" title=\"Redis 默认端口，默认过期时间，Value 数据长度\"></a>Redis 默认端口，默认过期时间，Value 数据长度</h4><p>1、默认端口：6379<br>2、默认过期时间：可以说永不过期，一般情况下，当配置中开启了超出最大内存限制就写磁盘的话，那么没有设置过期时间的 key 可能会被写到磁盘上。假如没设置，那么REDIS 将使用 LRU 机制，将内存中的老数据删除，并写入新数据。<br>3、Value 最多可以容纳的数据长度是：512M。</p>\n<h4 id=\"怎样解决数据库高并发的问题\"><a href=\"#怎样解决数据库高并发的问题\" class=\"headerlink\" title=\"怎样解决数据库高并发的问题\"></a>怎样解决数据库高并发的问题</h4><p>解决数据库高并发：</p>\n<ol>\n<li>分表分库</li>\n<li>数据库索引</li>\n<li>Redis 缓存数据库</li>\n<li>读写分离</li>\n<li>负载均衡集群：将大量的并发请求分担到多个处理节点。由于单个处理节点的故障不影响整个服务，负载均衡集群同时也实现了高可用性。</li>\n</ol>\n<h4 id=\"sqlserver，MySQL-，Oracle-http，Redis，https-ssh默认端口号\"><a href=\"#sqlserver，MySQL-，Oracle-http，Redis，https-ssh默认端口号\" class=\"headerlink\" title=\"sqlserver，MySQL ，Oracle http，Redis，https,ssh默认端口号\"></a>sqlserver，MySQL ，Oracle http，Redis，https,ssh默认端口号</h4><p>sqlserver：1433<br><strong>MySQL ：3306</strong><br>Oracle  ：1521<br><strong>http： 80 </strong><br><strong>https ：443</strong><br><strong>Redis：6379</strong><br><strong>ssh： 22</strong></p>\n<h4 id=\"Redis-缓存命中率计算\"><a href=\"#Redis-缓存命中率计算\" class=\"headerlink\" title=\"Redis 缓存命中率计算\"></a>Redis 缓存命中率计算</h4><p>Redis 提供了 INFO 这个命令，能够随时监控服务器的状态，只用 telnet 到对应服务器的端口，执行命令即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet localhost 6379</span><br><span class=\"line\">info</span><br></pre></td></tr></table></figure></p>\n<p>在输出的信息里面有这几项和缓存的状态比较有关系：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keyspace_hits:14414110</span><br><span class=\"line\">1. keyspace_misses:3228654</span><br><span class=\"line\">2. used_memory:433264648</span><br><span class=\"line\">3. expired_keys:1333536</span><br><span class=\"line\">4. evicted_keys:1547380</span><br></pre></td></tr></table></figure></p>\n<p>通过计算 hits 和 miss，我们可以得到缓存的命中率：14414110 / (14414110 + 3228654)= 81% ，一个缓存失效机制和过期时间设计良好的系统，命中率可以做到 95%以上</p>\n<h4 id=\"Redis-有多少个库\"><a href=\"#Redis-有多少个库\" class=\"headerlink\" title=\"Redis 有多少个库\"></a>Redis 有多少个库</h4><p>Redis默认由16个库(0~15号). 且默认使用的是0号库.<br>如果要切换库则使用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select  number  # number表示几号库.</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h4><p>1、MongoDB 是一个面向文档的数据库系统。使用 C++编写，不支持 SQL，但有自己功能强大的查询语法。<br>2、MongoDB 使用 BSON 作为数据存储和传输的格式。BSON 是一种类似 JSON 的二进制序列化文档，支持嵌套对象和数组。<br>3、MongoDB 很像 MySQL，document 对应 MySQL 的 row，collection 对应 MySQL 的 table<br><strong>应用场景</strong>：<br>1.网站数据：MongoDB 非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。<br>2.缓存：由于性能很高，MongoDB 也适合作为信息基础设施的缓存层。在系统重启之后，由MongoDB 搭建的持久化缓存可以避免下层的数据源过载。<br>3.大尺寸、低价值的数据：使用传统的关系数据库存储一些数据时可能会比较贵，在此之前，很多程序员往往会选择传统的文件进行存储。<br>4.高伸缩性的场景：MongoDB非常适合由数十或者数百台服务器组成的数据库。<br>5.用于对象及 JSON 数据的存储：MongoDB 的 BSON 数据格式非常适合文档格式化的存储及查询。<br>6.重要数据：MySQL，一般数据：MongoDB，临时数据：memcache<br>7.对于关系数据表而言，MongoDB 是提供了一个更快速的视图 view；而对于 PHP 程序而言，MongoDB 可以作为一个持久化的数组来使用，并且这个持久化的数组还可以支持排序、条件、限制等功能。<br>8.将 MongoDB 代替MySQL 的部分功能，主要一个思考点就是：把 MongoDB 当作 MySQL 的一个 view（视图），view 是将表数据整合成业务数据的关键。比如说对原始数据进行报表， 那么就要先把原始数据统计后生成 view，在对 view 进行查询和报表。<br><strong>不适合的场景</strong>：<br>a.高度事物性的系统：例如银行或会计系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。<br>b.传统的商业智能应用：针对特定问题的 BI 数据库会对产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。<br>c.需要 SQL 的问题<br>d.重要数据，关系数据<br><strong>优点</strong>:<br>a.弱一致性（最终一致），更能保证用户的访问速度<br>b.文档结构的存储方式，能够更便捷的获取数据<br>c.内置 GridFS，高效存储二进制大对象 (比如照片和视频)<br>d.支持复制集、主备、互为主备、自动分片等特性<br>e.动态查询<br>f.全索引支持,扩展到内部对象和内嵌数组<br><strong>Redis缺点</strong>：<br>a.不支持事务<br>b.MongoDB 占用空间过大<br>c.维护工具不够成熟</p>\n<h4 id=\"说一下-MySQL-数据库存储的原理\"><a href=\"#说一下-MySQL-数据库存储的原理\" class=\"headerlink\" title=\"说一下 MySQL 数据库存储的原理\"></a>说一下 MySQL 数据库存储的原理</h4><p>1、储存过程是一个可编程的函数，它在数据库中创建并保存。它可以有 SQL 语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟。它允许控制数据的访问方式。<br></p>\n<p>2、存储过程通常有以下优点：<br>1)存储过程能实现较快的执行速度。<br>2)存储过程允许标准组件是编程。<br>3)存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。<br>4)存储过程可被作为一种安全机制来充分利用。<br>5)存储过程能过减少网络流量。</p>\n<h4 id=\"Mysql-和-Redis-高可用性\"><a href=\"#Mysql-和-Redis-高可用性\" class=\"headerlink\" title=\"Mysql 和 Redis 高可用性\"></a>Mysql 和 Redis 高可用性</h4><p>1、MySQL Replication 是 MySQL 官方提供的主从同步方案，用于将一个 MySQL 实例的数据，同步到另一个实例中。Replication 为保证数据安全做了重要的保证，也是现在运用最广的 MySQL 容灾方案。Replication 用两个或以上的实例搭建了 MySQL 主从复制集群，提供单点写入，多点读取的服务，实现了读的 scale out.<br>2、Sentinel 是 Redis 官方为集群提供的高可用解决方案。 在实际项目中可以使用 sentinel 去做 Redis 自动故障转移，减少人工介入的工作量。另外 sentinel 也给客户端提供了监控消息的通知，这样客户端就可根据消息类型去判断服务器的状态，去做对应的适配操作。<br>3、下面是 Sentinel 主要功能列表：<br>（1）Monitoring：Sentinel 持续检查集群中的 master、slave状态，判断是否存活。<br>（2）Notification：在发现某个 redis 实例死的情况下，Sentinel 能通过 API 通知系统管理员或其他程序脚本。<br>（3）Automatic failover：如果一个 master 挂掉后，sentinel立马启动故障转移，把某个 slave 提升为 master。其他的 slave重新配置指向新 master。<br>（4）Configuration provider：对于客户端来说 sentinel 通知是有效可信赖的。客户端会连接 sentinel 去请求当前 master 的地址，一旦发生故障 sentinel 会提供新地址给客户端。</p>\n<h4 id=\"数据库负载均衡\"><a href=\"#数据库负载均衡\" class=\"headerlink\" title=\"数据库负载均衡\"></a>数据库负载均衡</h4><p>负载均衡集群是由一组相互独立的计算机系统构成，通过常规网络或专用网络进行连接，由路由器衔接在一起，各节点相互协作、共同负载、均衡压力，对客户端来说，整个群集可以视为一台具有超高性能的独立服务器。<br>1、实现原理<br>实现数据库的负载均衡技术，首先要有一个可以控制连接数据库的控制端。在这里，它截断了数据库和程序的直接连接，由所有的程序来访问这个中间层，然后再由中间层来访问数据库。这样，我们就可以具体控制访问某个数据库了，然后还可以根据数据库的当前负载采取有效的均衡策略，来调整每次连接到哪个数据库。<br>2、实现多数据库数据同步<br>a.对于负载均衡，最重要的就是所有服务器的数据都是实时同步的。这是一个集群所必需的，因为，如果数不据实时、不同步，那么用户从一台服务器读出的数据，就有别于从另一台服务器读出的数据，这是不能允许的。所以必须实现数据库的数据同步。这样，在查询的时候就可以有多个资源，实现均衡。<br>b.比较常用的方法是 Moebius for SQL Server 集群，Moebius for SQL Server 集群采用将核心程序驻留在每个机器的数据库中的办法，这个核心程序称为 Moebius for SQL Server 中间件，主要作用是监测数据库内数据的变化并将变化的数据同步到其他数据库中。<br>c.数据同步完成后客户端才会得到响应，同步过程是并发完成的，所以同步到多个数据库和同步到一个数据库的时间基本相等；另外同步的过程是在事务的环境下完成的，保证了多份数据在任何时刻数据的一致性。<br>d.正因为 Moebius 中间件宿主在数据库中的创新，让中间件不但能知道数据的变化，而且知道引起数据变化的 SQL 语句，根据 SQL 语句的类型智能的采取不同的数据同步的策略以保证数据同步成本的最小化。<br>e.数据条数很少，数据内容也不大，则直接同步数据数据条数很少，但是里面包含大数据类型，比如文本，二进制数据等，则先对数据进行压缩然后再同步，从而减少网络带宽的占用和传输所用的时间。<br>f.数据条数很多，此时中间件会拿到造成数据变化的 SQL 语句， 然后对 SQL 语句进行解析，分析其执行计划和执行成本，并选择是同步数据还是同步 SQL 语句到其他的数据库中。此种情况应用在对表结构进行调整或者批量更改数据的时候非常有用。</p>\n<p>3、优缺点<br><strong>优点</strong>：<br>(1) 扩展性强：当系统需要更高数据库处理速度时，只要简单地增加数据库服务器就 可以得到扩展。<br>(2) 可维护性：当某节点发生故障时，系统会自动检测故障并转移故障节点的应用，保证数据库的持续工作。<br>(3) 安全性：因为数据会同步的多台服务器上，可以实现数据集的冗余，通过多份数据来保证安全性。另外它成功地将数据库放到了内网之中，更好地保护了数据库的安全性。<br>(4) 易用性：对应用来说完全透明，集群暴露出来的就是一个 IP<br><strong>缺点</strong>：<br>(1) 不能够按照 Web 服务器的处理能力分配负载。<br>(2) 负载均衡器(控制端)故障，会导致整个数据库系统瘫痪。</p>\n","site":{"data":{}},"excerpt":"<p>MySQL、Redis、MongoDB常用数据库相关知识整理","more":"</p>\n<h4 id=\"事务的特性\"><a href=\"#事务的特性\" class=\"headerlink\" title=\"事务的特性\"></a>事务的特性</h4><p>1、原子性( Atomicity)：<br><br>事务中的全部操作在数据库中是不可分割的，要么全部完成，要么均不执行。<br>2、一致性( Consistency)：<br><br>几个并行执行的事务，其执行结果必须与按某一顺序串行执行的结果相一致。<br>3、隔离性( Isolation)：<br><br>事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的。<br>4、持久性( Durability)：<br><br>对于任意已提交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现故障</p>\n<h4 id=\"Redis-和-MySQL-的区别\"><a href=\"#Redis-和-MySQL-的区别\" class=\"headerlink\" title=\"Redis 和 MySQL 的区别\"></a>Redis 和 MySQL 的区别</h4><p>1、Redis 是内存数据库，数据保存在内存中，速度快。<br>2、MySQL 是关系型数据库，持久化存储，存放在磁盘里面，功能强大。检索的话，会涉及到一定的 IO，数据访问也就慢。</p>\n<h4 id=\"Redis避免攻击\"><a href=\"#Redis避免攻击\" class=\"headerlink\" title=\"Redis避免攻击\"></a>Redis避免攻击</h4><p>1、主从<br>2、持久化存储<br>3、Redis 不以 root 账户启动<br>4、设置复杂密码<br>5、不允许 key 方式登录</p>\n<h4 id=\"数据库索引\"><a href=\"#数据库索引\" class=\"headerlink\" title=\"数据库索引\"></a>数据库索引</h4><p>数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用B_TREE。B_TREE 索引加速了数据访问，因为存储引擎不会再去扫描整张表得到需要的数据；相反，它从根节点开始，根节点保存了子节点的指针，存储引擎会根据指针快速寻找数据。</p>\n<h4 id=\"数据库怎么优化查询效率\"><a href=\"#数据库怎么优化查询效率\" class=\"headerlink\" title=\"数据库怎么优化查询效率\"></a>数据库怎么优化查询效率</h4><p>1.储存引擎选择：如果数据表需要事务处理，应该考虑使用 InnoDB，因为它完全符合 ACID 特性。如果不需要事务处理，使用默认存储引擎 MyISAM 是比较明智的<br>2.分表分库，主从<br>3.对查询进行优化，要尽量避免全表扫描，首先应考虑在where 及 order by 涉及的列上建立索引<br>4.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描<br>5.应尽量避免在 where 子句中使用 != 或 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描<br>6.应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描<br>7.Update 语句，如果只更改 1、2 个字段，不要 Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志<br>8.对于多张大数据量（这里几百条就算大了）的表 JOIN，要先分页再 JOIN，否则逻辑读会很高，性能很差。</p>\n<h4 id=\"数据库优化方案\"><a href=\"#数据库优化方案\" class=\"headerlink\" title=\"数据库优化方案\"></a>数据库优化方案</h4><ol>\n<li>优化索引、SQL 语句、分析慢查询；</li>\n<li>设计表的时候严格根据数据库的设计范式来设计数据库；</li>\n<li>使用缓存，把经常访问到的数据而且不需要经常变化的数据放在缓存中，能节约磁盘 IO；</li>\n<li>优化硬件；采用 SSD，使用磁盘队列技术(RAID0,RAID1,RDID5)等；</li>\n<li>采用 MySQL 内部自带的表分区技术，把数据分层不同的文件，能够提高磁盘的读取效率；</li>\n<li>垂直分表；把一些不经常读的数据放在一张表里，节约磁盘 I/O；</li>\n<li>主从分离读写；采用主从复制把数据库的读操作和写入操作分离开来；</li>\n<li>分库分表分机器（数据量特别大），主要的的原理就是数据路由；</li>\n<li>选择合适的表引擎，参数上的优化；</li>\n<li>进行架构级别的缓存，静态化和分布式；</li>\n<li>不采用全文索引；</li>\n<li>采用更快的存储方式，例如 NoSQL 存储经常访问的数据</li>\n</ol>\n<h4 id=\"Redis-MongoDB-优缺点\"><a href=\"#Redis-MongoDB-优缺点\" class=\"headerlink\" title=\"Redis MongoDB 优缺点\"></a>Redis MongoDB 优缺点</h4><p>MongoDB 和 Redis 都是 NoSQL，采用结构型数据存储。二者在使用场景中，存在一定的区别，这也主要由于二者在内存映射的处理过程，持久化的处理方法不同。MongoDB 建议集群部署，更多的考虑到集群方案，Redis 更偏重于进程顺序写入，虽然支持集群，也仅限于主-从模式.<br><strong>Redis 优点</strong>：<br>1 读写性能优异<br>2 支持数据持久化，支持 AOF 和 RDB 两种持久化方式<br>3 支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。<br>4 数据结构丰富：除了支持 string 类型的 value 外还支持 string、hash、set、sortedset、list 等数据结构。<br><strong>Redis缺点</strong>：<br>1 Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 IP 才能恢复。<br>2 主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了系统的可用性。<br>3 Redis 的主从复制采用全量复制，复制过程中主机会 fork出一个子进程对内存做一份快照，并将子进程的内存快照保存为文件发送给从机，这一过程需要确保主机有足够多的空余内<br>存。若快照文件较大，对集群的服务能力会产生较大的影响，而且复制过程是在从机新加入集群或者从机和主机网络断开重连时都会进行，也就是网络波动都会造成主机和从机间的一次全量的数据复制，这对实际的系统运营造成了不小的麻烦。<br>4 Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。<br><strong>Redis优点</strong>:<br>a.弱一致性（最终一致），更能保证用户的访问速度<br>b.文档结构的存储方式，能够更便捷的获取数据<br>c.内置 GridFS，高效存储二进制大对象 (比如照片和视频)<br>d.支持复制集、主备、互为主备、自动分片等特性<br>e.动态查询<br>f.全索引支持,扩展到内部对象和内嵌数组<br><strong>Redis缺点</strong>：不支持事务<br><strong>MongoDB缺点</strong>：<br>占用空间过大<br>维护工具不够成熟</p>\n<h4 id=\"Mysql-集群\"><a href=\"#Mysql-集群\" class=\"headerlink\" title=\"Mysql 集群\"></a>Mysql 集群</h4><p>1、Mysql 群集（Cluster）简介<br>MySQL 群集需要有一组计算机，每台计算机的角色可能是不一样的。MySQL 群集中有三种节点：管理节点、数据节点和SQL 节点。群集中的某计算机可能是某一种节点，也可能是两种或三种节点的集合。这三种节点只是在逻辑上的划分，所以它们不一定和物理计算机是一一对应的关系。<br>2、管理节点（也可以称管理服务器）主要负责管理数据节点和 SQL 节点，还有群集配置文件和群集日志文件。它监控其他节点的工作状态，能够启动、关闭或重启某个节点。其他节点从管理节点检索配置数据，当数据节点有新事件时就把事件信息发送给管理节点并写入群集日志。<br>3、数据节点用于存储数据。<br>SQL 节点跟一般的 MySQL 服务器是一样的，我们可以通过它进行 SQL 操作。<br>MysqlServer 已经不能满足群集的要求，配置群集需要使用 MySQLCluster。</p>\n<h4 id=\"怎样解决海量数据的存储和访问造成系统设计瓶颈的问题\"><a href=\"#怎样解决海量数据的存储和访问造成系统设计瓶颈的问题\" class=\"headerlink\" title=\"怎样解决海量数据的存储和访问造成系统设计瓶颈的问题\"></a>怎样解决海量数据的存储和访问造成系统设计瓶颈的问题</h4><p>1、水平切分数据库：可以降低单台机器的负载，同时最大限度的降低了宕机造成的损失；分库降低了单点机器的负载；分表，提高了数据操作的效率，负载均衡策略：可以降低单台机器的访问负载，降低宕机的可能性；<br>2、集群方案：解决了数据库宕机带来的单点数据库不能访问的问题；<br>3、读写分离策略：最大限度了提高了应用中读取数据的速度和并发量；</p>\n<h4 id=\"MySQL-集群的优缺点\"><a href=\"#MySQL-集群的优缺点\" class=\"headerlink\" title=\"MySQL 集群的优缺点\"></a>MySQL 集群的优缺点</h4><p><strong>优点</strong>：<br>a) 99.999%的高可用性<br>b)快速的自动失效切换<br>c)灵活的分布式体系结构，没有单点故障<br>d)高吞吐量和低延迟<br>e)可扩展性强，支持在线扩容<br><strong>缺点</strong>：<br>a)存在很多限制，比如：不支持外键<br>b)部署、管理、配置很复杂<br>c)占用磁盘空间大，内存大<br>d)备份和恢复不方便<br>e)重启的时候，数据节点将数据 load 到内存需要很长时间</p>\n<h4 id=\"MySQL引擎区别\"><a href=\"#MySQL引擎区别\" class=\"headerlink\" title=\"MySQL引擎区别\"></a>MySQL引擎区别</h4><p>主要 MyISAM 与 InnoDB 两个引擎，其主要区别如下：<br>一、InnoDB 支持事务，MyISAM 不支持，这一点是非常之重要。事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而 MyISAM就不可以了；<br>二、MyISAM 适合查询以及插入为主的应用，InnoDB 适合频繁修改以及涉及到安全性较高的应用；<br>三、InnoDB 支持外键，MyISAM 不支持；<br>四、MyISAM 是默认引擎，InnoDB 需要指定；<br>五、InnoDB 不支持 FULLTEXT 类型的索引；<br>六、InnoDB 中不保存表的行数，如 select count(<em>) from table 时，InnoDB；需要扫描一遍整个表来计算有多少行，但是 MyISAM 只要简单的读出保存好的行数即可。注意的是，当 count(</em>)语句包含 where 条件时MyISAM 也需要扫描整个表；<br>七、对于自增长的字段，InnoDB 中必须包含只有该字段的索引，但是在 MyISAM表中可以和其他字段一起建立联合索引；<br>八、清空整个表时，InnoDB 是一行一行的删除，效率非常慢。MyISAM 则会重建表；<br>九、InnoDB 支持行锁（某些情况下还是锁整表，如 update table set a=1 where user like ‘%lee%’</p>\n<h4 id=\"Redis-基本类型、相关方法\"><a href=\"#Redis-基本类型、相关方法\" class=\"headerlink\" title=\"Redis 基本类型、相关方法\"></a>Redis 基本类型、相关方法</h4><p>Redis支持五种数据类型：string（字符串）、hash（哈希）、list（列表）、set（集合）及zset(sorted set：有序集合)。<br>一、String<br>String是Redis最为常用的一种数据类型，String的数据结构为key/value类型，String可以包含任何数据。<br>常用命令: set,get,decr,incr,mget 等<br>二、Hash<br>Hash类型可以看成是一个key/value都是String的Map容器。<br>常用命令：hget,hset,hgetall 等。<br>三、List<br>List用于存储一个有序的字符串列表，常用的操作是向队列两端添加元素或者获得列表的某一片段。<br>常用命令：lpush,rpush,lpop,rpop,lrange等<br>四、Set<br>Set 可以理解为一组无序的字符集合，Set 中相同的元素是不会重复出现的，相同的元素只保留一个。<br>常用命令：sadd,spop,smembers,sunion等<br>五、Sorted Set（有序集合）<br>有序集合是在集合的基础上为每一个元素关联一个分数，Redis通过分数为集合中的成员进行排序。<br>常用命令：zadd,zrange,zrem,zcard 等</p>\n<h4 id=\"redis-的事务\"><a href=\"#redis-的事务\" class=\"headerlink\" title=\"redis 的事务\"></a>redis 的事务</h4><p>Redis 事务允许一组命令在单一步骤中执行。事务有两个属性，说明如下：<br>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。<br>事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。<br>Redis 事务是原子的。原子意味着要么所有的命令都执行，要么都不执行；<br>一个事务从开始到执行会经历以下三个阶段：<br>1、开始事务<br>2、命令入队<br>3、执行事务</p>\n<h4 id=\"Redis-的使用场景\"><a href=\"#Redis-的使用场景\" class=\"headerlink\" title=\"Redis 的使用场景\"></a>Redis 的使用场景</h4><p>1.取最新 N 个数据的操作<br>2.排行榜应用,取 TOP N 操作<br>3.需要精准设定过期时间的应用<br>4.计数器应用<br>5.uniq 操作,获取某段时间所有数据排重值<br>6.Pub/Sub 构建实时消息系统<br>7.构建队列系统<br>8.缓存</p>\n<h4 id=\"Redis-默认端口，默认过期时间，Value-数据长度\"><a href=\"#Redis-默认端口，默认过期时间，Value-数据长度\" class=\"headerlink\" title=\"Redis 默认端口，默认过期时间，Value 数据长度\"></a>Redis 默认端口，默认过期时间，Value 数据长度</h4><p>1、默认端口：6379<br>2、默认过期时间：可以说永不过期，一般情况下，当配置中开启了超出最大内存限制就写磁盘的话，那么没有设置过期时间的 key 可能会被写到磁盘上。假如没设置，那么REDIS 将使用 LRU 机制，将内存中的老数据删除，并写入新数据。<br>3、Value 最多可以容纳的数据长度是：512M。</p>\n<h4 id=\"怎样解决数据库高并发的问题\"><a href=\"#怎样解决数据库高并发的问题\" class=\"headerlink\" title=\"怎样解决数据库高并发的问题\"></a>怎样解决数据库高并发的问题</h4><p>解决数据库高并发：</p>\n<ol>\n<li>分表分库</li>\n<li>数据库索引</li>\n<li>Redis 缓存数据库</li>\n<li>读写分离</li>\n<li>负载均衡集群：将大量的并发请求分担到多个处理节点。由于单个处理节点的故障不影响整个服务，负载均衡集群同时也实现了高可用性。</li>\n</ol>\n<h4 id=\"sqlserver，MySQL-，Oracle-http，Redis，https-ssh默认端口号\"><a href=\"#sqlserver，MySQL-，Oracle-http，Redis，https-ssh默认端口号\" class=\"headerlink\" title=\"sqlserver，MySQL ，Oracle http，Redis，https,ssh默认端口号\"></a>sqlserver，MySQL ，Oracle http，Redis，https,ssh默认端口号</h4><p>sqlserver：1433<br><strong>MySQL ：3306</strong><br>Oracle  ：1521<br><strong>http： 80 </strong><br><strong>https ：443</strong><br><strong>Redis：6379</strong><br><strong>ssh： 22</strong></p>\n<h4 id=\"Redis-缓存命中率计算\"><a href=\"#Redis-缓存命中率计算\" class=\"headerlink\" title=\"Redis 缓存命中率计算\"></a>Redis 缓存命中率计算</h4><p>Redis 提供了 INFO 这个命令，能够随时监控服务器的状态，只用 telnet 到对应服务器的端口，执行命令即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet localhost 6379</span><br><span class=\"line\">info</span><br></pre></td></tr></table></figure></p>\n<p>在输出的信息里面有这几项和缓存的状态比较有关系：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keyspace_hits:14414110</span><br><span class=\"line\">1. keyspace_misses:3228654</span><br><span class=\"line\">2. used_memory:433264648</span><br><span class=\"line\">3. expired_keys:1333536</span><br><span class=\"line\">4. evicted_keys:1547380</span><br></pre></td></tr></table></figure></p>\n<p>通过计算 hits 和 miss，我们可以得到缓存的命中率：14414110 / (14414110 + 3228654)= 81% ，一个缓存失效机制和过期时间设计良好的系统，命中率可以做到 95%以上</p>\n<h4 id=\"Redis-有多少个库\"><a href=\"#Redis-有多少个库\" class=\"headerlink\" title=\"Redis 有多少个库\"></a>Redis 有多少个库</h4><p>Redis默认由16个库(0~15号). 且默认使用的是0号库.<br>如果要切换库则使用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select  number  # number表示几号库.</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h4><p>1、MongoDB 是一个面向文档的数据库系统。使用 C++编写，不支持 SQL，但有自己功能强大的查询语法。<br>2、MongoDB 使用 BSON 作为数据存储和传输的格式。BSON 是一种类似 JSON 的二进制序列化文档，支持嵌套对象和数组。<br>3、MongoDB 很像 MySQL，document 对应 MySQL 的 row，collection 对应 MySQL 的 table<br><strong>应用场景</strong>：<br>1.网站数据：MongoDB 非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。<br>2.缓存：由于性能很高，MongoDB 也适合作为信息基础设施的缓存层。在系统重启之后，由MongoDB 搭建的持久化缓存可以避免下层的数据源过载。<br>3.大尺寸、低价值的数据：使用传统的关系数据库存储一些数据时可能会比较贵，在此之前，很多程序员往往会选择传统的文件进行存储。<br>4.高伸缩性的场景：MongoDB非常适合由数十或者数百台服务器组成的数据库。<br>5.用于对象及 JSON 数据的存储：MongoDB 的 BSON 数据格式非常适合文档格式化的存储及查询。<br>6.重要数据：MySQL，一般数据：MongoDB，临时数据：memcache<br>7.对于关系数据表而言，MongoDB 是提供了一个更快速的视图 view；而对于 PHP 程序而言，MongoDB 可以作为一个持久化的数组来使用，并且这个持久化的数组还可以支持排序、条件、限制等功能。<br>8.将 MongoDB 代替MySQL 的部分功能，主要一个思考点就是：把 MongoDB 当作 MySQL 的一个 view（视图），view 是将表数据整合成业务数据的关键。比如说对原始数据进行报表， 那么就要先把原始数据统计后生成 view，在对 view 进行查询和报表。<br><strong>不适合的场景</strong>：<br>a.高度事物性的系统：例如银行或会计系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。<br>b.传统的商业智能应用：针对特定问题的 BI 数据库会对产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。<br>c.需要 SQL 的问题<br>d.重要数据，关系数据<br><strong>优点</strong>:<br>a.弱一致性（最终一致），更能保证用户的访问速度<br>b.文档结构的存储方式，能够更便捷的获取数据<br>c.内置 GridFS，高效存储二进制大对象 (比如照片和视频)<br>d.支持复制集、主备、互为主备、自动分片等特性<br>e.动态查询<br>f.全索引支持,扩展到内部对象和内嵌数组<br><strong>Redis缺点</strong>：<br>a.不支持事务<br>b.MongoDB 占用空间过大<br>c.维护工具不够成熟</p>\n<h4 id=\"说一下-MySQL-数据库存储的原理\"><a href=\"#说一下-MySQL-数据库存储的原理\" class=\"headerlink\" title=\"说一下 MySQL 数据库存储的原理\"></a>说一下 MySQL 数据库存储的原理</h4><p>1、储存过程是一个可编程的函数，它在数据库中创建并保存。它可以有 SQL 语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟。它允许控制数据的访问方式。<br></p>\n<p>2、存储过程通常有以下优点：<br>1)存储过程能实现较快的执行速度。<br>2)存储过程允许标准组件是编程。<br>3)存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。<br>4)存储过程可被作为一种安全机制来充分利用。<br>5)存储过程能过减少网络流量。</p>\n<h4 id=\"Mysql-和-Redis-高可用性\"><a href=\"#Mysql-和-Redis-高可用性\" class=\"headerlink\" title=\"Mysql 和 Redis 高可用性\"></a>Mysql 和 Redis 高可用性</h4><p>1、MySQL Replication 是 MySQL 官方提供的主从同步方案，用于将一个 MySQL 实例的数据，同步到另一个实例中。Replication 为保证数据安全做了重要的保证，也是现在运用最广的 MySQL 容灾方案。Replication 用两个或以上的实例搭建了 MySQL 主从复制集群，提供单点写入，多点读取的服务，实现了读的 scale out.<br>2、Sentinel 是 Redis 官方为集群提供的高可用解决方案。 在实际项目中可以使用 sentinel 去做 Redis 自动故障转移，减少人工介入的工作量。另外 sentinel 也给客户端提供了监控消息的通知，这样客户端就可根据消息类型去判断服务器的状态，去做对应的适配操作。<br>3、下面是 Sentinel 主要功能列表：<br>（1）Monitoring：Sentinel 持续检查集群中的 master、slave状态，判断是否存活。<br>（2）Notification：在发现某个 redis 实例死的情况下，Sentinel 能通过 API 通知系统管理员或其他程序脚本。<br>（3）Automatic failover：如果一个 master 挂掉后，sentinel立马启动故障转移，把某个 slave 提升为 master。其他的 slave重新配置指向新 master。<br>（4）Configuration provider：对于客户端来说 sentinel 通知是有效可信赖的。客户端会连接 sentinel 去请求当前 master 的地址，一旦发生故障 sentinel 会提供新地址给客户端。</p>\n<h4 id=\"数据库负载均衡\"><a href=\"#数据库负载均衡\" class=\"headerlink\" title=\"数据库负载均衡\"></a>数据库负载均衡</h4><p>负载均衡集群是由一组相互独立的计算机系统构成，通过常规网络或专用网络进行连接，由路由器衔接在一起，各节点相互协作、共同负载、均衡压力，对客户端来说，整个群集可以视为一台具有超高性能的独立服务器。<br>1、实现原理<br>实现数据库的负载均衡技术，首先要有一个可以控制连接数据库的控制端。在这里，它截断了数据库和程序的直接连接，由所有的程序来访问这个中间层，然后再由中间层来访问数据库。这样，我们就可以具体控制访问某个数据库了，然后还可以根据数据库的当前负载采取有效的均衡策略，来调整每次连接到哪个数据库。<br>2、实现多数据库数据同步<br>a.对于负载均衡，最重要的就是所有服务器的数据都是实时同步的。这是一个集群所必需的，因为，如果数不据实时、不同步，那么用户从一台服务器读出的数据，就有别于从另一台服务器读出的数据，这是不能允许的。所以必须实现数据库的数据同步。这样，在查询的时候就可以有多个资源，实现均衡。<br>b.比较常用的方法是 Moebius for SQL Server 集群，Moebius for SQL Server 集群采用将核心程序驻留在每个机器的数据库中的办法，这个核心程序称为 Moebius for SQL Server 中间件，主要作用是监测数据库内数据的变化并将变化的数据同步到其他数据库中。<br>c.数据同步完成后客户端才会得到响应，同步过程是并发完成的，所以同步到多个数据库和同步到一个数据库的时间基本相等；另外同步的过程是在事务的环境下完成的，保证了多份数据在任何时刻数据的一致性。<br>d.正因为 Moebius 中间件宿主在数据库中的创新，让中间件不但能知道数据的变化，而且知道引起数据变化的 SQL 语句，根据 SQL 语句的类型智能的采取不同的数据同步的策略以保证数据同步成本的最小化。<br>e.数据条数很少，数据内容也不大，则直接同步数据数据条数很少，但是里面包含大数据类型，比如文本，二进制数据等，则先对数据进行压缩然后再同步，从而减少网络带宽的占用和传输所用的时间。<br>f.数据条数很多，此时中间件会拿到造成数据变化的 SQL 语句， 然后对 SQL 语句进行解析，分析其执行计划和执行成本，并选择是同步数据还是同步 SQL 语句到其他的数据库中。此种情况应用在对表结构进行调整或者批量更改数据的时候非常有用。</p>\n<p>3、优缺点<br><strong>优点</strong>：<br>(1) 扩展性强：当系统需要更高数据库处理速度时，只要简单地增加数据库服务器就 可以得到扩展。<br>(2) 可维护性：当某节点发生故障时，系统会自动检测故障并转移故障节点的应用，保证数据库的持续工作。<br>(3) 安全性：因为数据会同步的多台服务器上，可以实现数据集的冗余，通过多份数据来保证安全性。另外它成功地将数据库放到了内网之中，更好地保护了数据库的安全性。<br>(4) 易用性：对应用来说完全透明，集群暴露出来的就是一个 IP<br><strong>缺点</strong>：<br>(1) 不能够按照 Web 服务器的处理能力分配负载。<br>(2) 负载均衡器(控制端)故障，会导致整个数据库系统瘫痪。</p>"},{"title":"都是Python3就万事大吉?","comments":1,"date":"2018-12-01T10:20:40.000Z","_content":"开发环境一致性很重要；\n更重要的是版本号要一致；\n尤其**Python版本号**。\n**为什么？**\n你以为3.4.0和3.5.0没多大区别吗？\n**区别只有踩过了才知道**\n<!--more-->\n### 背景\n#### 业务需求\n开发一个很常见的注册时候的那种行政区域级联菜单并支持搜索。比如，选了中国，然后就返回中国下的所有省份，依此类推。\n![行政区域级联菜单](https://i.loli.net/2018/12/01/5c024c8ec9c45.png)\n#### 业务实现\n实现逻辑，查询数据库，根据客户已有的选择，限定条件，返回下一级菜单结果\n#### 代码发布\n本地测试没有问题后，撰写相关接口文档，代码合并到stage测试环境\n#### 问题出现\n登陆测试环境的Web端，出现点击登录无法请求成功，直接option请求都返回了500(internal server error)\n#### 一头雾水\n代码实现部分和登录部分并没有任何交集啊。\n![](https://i.loli.net/2018/12/01/5c024fa3989cd.jpeg)\n但是，有问题就解决问题，但解决问题前，赶紧回滚到上一版本，我可不想一堆人@我\n### 着手分析\n好吧，只有我动了代码，这个bug非我莫属了。\n![](https://i.loli.net/2018/12/01/5c0250ba9ca10.png)\n开始我的debug之旅：\n#### 代码再review\n打开postman，一顿的发送请求到本地服务端，everything is normal\n可以确定的是**我的代码我的崽没问题**\n还有什么可能呢？\n咦，出问题的最终代码是**在服务器上**有问题\n那么，是不是服务器环境有问题？\n#### 服务器环境\n在服务器中，最好的办法就是直接python run.py同时开启DEBUG模式\n刷刷刷的跑起来，\n最后，\n**跪了**\n出现重要的提示：\n```\nSyntaxError: only named arguments may follow *expression\n```\n可以确定是**服务器环境的问题**了\n#### 到底哪个环境问题？\n在服务器中，存在很多服务，确定是哪个服务的问题显得尤为重要。\n在执行python run.py出现了语法错误\n使用的服务是Python\n难道是Python的问题？\n有什么问题导致Python语法错误呢？\n本地Python运行好好的，线上Python语法错误\n难道是版本不一样？\n两边终端敲入python --version\n本地Python版本：\n```\npython --version\nPython 3.6.6\n```\n线上Python版本：\n```\npython --version\nPython 3.4.0\n```\n可以确定是**Python版本不一致导致语法错误**\n### 环境搭建\n服务器的环境服务进程之间存在千丝万缕的关系，我不可能把线上的Python版本升级到和我本地的一样(太多不可抗拒因素)，那么我迁就线上的版本，把本地的的版本降级。\n### 原形毕露\n在我把本地的Python版本由3.6.6指定为3.4.0之后，Pycharm IDE 为我指出原因所在，代码出现了红色下划线。\n![](https://i.loli.net/2018/12/01/5c0258dfdde97.png)\n从上面的报错来看：\n我本地之前使用了3.6.6，*表达式运行没问题。但线上的为3.4.0，**低于3.5的Python关于*表达式的要求是*表达式必须放在最后一个参数。**\n```\nimport random\n\nrandom_list = [random.randint(0, i) for i in range(10)]\nprint(*(random_list), 'RidingRoad is foolish')\n# 低于Python3.5.0的版本会语法错误\n```\n### 经验总结\n#### 环境一致性\n如果我一开始，本地就和线上的Python环境一致，就不会出现这种问题了。所以，大家也确认一下线上的版本和自己本地开发的版本号一致，而不是2和3的版本，是要3系列的版本号也一样。\n#### 语法知识\n这种语法错误，谁知道会存在呢？\n好了，学到一招了\n3.5以前的\\*表达式必须放最后一个，3.5以后随便放。**通用的就是\\*表达式都把它放最后一个**。\n#### bug思路总结\n1. 确定代码没语法问题\n2. 确定环境是否一致(版本是否一致)\n### Python全面学习资料\n公号\"Python孙行者\"后台回复”电子书“即可。如果你有什么好东西好神器，欢迎后台私信，以后总结随文分享，一个人很渺小，有你的参与==>人从众众众众众众众\n![](https://i.loli.net/2018/12/01/5c02600ab4745.png)\n\n\n","source":"_posts/都是Python3就万事大吉.md","raw":"---\ntitle: 都是Python3就万事大吉?\ncomments: true\ndate: 2018-12-01 18:20:40\ntags:\n- \\*expression\ncategories:\n- Python\n---\n开发环境一致性很重要；\n更重要的是版本号要一致；\n尤其**Python版本号**。\n**为什么？**\n你以为3.4.0和3.5.0没多大区别吗？\n**区别只有踩过了才知道**\n<!--more-->\n### 背景\n#### 业务需求\n开发一个很常见的注册时候的那种行政区域级联菜单并支持搜索。比如，选了中国，然后就返回中国下的所有省份，依此类推。\n![行政区域级联菜单](https://i.loli.net/2018/12/01/5c024c8ec9c45.png)\n#### 业务实现\n实现逻辑，查询数据库，根据客户已有的选择，限定条件，返回下一级菜单结果\n#### 代码发布\n本地测试没有问题后，撰写相关接口文档，代码合并到stage测试环境\n#### 问题出现\n登陆测试环境的Web端，出现点击登录无法请求成功，直接option请求都返回了500(internal server error)\n#### 一头雾水\n代码实现部分和登录部分并没有任何交集啊。\n![](https://i.loli.net/2018/12/01/5c024fa3989cd.jpeg)\n但是，有问题就解决问题，但解决问题前，赶紧回滚到上一版本，我可不想一堆人@我\n### 着手分析\n好吧，只有我动了代码，这个bug非我莫属了。\n![](https://i.loli.net/2018/12/01/5c0250ba9ca10.png)\n开始我的debug之旅：\n#### 代码再review\n打开postman，一顿的发送请求到本地服务端，everything is normal\n可以确定的是**我的代码我的崽没问题**\n还有什么可能呢？\n咦，出问题的最终代码是**在服务器上**有问题\n那么，是不是服务器环境有问题？\n#### 服务器环境\n在服务器中，最好的办法就是直接python run.py同时开启DEBUG模式\n刷刷刷的跑起来，\n最后，\n**跪了**\n出现重要的提示：\n```\nSyntaxError: only named arguments may follow *expression\n```\n可以确定是**服务器环境的问题**了\n#### 到底哪个环境问题？\n在服务器中，存在很多服务，确定是哪个服务的问题显得尤为重要。\n在执行python run.py出现了语法错误\n使用的服务是Python\n难道是Python的问题？\n有什么问题导致Python语法错误呢？\n本地Python运行好好的，线上Python语法错误\n难道是版本不一样？\n两边终端敲入python --version\n本地Python版本：\n```\npython --version\nPython 3.6.6\n```\n线上Python版本：\n```\npython --version\nPython 3.4.0\n```\n可以确定是**Python版本不一致导致语法错误**\n### 环境搭建\n服务器的环境服务进程之间存在千丝万缕的关系，我不可能把线上的Python版本升级到和我本地的一样(太多不可抗拒因素)，那么我迁就线上的版本，把本地的的版本降级。\n### 原形毕露\n在我把本地的Python版本由3.6.6指定为3.4.0之后，Pycharm IDE 为我指出原因所在，代码出现了红色下划线。\n![](https://i.loli.net/2018/12/01/5c0258dfdde97.png)\n从上面的报错来看：\n我本地之前使用了3.6.6，*表达式运行没问题。但线上的为3.4.0，**低于3.5的Python关于*表达式的要求是*表达式必须放在最后一个参数。**\n```\nimport random\n\nrandom_list = [random.randint(0, i) for i in range(10)]\nprint(*(random_list), 'RidingRoad is foolish')\n# 低于Python3.5.0的版本会语法错误\n```\n### 经验总结\n#### 环境一致性\n如果我一开始，本地就和线上的Python环境一致，就不会出现这种问题了。所以，大家也确认一下线上的版本和自己本地开发的版本号一致，而不是2和3的版本，是要3系列的版本号也一样。\n#### 语法知识\n这种语法错误，谁知道会存在呢？\n好了，学到一招了\n3.5以前的\\*表达式必须放最后一个，3.5以后随便放。**通用的就是\\*表达式都把它放最后一个**。\n#### bug思路总结\n1. 确定代码没语法问题\n2. 确定环境是否一致(版本是否一致)\n### Python全面学习资料\n公号\"Python孙行者\"后台回复”电子书“即可。如果你有什么好东西好神器，欢迎后台私信，以后总结随文分享，一个人很渺小，有你的参与==>人从众众众众众众众\n![](https://i.loli.net/2018/12/01/5c02600ab4745.png)\n\n\n","slug":"都是Python3就万事大吉","published":1,"updated":"2019-05-25T09:32:43.112Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtea003ae5vxbq2x7su9","content":"<p>开发环境一致性很重要；<br>更重要的是版本号要一致；<br>尤其<strong>Python版本号</strong>。<br><strong>为什么？</strong><br>你以为3.4.0和3.5.0没多大区别吗？<br><strong>区别只有踩过了才知道</strong><br><a id=\"more\"></a></p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><h4 id=\"业务需求\"><a href=\"#业务需求\" class=\"headerlink\" title=\"业务需求\"></a>业务需求</h4><p>开发一个很常见的注册时候的那种行政区域级联菜单并支持搜索。比如，选了中国，然后就返回中国下的所有省份，依此类推。<br><img src=\"https://i.loli.net/2018/12/01/5c024c8ec9c45.png\" alt=\"行政区域级联菜单\"></p>\n<h4 id=\"业务实现\"><a href=\"#业务实现\" class=\"headerlink\" title=\"业务实现\"></a>业务实现</h4><p>实现逻辑，查询数据库，根据客户已有的选择，限定条件，返回下一级菜单结果</p>\n<h4 id=\"代码发布\"><a href=\"#代码发布\" class=\"headerlink\" title=\"代码发布\"></a>代码发布</h4><p>本地测试没有问题后，撰写相关接口文档，代码合并到stage测试环境</p>\n<h4 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h4><p>登陆测试环境的Web端，出现点击登录无法请求成功，直接option请求都返回了500(internal server error)</p>\n<h4 id=\"一头雾水\"><a href=\"#一头雾水\" class=\"headerlink\" title=\"一头雾水\"></a>一头雾水</h4><p>代码实现部分和登录部分并没有任何交集啊。<br><img src=\"https://i.loli.net/2018/12/01/5c024fa3989cd.jpeg\" alt=\"\"><br>但是，有问题就解决问题，但解决问题前，赶紧回滚到上一版本，我可不想一堆人@我</p>\n<h3 id=\"着手分析\"><a href=\"#着手分析\" class=\"headerlink\" title=\"着手分析\"></a>着手分析</h3><p>好吧，只有我动了代码，这个bug非我莫属了。<br><img src=\"https://i.loli.net/2018/12/01/5c0250ba9ca10.png\" alt=\"\"><br>开始我的debug之旅：</p>\n<h4 id=\"代码再review\"><a href=\"#代码再review\" class=\"headerlink\" title=\"代码再review\"></a>代码再review</h4><p>打开postman，一顿的发送请求到本地服务端，everything is normal<br>可以确定的是<strong>我的代码我的崽没问题</strong><br>还有什么可能呢？<br>咦，出问题的最终代码是<strong>在服务器上</strong>有问题<br>那么，是不是服务器环境有问题？</p>\n<h4 id=\"服务器环境\"><a href=\"#服务器环境\" class=\"headerlink\" title=\"服务器环境\"></a>服务器环境</h4><p>在服务器中，最好的办法就是直接python run.py同时开启DEBUG模式<br>刷刷刷的跑起来，<br>最后，<br><strong>跪了</strong><br>出现重要的提示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SyntaxError: only named arguments may follow *expression</span><br></pre></td></tr></table></figure></p>\n<p>可以确定是<strong>服务器环境的问题</strong>了</p>\n<h4 id=\"到底哪个环境问题？\"><a href=\"#到底哪个环境问题？\" class=\"headerlink\" title=\"到底哪个环境问题？\"></a>到底哪个环境问题？</h4><p>在服务器中，存在很多服务，确定是哪个服务的问题显得尤为重要。<br>在执行python run.py出现了语法错误<br>使用的服务是Python<br>难道是Python的问题？<br>有什么问题导致Python语法错误呢？<br>本地Python运行好好的，线上Python语法错误<br>难道是版本不一样？<br>两边终端敲入python –version<br>本地Python版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python --version</span><br><span class=\"line\">Python 3.6.6</span><br></pre></td></tr></table></figure></p>\n<p>线上Python版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python --version</span><br><span class=\"line\">Python 3.4.0</span><br></pre></td></tr></table></figure></p>\n<p>可以确定是<strong>Python版本不一致导致语法错误</strong></p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>服务器的环境服务进程之间存在千丝万缕的关系，我不可能把线上的Python版本升级到和我本地的一样(太多不可抗拒因素)，那么我迁就线上的版本，把本地的的版本降级。</p>\n<h3 id=\"原形毕露\"><a href=\"#原形毕露\" class=\"headerlink\" title=\"原形毕露\"></a>原形毕露</h3><p>在我把本地的Python版本由3.6.6指定为3.4.0之后，Pycharm IDE 为我指出原因所在，代码出现了红色下划线。<br><img src=\"https://i.loli.net/2018/12/01/5c0258dfdde97.png\" alt=\"\"><br>从上面的报错来看：<br>我本地之前使用了3.6.6，<em>表达式运行没问题。但线上的为3.4.0，**低于3.5的Python关于</em>表达式的要求是*表达式必须放在最后一个参数。**<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">random_list = [random.randint(0, i) for i in range(10)]</span><br><span class=\"line\">print(*(random_list), &apos;RidingRoad is foolish&apos;)</span><br><span class=\"line\"># 低于Python3.5.0的版本会语法错误</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"经验总结\"><a href=\"#经验总结\" class=\"headerlink\" title=\"经验总结\"></a>经验总结</h3><h4 id=\"环境一致性\"><a href=\"#环境一致性\" class=\"headerlink\" title=\"环境一致性\"></a>环境一致性</h4><p>如果我一开始，本地就和线上的Python环境一致，就不会出现这种问题了。所以，大家也确认一下线上的版本和自己本地开发的版本号一致，而不是2和3的版本，是要3系列的版本号也一样。</p>\n<h4 id=\"语法知识\"><a href=\"#语法知识\" class=\"headerlink\" title=\"语法知识\"></a>语法知识</h4><p>这种语法错误，谁知道会存在呢？<br>好了，学到一招了<br>3.5以前的*表达式必须放最后一个，3.5以后随便放。<strong>通用的就是*表达式都把它放最后一个</strong>。</p>\n<h4 id=\"bug思路总结\"><a href=\"#bug思路总结\" class=\"headerlink\" title=\"bug思路总结\"></a>bug思路总结</h4><ol>\n<li>确定代码没语法问题</li>\n<li>确定环境是否一致(版本是否一致)<h3 id=\"Python全面学习资料\"><a href=\"#Python全面学习资料\" class=\"headerlink\" title=\"Python全面学习资料\"></a>Python全面学习资料</h3>公号”Python孙行者”后台回复”电子书“即可。如果你有什么好东西好神器，欢迎后台私信，以后总结随文分享，一个人很渺小，有你的参与==&gt;人从众众众众众众众<br><img src=\"https://i.loli.net/2018/12/01/5c02600ab4745.png\" alt=\"\"></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>开发环境一致性很重要；<br>更重要的是版本号要一致；<br>尤其<strong>Python版本号</strong>。<br><strong>为什么？</strong><br>你以为3.4.0和3.5.0没多大区别吗？<br><strong>区别只有踩过了才知道</strong><br>","more":"</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><h4 id=\"业务需求\"><a href=\"#业务需求\" class=\"headerlink\" title=\"业务需求\"></a>业务需求</h4><p>开发一个很常见的注册时候的那种行政区域级联菜单并支持搜索。比如，选了中国，然后就返回中国下的所有省份，依此类推。<br><img src=\"https://i.loli.net/2018/12/01/5c024c8ec9c45.png\" alt=\"行政区域级联菜单\"></p>\n<h4 id=\"业务实现\"><a href=\"#业务实现\" class=\"headerlink\" title=\"业务实现\"></a>业务实现</h4><p>实现逻辑，查询数据库，根据客户已有的选择，限定条件，返回下一级菜单结果</p>\n<h4 id=\"代码发布\"><a href=\"#代码发布\" class=\"headerlink\" title=\"代码发布\"></a>代码发布</h4><p>本地测试没有问题后，撰写相关接口文档，代码合并到stage测试环境</p>\n<h4 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h4><p>登陆测试环境的Web端，出现点击登录无法请求成功，直接option请求都返回了500(internal server error)</p>\n<h4 id=\"一头雾水\"><a href=\"#一头雾水\" class=\"headerlink\" title=\"一头雾水\"></a>一头雾水</h4><p>代码实现部分和登录部分并没有任何交集啊。<br><img src=\"https://i.loli.net/2018/12/01/5c024fa3989cd.jpeg\" alt=\"\"><br>但是，有问题就解决问题，但解决问题前，赶紧回滚到上一版本，我可不想一堆人@我</p>\n<h3 id=\"着手分析\"><a href=\"#着手分析\" class=\"headerlink\" title=\"着手分析\"></a>着手分析</h3><p>好吧，只有我动了代码，这个bug非我莫属了。<br><img src=\"https://i.loli.net/2018/12/01/5c0250ba9ca10.png\" alt=\"\"><br>开始我的debug之旅：</p>\n<h4 id=\"代码再review\"><a href=\"#代码再review\" class=\"headerlink\" title=\"代码再review\"></a>代码再review</h4><p>打开postman，一顿的发送请求到本地服务端，everything is normal<br>可以确定的是<strong>我的代码我的崽没问题</strong><br>还有什么可能呢？<br>咦，出问题的最终代码是<strong>在服务器上</strong>有问题<br>那么，是不是服务器环境有问题？</p>\n<h4 id=\"服务器环境\"><a href=\"#服务器环境\" class=\"headerlink\" title=\"服务器环境\"></a>服务器环境</h4><p>在服务器中，最好的办法就是直接python run.py同时开启DEBUG模式<br>刷刷刷的跑起来，<br>最后，<br><strong>跪了</strong><br>出现重要的提示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SyntaxError: only named arguments may follow *expression</span><br></pre></td></tr></table></figure></p>\n<p>可以确定是<strong>服务器环境的问题</strong>了</p>\n<h4 id=\"到底哪个环境问题？\"><a href=\"#到底哪个环境问题？\" class=\"headerlink\" title=\"到底哪个环境问题？\"></a>到底哪个环境问题？</h4><p>在服务器中，存在很多服务，确定是哪个服务的问题显得尤为重要。<br>在执行python run.py出现了语法错误<br>使用的服务是Python<br>难道是Python的问题？<br>有什么问题导致Python语法错误呢？<br>本地Python运行好好的，线上Python语法错误<br>难道是版本不一样？<br>两边终端敲入python –version<br>本地Python版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python --version</span><br><span class=\"line\">Python 3.6.6</span><br></pre></td></tr></table></figure></p>\n<p>线上Python版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python --version</span><br><span class=\"line\">Python 3.4.0</span><br></pre></td></tr></table></figure></p>\n<p>可以确定是<strong>Python版本不一致导致语法错误</strong></p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>服务器的环境服务进程之间存在千丝万缕的关系，我不可能把线上的Python版本升级到和我本地的一样(太多不可抗拒因素)，那么我迁就线上的版本，把本地的的版本降级。</p>\n<h3 id=\"原形毕露\"><a href=\"#原形毕露\" class=\"headerlink\" title=\"原形毕露\"></a>原形毕露</h3><p>在我把本地的Python版本由3.6.6指定为3.4.0之后，Pycharm IDE 为我指出原因所在，代码出现了红色下划线。<br><img src=\"https://i.loli.net/2018/12/01/5c0258dfdde97.png\" alt=\"\"><br>从上面的报错来看：<br>我本地之前使用了3.6.6，<em>表达式运行没问题。但线上的为3.4.0，**低于3.5的Python关于</em>表达式的要求是*表达式必须放在最后一个参数。**<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">random_list = [random.randint(0, i) for i in range(10)]</span><br><span class=\"line\">print(*(random_list), &apos;RidingRoad is foolish&apos;)</span><br><span class=\"line\"># 低于Python3.5.0的版本会语法错误</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"经验总结\"><a href=\"#经验总结\" class=\"headerlink\" title=\"经验总结\"></a>经验总结</h3><h4 id=\"环境一致性\"><a href=\"#环境一致性\" class=\"headerlink\" title=\"环境一致性\"></a>环境一致性</h4><p>如果我一开始，本地就和线上的Python环境一致，就不会出现这种问题了。所以，大家也确认一下线上的版本和自己本地开发的版本号一致，而不是2和3的版本，是要3系列的版本号也一样。</p>\n<h4 id=\"语法知识\"><a href=\"#语法知识\" class=\"headerlink\" title=\"语法知识\"></a>语法知识</h4><p>这种语法错误，谁知道会存在呢？<br>好了，学到一招了<br>3.5以前的*表达式必须放最后一个，3.5以后随便放。<strong>通用的就是*表达式都把它放最后一个</strong>。</p>\n<h4 id=\"bug思路总结\"><a href=\"#bug思路总结\" class=\"headerlink\" title=\"bug思路总结\"></a>bug思路总结</h4><ol>\n<li>确定代码没语法问题</li>\n<li>确定环境是否一致(版本是否一致)<h3 id=\"Python全面学习资料\"><a href=\"#Python全面学习资料\" class=\"headerlink\" title=\"Python全面学习资料\"></a>Python全面学习资料</h3>公号”Python孙行者”后台回复”电子书“即可。如果你有什么好东西好神器，欢迎后台私信，以后总结随文分享，一个人很渺小，有你的参与==&gt;人从众众众众众众众<br><img src=\"https://i.loli.net/2018/12/01/5c02600ab4745.png\" alt=\"\"></li>\n</ol>"},{"title":"猜数字小程序","comments":1,"date":"2018-07-24T00:48:00.000Z","toc":true,"_content":"\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 18px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><h1 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.6em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">一个小程序:猜数字</span></h1><!--more-->\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.4em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">下面来实现一个猜数字的简易程序:</span></h2>\n\n<h3 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">思路如下:</span></h3>\n<ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">使用随机模块的方法生成一个1到20的随机数,random.randint(1,20)</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">总共有6次猜测机会,每次都提示大了还是小了</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">猜对了,么么哒,使用break 提前退出循环;否则输出,死鬼6次都猜错果</span></li>\n</ol>\n<h3 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">效果如下</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">小可爱:我心里有个<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>到<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">20</span>的幸运数字<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">10</span><br>小可爱:大了哦,笨蛋<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">5</span><br>小可爱:小了耶,傻瓜<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">7</span><br>小可爱:小了耶,傻瓜<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">8</span><br>小可爱:心有灵犀哦,你只用<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">5</span>次就猜到我的心思<br></code></pre>\n<h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">实现代码</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;随机模块</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">import</span>&nbsp;random<br><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;定义猜数字函数</span><br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">guessNumber</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"\"\"这是一个猜数字游戏,6次机会\"\"\"</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;使用随机函数生成一个随机整数并保存在变量secretNumber</span><br>&nbsp;&nbsp;&nbsp;&nbsp;secretNumber&nbsp;=&nbsp;random.randint(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">20</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'小可爱:我心里有个1到20的幸运数字'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;计数器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;guessesTaken&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">0</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;guess用来保存玩家的数字</span><br>&nbsp;&nbsp;&nbsp;&nbsp;guess&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">None</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;使用range(1,7)控制循环6次,range(start,end,step)左闭右开</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;guessesTaken&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">7</span>):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;么么哒最多会问6次,不然发火了.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'小可爱:猜猜(比心)'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;么么哒输入数字</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">global</span>&nbsp;guess<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guess&nbsp;=&nbsp;int(input(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"么么哒:\"</span>))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;计数器加一</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guessesTaken&nbsp;+=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;guess&nbsp;&lt;&nbsp;secretNumber:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'小可爱:小了耶,傻瓜'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">elif</span>&nbsp;guess&nbsp;&gt;&nbsp;secretNumber:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'小可爱:大了哦,笨蛋'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">break</span>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;不大不小那就是对了,不用继续猜了,退出循环</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;guess&nbsp;==&nbsp;secretNumber:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'么么哒,你只用'</span>&nbsp;+&nbsp;str(guessesTaken)&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'次就猜到我的心思,心有灵犀哦'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'死鬼,哎,我的幸运数字是&nbsp;'</span>&nbsp;+&nbsp;str(secretNumber))<br><br><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;__name__&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"__main__\"</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;guessNumber()<br></code></pre>\n<h3 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">源码,会有的,但建议自己悄悄实现哦</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">公众号Python孙行者后台回复<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">\"么么哒猜数字\"</strong>即可</p>\n<h3 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">猜数字使用二分法哦,概率杠杠的</span></h3>\n","source":"_posts/猜数字小程序.md","raw":"---\ntitle: 猜数字小程序\ncomments: true\ndate: 2018-07-24 08:48:00\ntoc: true\ncategories:\n- Python\n- Fun\ntags:\n- 随机\n- 猜数字\n---\n\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 18px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><h1 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.6em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">一个小程序:猜数字</span></h1><!--more-->\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.4em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">下面来实现一个猜数字的简易程序:</span></h2>\n\n<h3 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">思路如下:</span></h3>\n<ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">使用随机模块的方法生成一个1到20的随机数,random.randint(1,20)</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">总共有6次猜测机会,每次都提示大了还是小了</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">猜对了,么么哒,使用break 提前退出循环;否则输出,死鬼6次都猜错果</span></li>\n</ol>\n<h3 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">效果如下</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">小可爱:我心里有个<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>到<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">20</span>的幸运数字<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">10</span><br>小可爱:大了哦,笨蛋<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">5</span><br>小可爱:小了耶,傻瓜<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">7</span><br>小可爱:小了耶,傻瓜<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">8</span><br>小可爱:心有灵犀哦,你只用<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">5</span>次就猜到我的心思<br></code></pre>\n<h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">实现代码</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;随机模块</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">import</span>&nbsp;random<br><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;定义猜数字函数</span><br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">guessNumber</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"\"\"这是一个猜数字游戏,6次机会\"\"\"</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;使用随机函数生成一个随机整数并保存在变量secretNumber</span><br>&nbsp;&nbsp;&nbsp;&nbsp;secretNumber&nbsp;=&nbsp;random.randint(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">20</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'小可爱:我心里有个1到20的幸运数字'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;计数器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;guessesTaken&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">0</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;guess用来保存玩家的数字</span><br>&nbsp;&nbsp;&nbsp;&nbsp;guess&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">None</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;使用range(1,7)控制循环6次,range(start,end,step)左闭右开</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;guessesTaken&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">7</span>):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;么么哒最多会问6次,不然发火了.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'小可爱:猜猜(比心)'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;么么哒输入数字</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">global</span>&nbsp;guess<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guess&nbsp;=&nbsp;int(input(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"么么哒:\"</span>))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;计数器加一</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guessesTaken&nbsp;+=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;guess&nbsp;&lt;&nbsp;secretNumber:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'小可爱:小了耶,傻瓜'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">elif</span>&nbsp;guess&nbsp;&gt;&nbsp;secretNumber:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'小可爱:大了哦,笨蛋'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">break</span>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;不大不小那就是对了,不用继续猜了,退出循环</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;guess&nbsp;==&nbsp;secretNumber:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'么么哒,你只用'</span>&nbsp;+&nbsp;str(guessesTaken)&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'次就猜到我的心思,心有灵犀哦'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">'死鬼,哎,我的幸运数字是&nbsp;'</span>&nbsp;+&nbsp;str(secretNumber))<br><br><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;__name__&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"__main__\"</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;guessNumber()<br></code></pre>\n<h3 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">源码,会有的,但建议自己悄悄实现哦</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">公众号Python孙行者后台回复<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">\"么么哒猜数字\"</strong>即可</p>\n<h3 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">猜数字使用二分法哦,概率杠杠的</span></h3>\n","slug":"猜数字小程序","published":1,"updated":"2019-05-25T09:32:43.112Z","layout":"post","photos":[],"link":"","_id":"cjw3bjteb003de5vxkgbmvyec","content":"<p><div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 18px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><h1 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.6em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">一个小程序:猜数字</span></h1><a id=\"more\"></a></div></p>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.4em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">下面来实现一个猜数字的简易程序:</span></h2>\n\n<h3 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">思路如下:</span></h3><br><ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">使用随机模块的方法生成一个1到20的随机数,random.randint(1,20)</span></li><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">总共有6次猜测机会,每次都提示大了还是小了</span></li><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">猜对了,么么哒,使用break 提前退出循环;否则输出,死鬼6次都猜错果</span></li><br></ol><br><h3 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">效果如下</span></h3><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">小可爱:我心里有个<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>到<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">20</span>的幸运数字<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">10</span><br>小可爱:大了哦,笨蛋<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">5</span><br>小可爱:小了耶,傻瓜<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">7</span><br>小可爱:小了耶,傻瓜<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">8</span><br>小可爱:心有灵犀哦,你只用<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">5</span>次就猜到我的心思<br></code></pre><br><h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">实现代码</span></h3><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;随机模块</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">import</span>&nbsp;random<br><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;定义猜数字函数</span><br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">guessNumber</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“””这是一个猜数字游戏,6次机会”””</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;使用随机函数生成一个随机整数并保存在变量secretNumber</span><br>&nbsp;&nbsp;&nbsp;&nbsp;secretNumber&nbsp;=&nbsp;random.randint(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">20</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘小可爱:我心里有个1到20的幸运数字’</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;计数器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;guessesTaken&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">0</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;guess用来保存玩家的数字</span><br>&nbsp;&nbsp;&nbsp;&nbsp;guess&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">None</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;使用range(1,7)控制循环6次,range(start,end,step)左闭右开</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;guessesTaken&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">7</span>):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;么么哒最多会问6次,不然发火了.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘小可爱:猜猜(比心)’</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;么么哒输入数字</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">global</span>&nbsp;guess<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guess&nbsp;=&nbsp;int(input(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“么么哒:”</span>))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;计数器加一</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guessesTaken&nbsp;+=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;guess&nbsp;&lt;&nbsp;secretNumber:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘小可爱:小了耶,傻瓜’</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">elif</span>&nbsp;guess&nbsp;&gt;&nbsp;secretNumber:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘小可爱:大了哦,笨蛋’</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">break</span>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;不大不小那就是对了,不用继续猜了,退出循环</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;guess&nbsp;==&nbsp;secretNumber:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘么么哒,你只用’</span>&nbsp;+&nbsp;str(guessesTaken)&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘次就猜到我的心思,心有灵犀哦’</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘死鬼,哎,我的幸运数字是&nbsp;’</span>&nbsp;+&nbsp;str(secretNumber))<br><br><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;<strong>name</strong>&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“<strong>main</strong>“</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;guessNumber()<br></code></pre><br><h3 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">源码,会有的,但建议自己悄悄实现哦</span></h3><br><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">公众号Python孙行者后台回复<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">“么么哒猜数字”</strong>即可</p><br><h3 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">猜数字使用二分法哦,概率杠杠的</span></h3>\n","site":{"data":{}},"excerpt":"<p><div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 18px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><h1 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.6em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">一个小程序:猜数字</span></h1>","more":"</div></p>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.4em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">下面来实现一个猜数字的简易程序:</span></h2>\n\n<h3 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">思路如下:</span></h3><br><ol style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal;\"><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">使用随机模块的方法生成一个1到20的随机数,random.randint(1,20)</span></li><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">总共有6次猜测机会,每次都提示大了还是小了</span></li><br><li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">猜对了,么么哒,使用break 提前退出循环;否则输出,死鬼6次都猜错果</span></li><br></ol><br><h3 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">效果如下</span></h3><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">小可爱:我心里有个<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>到<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">20</span>的幸运数字<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">10</span><br>小可爱:大了哦,笨蛋<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">5</span><br>小可爱:小了耶,傻瓜<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">7</span><br>小可爱:小了耶,傻瓜<br>小可爱:猜猜(比心)<br><br>么么哒:<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">8</span><br>小可爱:心有灵犀哦,你只用<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">5</span>次就猜到我的心思<br></code></pre><br><h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">实现代码</span></h3><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;随机模块</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">import</span>&nbsp;random<br><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;定义猜数字函数</span><br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">guessNumber</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">()</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“””这是一个猜数字游戏,6次机会”””</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;使用随机函数生成一个随机整数并保存在变量secretNumber</span><br>&nbsp;&nbsp;&nbsp;&nbsp;secretNumber&nbsp;=&nbsp;random.randint(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">20</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘小可爱:我心里有个1到20的幸运数字’</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;计数器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;guessesTaken&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">0</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;guess用来保存玩家的数字</span><br>&nbsp;&nbsp;&nbsp;&nbsp;guess&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">None</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;使用range(1,7)控制循环6次,range(start,end,step)左闭右开</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;guessesTaken&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">7</span>):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;么么哒最多会问6次,不然发火了.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘小可爱:猜猜(比心)’</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;么么哒输入数字</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">global</span>&nbsp;guess<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guess&nbsp;=&nbsp;int(input(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“么么哒:”</span>))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;计数器加一</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guessesTaken&nbsp;+=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;guess&nbsp;&lt;&nbsp;secretNumber:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘小可爱:小了耶,傻瓜’</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">elif</span>&nbsp;guess&nbsp;&gt;&nbsp;secretNumber:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘小可爱:大了哦,笨蛋’</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">break</span>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;不大不小那就是对了,不用继续猜了,退出循环</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;guess&nbsp;==&nbsp;secretNumber:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘么么哒,你只用’</span>&nbsp;+&nbsp;str(guessesTaken)&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘次就猜到我的心思,心有灵犀哦’</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">‘死鬼,哎,我的幸运数字是&nbsp;’</span>&nbsp;+&nbsp;str(secretNumber))<br><br><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;<strong>name</strong>&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“<strong>main</strong>“</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;guessNumber()<br></code></pre><br><h3 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">源码,会有的,但建议自己悄悄实现哦</span></h3><br><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">公众号Python孙行者后台回复<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">“么么哒猜数字”</strong>即可</p><br><h3 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">猜数字使用二分法哦,概率杠杠的</span></h3>"},{"title":"用Pythony验证万物归一(考拉咨猜想)","comments":1,"date":"2018-07-24T00:54:02.000Z","toc":true,"_content":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 18px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><h2 id=\"hpythony\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.4em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">用Pythony验证万物归一(考拉咨猜想)</span></h2><!--more-->\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(38, 50, 56); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">世界上存在一种这样的猜想,无论你给我什么,如何待我,我会慢慢把它捶打磨练,最后达到天人合一.额,其实是我瞎编的啦.其实世界上有一种跟我瞎编的东西很像,那么就是考拉咨猜想:<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">你随便给我一个整数,我最后都是会通过固定的规则演变成\"1\",万物归一.</strong></p>\n</blockquote>\n<h3 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">那么这个规则是什么呢?</span></h3>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(38, 50, 56); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">我拿到一个数number:<br> 奇数则number=  3 * number + 1;<br> 偶数则number=  number // 2;<br> <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">猜想:对于每一个正整数，如此循环，最终都能够得到1。</strong></p>\n</blockquote>\n<h3 id=\"hpython\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">那么我们就用Python验证一下这个猜想</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#!/usr/bin/env&nbsp;python3</span><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;coding=utf-8</span><br>__author__&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"RidingRoad\"</span><br><br>START_NUMBER&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br>END_NUMBER&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1000001</span><br><br><br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">collatz_seq</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(number)</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"\"\"<br>&nbsp;&nbsp;&nbsp;&nbsp;获取到的number是奇数,则number=&nbsp;&nbsp;3&nbsp;*&nbsp;number&nbsp;+&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;偶数则number=&nbsp;&nbsp;number&nbsp;//&nbsp;2;<br>&nbsp;&nbsp;&nbsp;&nbsp;如果考拉咨猜想真的成立,可以number=1,那么程序将会停止,否则,考拉咨猜想不成立<br>&nbsp;&nbsp;&nbsp;&nbsp;:return:1<br>&nbsp;&nbsp;&nbsp;&nbsp;\"\"\"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">while</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">True</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;number&nbsp;==&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;number为偶数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">not</span>&nbsp;number&nbsp;%&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number&nbsp;=&nbsp;number&nbsp;//&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;number为奇数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">3</span>&nbsp;*&nbsp;number&nbsp;+&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br><br><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;__name__&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"__main__\"</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;存放验证考拉咨猜想函数的结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;[]<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;i&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(START_NUMBER,&nbsp;END_NUMBER):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;验证START_NUMBER,&nbsp;END_NUMBER之间的数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.append(collatz_seq(i))<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;显示结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;print(result)<br></code></pre>\n<h3 id=\"h11000000\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">下面是1到1000,000的数字进行考拉咨猜想验证的结果</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,......]<br></code></pre>\n<h3 id=\"hsoeasy\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">可以看到:万里挑一啊, so easy</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">古人的猜想,如果还是基于传统的计算工具,那是多么的无聊单调,我们可以用Python来瞬间完成,感谢龟叔哦.</p>\n<h3 id=\"hfilter\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">这里我们就不自己肉眼判断了,我们用filter</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">verify</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(num)</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"\"\"判断结果里的不是1的数\"\"\"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>&nbsp;!=&nbsp;num<br><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;__name__&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"__main__\"</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;存放验证考拉咨猜想函数的结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;[]<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;i&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(START_NUMBER,&nbsp;END_NUMBER):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;验证START_NUMBER,&nbsp;END_NUMBER之间的数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.append(collatz_seq(i))<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;使用filter对结果进行判断是否存在非1的数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;print(list(filter(verify,result)))<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"\"\"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter(function&nbsp;or&nbsp;None,&nbsp;iterable)&nbsp;--&gt;&nbsp;filter&nbsp;object<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return&nbsp;an&nbsp;iterator&nbsp;yielding&nbsp;those&nbsp;items&nbsp;of&nbsp;iterable&nbsp;for&nbsp;which&nbsp;function(item)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;true.&nbsp;If&nbsp;function&nbsp;is&nbsp;None,&nbsp;return&nbsp;the&nbsp;items&nbsp;that&nbsp;are&nbsp;true.<br>&nbsp;&nbsp;&nbsp;&nbsp;\"\"\"</span><br></code></pre>\n<h3 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">结果</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">输出了一个[]空列表,说明result列表里全部为一,考拉咨猜想是可能正确的.为什么说可能,是因为我只验证了1到1000000的数字.</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">[]<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">我的个性签名:Focusing on the Python and firmly convincing that nothing can replace hard work.需要完整的代码关注我的公众号Python孙行者,聊天界面回复\"万物归一\",即可获取.</p></div>\n","source":"_posts/用Pythony验证万物归一-考拉咨猜想.md","raw":"---\ntitle: 用Pythony验证万物归一(考拉咨猜想)\ncomments: true\ndate: 2018-07-24 08:54:02\ntoc: true\ncategories:\n- Python\n- Fun\ntags:\n- 考拉咨猜想\n---\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 18px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><h2 id=\"hpythony\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.4em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">用Pythony验证万物归一(考拉咨猜想)</span></h2><!--more-->\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(38, 50, 56); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">世界上存在一种这样的猜想,无论你给我什么,如何待我,我会慢慢把它捶打磨练,最后达到天人合一.额,其实是我瞎编的啦.其实世界上有一种跟我瞎编的东西很像,那么就是考拉咨猜想:<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">你随便给我一个整数,我最后都是会通过固定的规则演变成\"1\",万物归一.</strong></p>\n</blockquote>\n<h3 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">那么这个规则是什么呢?</span></h3>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(38, 50, 56); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">我拿到一个数number:<br> 奇数则number=  3 * number + 1;<br> 偶数则number=  number // 2;<br> <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">猜想:对于每一个正整数，如此循环，最终都能够得到1。</strong></p>\n</blockquote>\n<h3 id=\"hpython\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">那么我们就用Python验证一下这个猜想</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#!/usr/bin/env&nbsp;python3</span><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;coding=utf-8</span><br>__author__&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"RidingRoad\"</span><br><br>START_NUMBER&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br>END_NUMBER&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1000001</span><br><br><br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">collatz_seq</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(number)</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"\"\"<br>&nbsp;&nbsp;&nbsp;&nbsp;获取到的number是奇数,则number=&nbsp;&nbsp;3&nbsp;*&nbsp;number&nbsp;+&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;偶数则number=&nbsp;&nbsp;number&nbsp;//&nbsp;2;<br>&nbsp;&nbsp;&nbsp;&nbsp;如果考拉咨猜想真的成立,可以number=1,那么程序将会停止,否则,考拉咨猜想不成立<br>&nbsp;&nbsp;&nbsp;&nbsp;:return:1<br>&nbsp;&nbsp;&nbsp;&nbsp;\"\"\"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">while</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">True</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;number&nbsp;==&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;number为偶数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">not</span>&nbsp;number&nbsp;%&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number&nbsp;=&nbsp;number&nbsp;//&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;number为奇数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">3</span>&nbsp;*&nbsp;number&nbsp;+&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br><br><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;__name__&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"__main__\"</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;存放验证考拉咨猜想函数的结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;[]<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;i&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(START_NUMBER,&nbsp;END_NUMBER):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;验证START_NUMBER,&nbsp;END_NUMBER之间的数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.append(collatz_seq(i))<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;显示结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;print(result)<br></code></pre>\n<h3 id=\"h11000000\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">下面是1到1000,000的数字进行考拉咨猜想验证的结果</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,......]<br></code></pre>\n<h3 id=\"hsoeasy\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">可以看到:万里挑一啊, so easy</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">古人的猜想,如果还是基于传统的计算工具,那是多么的无聊单调,我们可以用Python来瞬间完成,感谢龟叔哦.</p>\n<h3 id=\"hfilter\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">这里我们就不自己肉眼判断了,我们用filter</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">verify</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(num)</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"\"\"判断结果里的不是1的数\"\"\"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>&nbsp;!=&nbsp;num<br><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;__name__&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"__main__\"</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;存放验证考拉咨猜想函数的结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;[]<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;i&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(START_NUMBER,&nbsp;END_NUMBER):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;验证START_NUMBER,&nbsp;END_NUMBER之间的数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.append(collatz_seq(i))<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;使用filter对结果进行判断是否存在非1的数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;print(list(filter(verify,result)))<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"\"\"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter(function&nbsp;or&nbsp;None,&nbsp;iterable)&nbsp;--&gt;&nbsp;filter&nbsp;object<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return&nbsp;an&nbsp;iterator&nbsp;yielding&nbsp;those&nbsp;items&nbsp;of&nbsp;iterable&nbsp;for&nbsp;which&nbsp;function(item)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;true.&nbsp;If&nbsp;function&nbsp;is&nbsp;None,&nbsp;return&nbsp;the&nbsp;items&nbsp;that&nbsp;are&nbsp;true.<br>&nbsp;&nbsp;&nbsp;&nbsp;\"\"\"</span><br></code></pre>\n<h3 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">结果</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">输出了一个[]空列表,说明result列表里全部为一,考拉咨猜想是可能正确的.为什么说可能,是因为我只验证了1到1000000的数字.</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">[]<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">我的个性签名:Focusing on the Python and firmly convincing that nothing can replace hard work.需要完整的代码关注我的公众号Python孙行者,聊天界面回复\"万物归一\",即可获取.</p></div>\n","slug":"用Pythony验证万物归一-考拉咨猜想","published":1,"updated":"2019-05-25T09:32:43.112Z","layout":"post","photos":[],"link":"","_id":"cjw3bjtf10058e5vx9f7l1710","content":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 18px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><h2 id=\"hpythony\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.4em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">用Pythony验证万物归一(考拉咨猜想)</span></h2><a id=\"more\"></a><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(38, 50, 56); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">世界上存在一种这样的猜想,无论你给我什么,如何待我,我会慢慢把它捶打磨练,最后达到天人合一.额,其实是我瞎编的啦.其实世界上有一种跟我瞎编的东西很像,那么就是考拉咨猜想:<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">你随便给我一个整数,我最后都是会通过固定的规则演变成”1”,万物归一.</strong></p><br></blockquote><br><h3 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">那么这个规则是什么呢?</span></h3><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(38, 50, 56); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">我拿到一个数number:<br> 奇数则number=  3 <em> number + 1;<br> 偶数则number=  number // 2;<br> <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">猜想:对于每一个正整数，如此循环，最终都能够得到1。</strong></em></p><br></blockquote><br><h3 id=\"hpython\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">那么我们就用Python验证一下这个猜想</span></h3><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#!/usr/bin/env&nbsp;python3</span><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;coding=utf-8</span><br><strong>author</strong>&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“RidingRoad”</span><br><br>START_NUMBER&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br>END_NUMBER&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1000001</span><br><br><br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">collatz_seq</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(number)</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“””<br>&nbsp;&nbsp;&nbsp;&nbsp;获取到的number是奇数,则number=&nbsp;&nbsp;3&nbsp;&nbsp;number&nbsp;+&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;偶数则number=&nbsp;&nbsp;number&nbsp;//&nbsp;2;<br>&nbsp;&nbsp;&nbsp;&nbsp;如果考拉咨猜想真的成立,可以number=1,那么程序将会停止,否则,考拉咨猜想不成立<br>&nbsp;&nbsp;&nbsp;&nbsp;:return:1<br>&nbsp;&nbsp;&nbsp;&nbsp;”””</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">while</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">True</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;number&nbsp;==&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;number为偶数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">not</span>&nbsp;number&nbsp;%&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number&nbsp;=&nbsp;number&nbsp;//&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;number为奇数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">3</span>&nbsp;*&nbsp;number&nbsp;+&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br><br><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;<strong>name</strong>&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“<strong>main</strong>“</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;存放验证考拉咨猜想函数的结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;[]<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;i&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(START_NUMBER,&nbsp;END_NUMBER):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;验证START_NUMBER,&nbsp;END_NUMBER之间的数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.append(collatz_seq(i))<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;显示结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;print(result)<br></code></pre><br><h3 id=\"h11000000\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">下面是1到1000,000的数字进行考拉咨猜想验证的结果</span></h3><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,……]<br></code></pre><br><h3 id=\"hsoeasy\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">可以看到:万里挑一啊, so easy</span></h3><br><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">古人的猜想,如果还是基于传统的计算工具,那是多么的无聊单调,我们可以用Python来瞬间完成,感谢龟叔哦.</p><br><h3 id=\"hfilter\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">这里我们就不自己肉眼判断了,我们用filter</span></h3><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">verify</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(num)</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“””判断结果里的不是1的数”””</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>&nbsp;!=&nbsp;num<br><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;<strong>name</strong>&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“<strong>main</strong>“</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;存放验证考拉咨猜想函数的结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;[]<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;i&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(START_NUMBER,&nbsp;END_NUMBER):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;验证START_NUMBER,&nbsp;END_NUMBER之间的数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.append(collatz_seq(i))<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;使用filter对结果进行判断是否存在非1的数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;print(list(filter(verify,result)))<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“””<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter(function&nbsp;or&nbsp;None,&nbsp;iterable)&nbsp;–&gt;&nbsp;filter&nbsp;object<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return&nbsp;an&nbsp;iterator&nbsp;yielding&nbsp;those&nbsp;items&nbsp;of&nbsp;iterable&nbsp;for&nbsp;which&nbsp;function(item)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;true.&nbsp;If&nbsp;function&nbsp;is&nbsp;None,&nbsp;return&nbsp;the&nbsp;items&nbsp;that&nbsp;are&nbsp;true.<br>&nbsp;&nbsp;&nbsp;&nbsp;”””</span><br></code></pre><br><h3 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">结果</span></h3><br><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">输出了一个[]空列表,说明result列表里全部为一,考拉咨猜想是可能正确的.为什么说可能,是因为我只验证了1到1000000的数字.</p><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">[]<br></code></pre><br><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">我的个性签名:Focusing on the Python and firmly convincing that nothing can replace hard work.需要完整的代码关注我的公众号Python孙行者,聊天界面回复”万物归一”,即可获取.</p></div>\n","site":{"data":{}},"excerpt":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 18px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><h2 id=\"hpythony\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.4em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">用Pythony验证万物归一(考拉咨猜想)</span></h2>","more":"<br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(38, 50, 56); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">世界上存在一种这样的猜想,无论你给我什么,如何待我,我会慢慢把它捶打磨练,最后达到天人合一.额,其实是我瞎编的啦.其实世界上有一种跟我瞎编的东西很像,那么就是考拉咨猜想:<strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">你随便给我一个整数,我最后都是会通过固定的规则演变成”1”,万物归一.</strong></p><br></blockquote><br><h3 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">那么这个规则是什么呢?</span></h3><br><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(38, 50, 56); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal;\"><br>  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">我拿到一个数number:<br> 奇数则number=  3 <em> number + 1;<br> 偶数则number=  number // 2;<br> <strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">猜想:对于每一个正整数，如此循环，最终都能够得到1。</strong></em></p><br></blockquote><br><h3 id=\"hpython\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">那么我们就用Python验证一下这个猜想</span></h3><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#!/usr/bin/env&nbsp;python3</span><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;coding=utf-8</span><br><strong>author</strong>&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“RidingRoad”</span><br><br>START_NUMBER&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br>END_NUMBER&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1000001</span><br><br><br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">collatz_seq</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(number)</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“””<br>&nbsp;&nbsp;&nbsp;&nbsp;获取到的number是奇数,则number=&nbsp;&nbsp;3&nbsp;&nbsp;number&nbsp;+&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;偶数则number=&nbsp;&nbsp;number&nbsp;//&nbsp;2;<br>&nbsp;&nbsp;&nbsp;&nbsp;如果考拉咨猜想真的成立,可以number=1,那么程序将会停止,否则,考拉咨猜想不成立<br>&nbsp;&nbsp;&nbsp;&nbsp;:return:1<br>&nbsp;&nbsp;&nbsp;&nbsp;”””</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">while</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">True</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;number&nbsp;==&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;number为偶数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">not</span>&nbsp;number&nbsp;%&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number&nbsp;=&nbsp;number&nbsp;//&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">2</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;number为奇数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">3</span>&nbsp;*&nbsp;number&nbsp;+&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span><br><br><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;<strong>name</strong>&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“<strong>main</strong>“</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;存放验证考拉咨猜想函数的结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;[]<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;i&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(START_NUMBER,&nbsp;END_NUMBER):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;验证START_NUMBER,&nbsp;END_NUMBER之间的数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.append(collatz_seq(i))<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;显示结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;print(result)<br></code></pre><br><h3 id=\"h11000000\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">下面是1到1000,000的数字进行考拉咨猜想验证的结果</span></h3><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">[<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>,……]<br></code></pre><br><h3 id=\"hsoeasy\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">可以看到:万里挑一啊, so easy</span></h3><br><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">古人的猜想,如果还是基于传统的计算工具,那是多么的无聊单调,我们可以用Python来瞬间完成,感谢龟叔哦.</p><br><h3 id=\"hfilter\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">这里我们就不自己肉眼判断了,我们用filter</span></h3><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">def</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">verify</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(num)</span>:</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“””判断结果里的不是1的数”””</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>&nbsp;!=&nbsp;num<br><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;<strong>name</strong>&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“<strong>main</strong>“</span>:<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;存放验证考拉咨猜想函数的结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;[]<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">for</span>&nbsp;i&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">in</span>&nbsp;range(START_NUMBER,&nbsp;END_NUMBER):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;验证START_NUMBER,&nbsp;END_NUMBER之间的数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.append(collatz_seq(i))<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">#&nbsp;使用filter对结果进行判断是否存在非1的数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;print(list(filter(verify,result)))<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">“””<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter(function&nbsp;or&nbsp;None,&nbsp;iterable)&nbsp;–&gt;&nbsp;filter&nbsp;object<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return&nbsp;an&nbsp;iterator&nbsp;yielding&nbsp;those&nbsp;items&nbsp;of&nbsp;iterable&nbsp;for&nbsp;which&nbsp;function(item)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;true.&nbsp;If&nbsp;function&nbsp;is&nbsp;None,&nbsp;return&nbsp;the&nbsp;items&nbsp;that&nbsp;are&nbsp;true.<br>&nbsp;&nbsp;&nbsp;&nbsp;”””</span><br></code></pre><br><h3 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(63, 63, 63); margin-bottom: 50px; font-size: 1em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(63, 63, 63); color: rgb(255, 255, 255); padding: 10px 16px; border-radius: 5px; box-shadow: black 5px 5px 10px;\">结果</span></h3><br><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">输出了一个[]空列表,说明result列表里全部为一,考拉咨猜想是可能正确的.为什么说可能,是因为我只验证了1到1000000的数字.</p><br><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"python language-python hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 16px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">[]<br></code></pre><br><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">我的个性签名:Focusing on the Python and firmly convincing that nothing can replace hard work.需要完整的代码关注我的公众号Python孙行者,聊天界面回复”万物归一”,即可获取.</p></div>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjw3bjtbz0001e5vxje18l2af","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtch000ie5vxops1hqum"},{"post_id":"cjw3bjtcb000fe5vxpeaezllx","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtcn000oe5vxxugnrv9a"},{"post_id":"cjw3bjtc30004e5vxkvbtv7pa","category_id":"cjw3bjtca000ce5vxgjdx8eah","_id":"cjw3bjtco000se5vxcf2840qp"},{"post_id":"cjw3bjtc40005e5vxuai1luq7","category_id":"cjw3bjtci000je5vx6hwl6d4w","_id":"cjw3bjtcq000ve5vxgermeby9"},{"post_id":"cjw3bjtcm000ne5vx1zrz1fuo","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtcs000ze5vxedkhh86p"},{"post_id":"cjw3bjtbv0000e5vx85ud0hc9","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtct0012e5vxrw0rw3ru"},{"post_id":"cjw3bjtbv0000e5vx85ud0hc9","category_id":"cjw3bjtcn000pe5vxua4js7kn","_id":"cjw3bjtcw0016e5vxzgoh0r2y"},{"post_id":"cjw3bjtcp000ue5vx1ptk3q9q","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtcz0019e5vxcux5bn7x"},{"post_id":"cjw3bjtc50006e5vx314v8ynz","category_id":"cjw3bjtcq000we5vxjuasiekd","_id":"cjw3bjtd6001de5vxsur1xade"},{"post_id":"cjw3bjtct0013e5vxevhety1k","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtdb001ge5vx64pkgrq8"},{"post_id":"cjw3bjtcw0017e5vxt26e201l","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtde001ke5vx5x26du8z"},{"post_id":"cjw3bjtc8000ae5vxt3pt671c","category_id":"cjw3bjtca000ce5vxgjdx8eah","_id":"cjw3bjtdf001ne5vx9z9ox1tq"},{"post_id":"cjw3bjtd0001ae5vx2c5wqewh","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtdg001re5vx2l0i0y6h"},{"post_id":"cjw3bjtd7001ee5vx5m0wqvjc","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtdi001ue5vxdnx21f6u"},{"post_id":"cjw3bjtca000be5vxmovsu80s","category_id":"cjw3bjtd1001be5vx0x979oru","_id":"cjw3bjtdk001xe5vx7t45iiho"},{"post_id":"cjw3bjtdb001he5vxwuf0mavq","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtdl0021e5vxwjd2kagv"},{"post_id":"cjw3bjtde001le5vxign8n1qo","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtdn0023e5vx5stq285o"},{"post_id":"cjw3bjtcd000he5vxc2ry9ebs","category_id":"cjw3bjtdd001ie5vxrlo109aw","_id":"cjw3bjtdq0027e5vxzc2ifrg0"},{"post_id":"cjw3bjtdf001oe5vxf4ydwu2b","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtds002ae5vxmu1njkv4"},{"post_id":"cjw3bjtdf001oe5vxf4ydwu2b","category_id":"cjw3bjtcn000pe5vxua4js7kn","_id":"cjw3bjtdu002ee5vxfw08jq0i"},{"post_id":"cjw3bjtck000le5vxo25vt3u4","category_id":"cjw3bjtdg001pe5vx3ij1aybe","_id":"cjw3bjtdv002he5vxjk1hf32x"},{"post_id":"cjw3bjtdk001ze5vxf3dkko77","category_id":"cjw3bjtdg001pe5vx3ij1aybe","_id":"cjw3bjtdy002ke5vxvzmijb44"},{"post_id":"cjw3bjtdl0022e5vxzaadh9m9","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtdz002ne5vx3salyztv"},{"post_id":"cjw3bjtco000re5vx86kskots","category_id":"cjw3bjtdk001we5vxp67lh0w3","_id":"cjw3bjte1002qe5vxoamwnlxe"},{"post_id":"cjw3bjtdn0024e5vx299ot8ud","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjte3002ue5vxqn1unpap"},{"post_id":"cjw3bjtdq0029e5vxs71n79n9","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjte4002we5vxlfvz6ikp"},{"post_id":"cjw3bjtcq000xe5vxt9oj2boi","category_id":"cjw3bjtdg001pe5vx3ij1aybe","_id":"cjw3bjte60030e5vx2t7yj7gb"},{"post_id":"cjw3bjtds002be5vxw7pq5fb4","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjte70033e5vx7zwwf2gb"},{"post_id":"cjw3bjtdu002fe5vx598i41dc","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjte80036e5vx77p1a0uo"},{"post_id":"cjw3bjtdh001se5vxgvc2ungt","category_id":"cjw3bjtdt002ce5vxh4ur47if","_id":"cjw3bjtea0039e5vxmqnb05o6"},{"post_id":"cjw3bjtdy002le5vxmssh2po4","category_id":"cjw3bjtdk001we5vxp67lh0w3","_id":"cjw3bjteb003ce5vxnxxtmrx2"},{"post_id":"cjw3bjtdz002oe5vxu0rwccvr","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtec003fe5vxrhj1g1jv"},{"post_id":"cjw3bjtdz002oe5vxu0rwccvr","category_id":"cjw3bjtcn000pe5vxua4js7kn","_id":"cjw3bjted003ge5vxxog8m3jq"},{"post_id":"cjw3bjte1002se5vxozoaqnvg","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtee003je5vxek729l72"},{"post_id":"cjw3bjtdv002ie5vxbnlhrijx","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtee003ke5vxf3abkw7l"},{"post_id":"cjw3bjtdv002ie5vxbnlhrijx","category_id":"cjw3bjte0002pe5vxg6yr6xuk","_id":"cjw3bjtef003me5vxungltwow"},{"post_id":"cjw3bjte4002xe5vxf58com4a","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtef003oe5vxs3mbf4gz"},{"post_id":"cjw3bjte4002xe5vxf58com4a","category_id":"cjw3bjtcn000pe5vxua4js7kn","_id":"cjw3bjtef003qe5vxe9xow1bh"},{"post_id":"cjw3bjte60032e5vxztx9w1ha","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjteg003re5vxk3jz3puc"},{"post_id":"cjw3bjte70034e5vxi2se53ci","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjteg003te5vx4pv5vqqh"},{"post_id":"cjw3bjte3002ve5vxla43y4sj","category_id":"cjw3bjte6002ze5vxu0gyrrdx","_id":"cjw3bjteg003ve5vx76sz8wvo"},{"post_id":"cjw3bjte90037e5vx32nibac7","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjteg003xe5vxqphhoyk2"},{"post_id":"cjw3bjtea003ae5vxbq2x7su9","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjteh0040e5vx2xrcugch"},{"post_id":"cjw3bjteb003de5vxkgbmvyec","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjteh0041e5vx402r4ot4"},{"post_id":"cjw3bjteb003de5vxkgbmvyec","category_id":"cjw3bjtcn000pe5vxua4js7kn","_id":"cjw3bjteh0043e5vxdkv0ggof"},{"post_id":"cjw3bjtf10058e5vx9f7l1710","category_id":"cjw3bjtc10002e5vxsoe43o5h","_id":"cjw3bjtf2005ae5vxiuebs5gg"},{"post_id":"cjw3bjtf10058e5vx9f7l1710","category_id":"cjw3bjtcn000pe5vxua4js7kn","_id":"cjw3bjtf2005be5vx394o0k6d"}],"PostTag":[{"post_id":"cjw3bjtbv0000e5vx85ud0hc9","tag_id":"cjw3bjtc30003e5vxg2m12g45","_id":"cjw3bjtc80009e5vx9one8qjy"},{"post_id":"cjw3bjtc8000ae5vxt3pt671c","tag_id":"cjw3bjtc60008e5vx9q77m0hv","_id":"cjw3bjtcb000ee5vxser8po6g"},{"post_id":"cjw3bjtbz0001e5vxje18l2af","tag_id":"cjw3bjtc60008e5vx9q77m0hv","_id":"cjw3bjtcd000ge5vxz0hi9uqo"},{"post_id":"cjw3bjtc30004e5vxkvbtv7pa","tag_id":"cjw3bjtcb000de5vxm0lrjoep","_id":"cjw3bjtcl000me5vxosuv9xs4"},{"post_id":"cjw3bjtc40005e5vxuai1luq7","tag_id":"cjw3bjtcj000ke5vxr5qdbwv7","_id":"cjw3bjtcp000te5vx2v7w9wtq"},{"post_id":"cjw3bjtc50006e5vx314v8ynz","tag_id":"cjw3bjtco000qe5vx43jpqlij","_id":"cjw3bjtcs0010e5vxcux1cuqz"},{"post_id":"cjw3bjtca000be5vxmovsu80s","tag_id":"cjw3bjtcr000ye5vxvf25eoja","_id":"cjw3bjtcz0018e5vxxys5sltu"},{"post_id":"cjw3bjtcb000fe5vxpeaezllx","tag_id":"cjw3bjtcr000ye5vxvf25eoja","_id":"cjw3bjtd9001fe5vxkviqyzdg"},{"post_id":"cjw3bjtcd000he5vxc2ry9ebs","tag_id":"cjw3bjtco000qe5vx43jpqlij","_id":"cjw3bjtdf001me5vx2wv417yl"},{"post_id":"cjw3bjtck000le5vxo25vt3u4","tag_id":"cjw3bjtdd001je5vxhrekqrhi","_id":"cjw3bjtdi001te5vx1m6kh8i9"},{"post_id":"cjw3bjtcm000ne5vx1zrz1fuo","tag_id":"cjw3bjtdg001qe5vxomqbsv0w","_id":"cjw3bjtdl0020e5vx9g748zjc"},{"post_id":"cjw3bjtco000re5vx86kskots","tag_id":"cjw3bjtdk001ye5vxc46yl1tx","_id":"cjw3bjtdq0028e5vx84j0y5qm"},{"post_id":"cjw3bjtcp000ue5vx1ptk3q9q","tag_id":"cjw3bjtdp0026e5vxf23g2o8j","_id":"cjw3bjtdu002ge5vxdjv69k3p"},{"post_id":"cjw3bjtcq000xe5vxt9oj2boi","tag_id":"cjw3bjtdt002de5vxtq3m6uib","_id":"cjw3bjtdz002me5vxrff8m30i"},{"post_id":"cjw3bjtct0013e5vxevhety1k","tag_id":"cjw3bjtdx002je5vxix6gw6j9","_id":"cjw3bjte2002te5vx1m1c56ll"},{"post_id":"cjw3bjtcw0017e5vxt26e201l","tag_id":"cjw3bjte1002re5vxyymbupbq","_id":"cjw3bjte60031e5vxqh9l9xjn"},{"post_id":"cjw3bjtd0001ae5vx2c5wqewh","tag_id":"cjw3bjte5002ye5vxl3e5grqt","_id":"cjw3bjte90038e5vxwz2vblq2"},{"post_id":"cjw3bjtd7001ee5vx5m0wqvjc","tag_id":"cjw3bjte80035e5vx9w1nr2bn","_id":"cjw3bjtec003ee5vx6eid55s7"},{"post_id":"cjw3bjtdb001he5vxwuf0mavq","tag_id":"cjw3bjteb003be5vxmty4jbxa","_id":"cjw3bjtee003ie5vx5qzv9cuy"},{"post_id":"cjw3bjtde001le5vxign8n1qo","tag_id":"cjw3bjted003he5vx4fl2iomw","_id":"cjw3bjtef003ne5vxvftjnahw"},{"post_id":"cjw3bjtdf001oe5vxf4ydwu2b","tag_id":"cjw3bjtef003le5vxcwyjpt5w","_id":"cjw3bjteg003ue5vx9a8524iu"},{"post_id":"cjw3bjtdf001oe5vxf4ydwu2b","tag_id":"cjw3bjtef003pe5vx2yhdw76f","_id":"cjw3bjteg003we5vxmkt6t5fs"},{"post_id":"cjw3bjtdh001se5vxgvc2ungt","tag_id":"cjw3bjteg003se5vx73k0xung","_id":"cjw3bjteh003ze5vxdrrqc7ne"},{"post_id":"cjw3bjtdi001ve5vx1pc8vxy2","tag_id":"cjw3bjteg003ye5vx1roaq2xh","_id":"cjw3bjteh0044e5vxj3v1ml7o"},{"post_id":"cjw3bjtdk001ze5vxf3dkko77","tag_id":"cjw3bjteh0042e5vx034p52h5","_id":"cjw3bjtei0046e5vxuhs2ug4s"},{"post_id":"cjw3bjtdl0022e5vxzaadh9m9","tag_id":"cjw3bjteh0045e5vx3ecuoner","_id":"cjw3bjtei0048e5vxhz3al8bq"},{"post_id":"cjw3bjtdn0024e5vx299ot8ud","tag_id":"cjw3bjtei0047e5vxsgkt6gg5","_id":"cjw3bjtei004ae5vxcg88hc0k"},{"post_id":"cjw3bjtdq0029e5vxs71n79n9","tag_id":"cjw3bjtei0049e5vx0ttll4x5","_id":"cjw3bjtej004ce5vx6ylrgw39"},{"post_id":"cjw3bjtds002be5vxw7pq5fb4","tag_id":"cjw3bjtej004be5vx1eb49l2m","_id":"cjw3bjtej004ee5vxenfpskbv"},{"post_id":"cjw3bjtdu002fe5vx598i41dc","tag_id":"cjw3bjtej004de5vx8ytiu3zk","_id":"cjw3bjtej004ge5vxltv5yorw"},{"post_id":"cjw3bjtdv002ie5vxbnlhrijx","tag_id":"cjw3bjtej004fe5vxqvmulgkp","_id":"cjw3bjtek004je5vx0v3jy24y"},{"post_id":"cjw3bjtdv002ie5vxbnlhrijx","tag_id":"cjw3bjtek004he5vxkzijd30v","_id":"cjw3bjtek004ke5vxic85um1z"},{"post_id":"cjw3bjtdy002le5vxmssh2po4","tag_id":"cjw3bjtek004ie5vxduavqdui","_id":"cjw3bjtek004me5vxz2ty6nrn"},{"post_id":"cjw3bjtdz002oe5vxu0rwccvr","tag_id":"cjw3bjtek004le5vx1vsqprgw","_id":"cjw3bjtem004pe5vxzrpqdshe"},{"post_id":"cjw3bjtdz002oe5vxu0rwccvr","tag_id":"cjw3bjtek004ne5vxrxkejqzz","_id":"cjw3bjten004qe5vxhlpskcsj"},{"post_id":"cjw3bjte1002se5vxozoaqnvg","tag_id":"cjw3bjtem004oe5vxv5g4zc4g","_id":"cjw3bjten004se5vxzecq4n90"},{"post_id":"cjw3bjte3002ve5vxla43y4sj","tag_id":"cjw3bjten004re5vxtuqksd5h","_id":"cjw3bjten004ue5vxizue967x"},{"post_id":"cjw3bjte4002xe5vxf58com4a","tag_id":"cjw3bjten004te5vx99z8talb","_id":"cjw3bjteo004we5vx6l53363n"},{"post_id":"cjw3bjte60032e5vxztx9w1ha","tag_id":"cjw3bjten004ve5vxso83gh70","_id":"cjw3bjteo004ye5vxlhm66ik5"},{"post_id":"cjw3bjte70034e5vxi2se53ci","tag_id":"cjw3bjteo004xe5vx3tcvj1fd","_id":"cjw3bjteo0050e5vxlz98wcdd"},{"post_id":"cjw3bjte90037e5vx32nibac7","tag_id":"cjw3bjteo004ze5vxkw12qiyj","_id":"cjw3bjtep0052e5vxsnh8q8dz"},{"post_id":"cjw3bjtea003ae5vxbq2x7su9","tag_id":"cjw3bjteo0051e5vxidz42gpd","_id":"cjw3bjtep0054e5vx4ge2a73c"},{"post_id":"cjw3bjteb003de5vxkgbmvyec","tag_id":"cjw3bjtep0053e5vxb1htgyzj","_id":"cjw3bjtep0056e5vxjhti08wg"},{"post_id":"cjw3bjteb003de5vxkgbmvyec","tag_id":"cjw3bjtep0055e5vxdrcmw0fd","_id":"cjw3bjtep0057e5vxoo69sxjl"},{"post_id":"cjw3bjtf10058e5vx9f7l1710","tag_id":"cjw3bjtf20059e5vxeg1sqio8","_id":"cjw3bjtf2005ce5vxvq5o2n2v"}],"Tag":[{"name":"提取电话邮箱","_id":"cjw3bjtc30003e5vxg2m12g45"},{"name":"Django","_id":"cjw3bjtc60008e5vx9q77m0hv"},{"name":"DRF","_id":"cjw3bjtcb000de5vxm0lrjoep"},{"name":"command","_id":"cjw3bjtcj000ke5vxr5qdbwv7"},{"name":"待续","_id":"cjw3bjtco000qe5vx43jpqlij"},{"name":"Flask","_id":"cjw3bjtcr000ye5vxvf25eoja"},{"name":"su","_id":"cjw3bjtdd001je5vxhrekqrhi"},{"name":"finally","_id":"cjw3bjtdg001qe5vxomqbsv0w"},{"name":"MySQL 数据库引擎","_id":"cjw3bjtdk001ye5vxc46yl1tx"},{"name":"else其他用法","_id":"cjw3bjtdp0026e5vxf23g2o8j"},{"name":"IP掩码网关修改","_id":"cjw3bjtdt002de5vxtq3m6uib"},{"name":"浅拷贝","_id":"cjw3bjtdx002je5vxix6gw6j9"},{"name":"变量定义","_id":"cjw3bjte1002re5vxyymbupbq"},{"name":"管道","_id":"cjw3bjte5002ye5vxl3e5grqt"},{"name":"Scrapy 数据分析","_id":"cjw3bjte80035e5vx9w1nr2bn"},{"name":"兼容","_id":"cjw3bjteb003be5vxmty4jbxa"},{"name":"时间戳","_id":"cjw3bjted003he5vx4fl2iomw"},{"name":"无序列表","_id":"cjw3bjtef003le5vxcwyjpt5w"},{"name":"Markdown","_id":"cjw3bjtef003pe5vx2yhdw76f"},{"name":"持久化","_id":"cjw3bjteg003se5vx73k0xung"},{"name":"自动生成Model模型类","_id":"cjw3bjteg003ye5vx1roaq2xh"},{"name":"IP","_id":"cjw3bjteh0042e5vx034p52h5"},{"name":"WSGI","_id":"cjw3bjteh0045e5vx3ecuoner"},{"name":"open","_id":"cjw3bjtei0047e5vxsgkt6gg5"},{"name":"logging 日志","_id":"cjw3bjtei0049e5vx0ttll4x5"},{"name":"namedtuple","_id":"cjw3bjtej004be5vx1eb49l2m"},{"name":"pen_questions","_id":"cjw3bjtej004de5vx8ytiu3zk"},{"name":"Python","_id":"cjw3bjtej004fe5vxqvmulgkp"},{"name":"Interview","_id":"cjw3bjtek004he5vxkzijd30v"},{"name":"Redis","_id":"cjw3bjtek004ie5vxduavqdui"},{"name":"正则","_id":"cjw3bjtek004le5vx1vsqprgw"},{"name":"密码强度校验","_id":"cjw3bjtek004ne5vxrxkejqzz"},{"name":"上传图片 s3","_id":"cjw3bjtem004oe5vxv5g4zc4g"},{"name":"新增字段","_id":"cjw3bjten004re5vxtuqksd5h"},{"name":"GrowthHacker","_id":"cjw3bjten004te5vx99z8talb"},{"name":"正则表达式","_id":"cjw3bjten004ve5vxso83gh70"},{"name":"爬虫","_id":"cjw3bjteo004xe5vx3tcvj1fd"},{"name":"数据库","_id":"cjw3bjteo004ze5vxkw12qiyj"},{"name":"\\*expression","_id":"cjw3bjteo0051e5vxidz42gpd"},{"name":"随机","_id":"cjw3bjtep0053e5vxb1htgyzj"},{"name":"猜数字","_id":"cjw3bjtep0055e5vxdrcmw0fd"},{"name":"考拉咨猜想","_id":"cjw3bjtf20059e5vxeg1sqio8"}]}}